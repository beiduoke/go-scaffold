// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/beiduoke/go-scaffold/internal/biz"
	"github.com/beiduoke/go-scaffold/internal/conf"
	"github.com/beiduoke/go-scaffold/internal/data"
	"github.com/beiduoke/go-scaffold/internal/pkg/websocket"
	"github.com/beiduoke/go-scaffold/internal/server"
	"github.com/beiduoke/go-scaffold/internal/service/admin"
	"github.com/beiduoke/go-scaffold/internal/service/web"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, auth *conf.Auth, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	websocketService := websocket.NewWebsocketService(logger)
	v := data.NewModelMigrate()
	db := data.NewDB(confData, logger, v)
	client := data.NewRDB(confData, logger)
	node := data.NewSnowflake(logger)
	dataData, cleanup, err := data.NewData(db, client, node, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	transaction := data.NewTransaction(dataData)
	model := data.NewAuthModel(auth, logger)
	adapter := data.NewAuthAdapter(dataData, auth, logger)
	watcher := data.NewWatcher(confData, logger)
	iEnforcer := data.NewAuthEnforcer(model, adapter, watcher, logger)
	domainRepo := data.NewDomainRepo(dataData, iEnforcer, logger)
	authUsecase := biz.NewAuthUsecase(auth, userRepo, transaction, logger, domainRepo)
	userUsecase := biz.NewUserUsecase(auth, userRepo, transaction, logger, domainRepo)
	domainUsecase := biz.NewDomainUsecase(domainRepo, transaction, logger)
	adminService := admin.NewAdminService(logger, auth, websocketService, authUsecase, userUsecase, domainUsecase)
	webService := web.NewWebService(logger, userUsecase, authUsecase)
	grpcServer := server.NewGRPCServer(confServer, auth, adminService, webService, logger)
	middleware := server.NewAuthMiddleware(auth, model, adapter, iEnforcer)
	serverOption := server.NewMiddleware(logger, middleware)
	httpServer := server.NewHTTPServer(confServer, adminService, webService, serverOption)
	websocketServer := server.NewWebsocketServer(confServer, logger, websocketService)
	app := newApp(logger, grpcServer, httpServer, websocketServer)
	return app, func() {
		cleanup()
	}, nil
}
