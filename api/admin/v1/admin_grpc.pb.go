// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// 登出
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutReply, error)
	// 中台密码登陆
	MiddlePassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 密码登陆
	PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 短信登陆
	SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 邮件登陆
	EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error)
	// 当前登录用户概述
	GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileReply, error)
	// // 获取用户菜单 - 弃用
	// rpc ListUserMenu (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
	//   option (google.api.http) = {
	//     get: "/admin/v1/users/menus"
	//   };
	// }
	// // 获取用户菜单-树形 - 弃用
	// rpc ListUserMenuTree (google.protobuf.Empty) returns (UserMenuTreeReply) {
	//   option (google.api.http) = {
	//     get: "/admin/v1/users/menus/trees"
	//   };
	// }
	// 当前登录用户拥有领域
	ListUserDomain(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserDomainReply, error)
	// 当前登录用户拥有角色
	ListUserRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserRoleReply, error)
	// 获取角色菜单树形列表
	ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeReq, opts ...grpc.CallOption) (*ListUserRoleMenuTreeReply, error)
	// 获取角色权限列表
	ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionReq, opts ...grpc.CallOption) (*ListUserRolePermissionReply, error)
	// 列表用户
	ListUser(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error)
	// 获取用户
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error)
	// 修改用户
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error)
	// 验证用户名是否存在
	ExistUserName(ctx context.Context, in *ExistUserNameReq, opts ...grpc.CallOption) (*ExistUserNameReply, error)
	// 绑定用户领域
	HandleUserDomain(ctx context.Context, in *HandleUserDomainReq, opts ...grpc.CallOption) (*HandleUserDomainReply, error)
	// 绑定用户领域权限
	HandleUserDomainRole(ctx context.Context, in *HandleUserDomainRoleReq, opts ...grpc.CallOption) (*HandleUserDomainRoleReply, error)
	// 领域模块
	// 登陆领域/租户
	LoginDomain(ctx context.Context, in *LoginDomainReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 注册领域/租户
	RegisterDomain(ctx context.Context, in *RegisterDomainReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// 列表领域
	ListDomain(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 获取领域树形列表
	ListDomainTree(ctx context.Context, in *ListDomainTreeReq, opts ...grpc.CallOption) (*ListDomainTreeReply, error)
	// 创建领域
	CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...grpc.CallOption) (*CreateDomainReply, error)
	// 获取领域
	GetDomain(ctx context.Context, in *GetDomainReq, opts ...grpc.CallOption) (*Domain, error)
	// 修改领域
	UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error)
	// 删除领域
	DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...grpc.CallOption) (*DeleteDomainReply, error)
	// 设置领域状态
	UpdateDomainState(ctx context.Context, in *UpdateDomainStateReq, opts ...grpc.CallOption) (*UpdateDomainStateReply, error)
	// 获取角色菜单
	ListDomainMenu(ctx context.Context, in *ListDomainMenuReq, opts ...grpc.CallOption) (*ListDomainMenuReply, error)
	// 处理角色菜单
	HandleDomainMenu(ctx context.Context, in *HandleDomainMenuReq, opts ...grpc.CallOption) (*HandleDomainMenuReply, error)
	// 角色模块
	// 列表角色
	ListRole(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleReply, error)
	// 获取角色
	GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*Role, error)
	// 修改角色
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleReply, error)
	// 设置领域状态
	UpdateRoleState(ctx context.Context, in *UpdateRoleStateReq, opts ...grpc.CallOption) (*UpdateRoleStateReply, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleReply, error)
	// 获取角色菜单
	ListRoleMenu(ctx context.Context, in *ListRoleMenuReq, opts ...grpc.CallOption) (*ListRoleMenuReply, error)
	// 处理角色菜单
	HandleRoleMenu(ctx context.Context, in *HandleRoleMenuReq, opts ...grpc.CallOption) (*HandleRoleMenuReply, error)
	// 处理角色资源
	HandleRoleResource(ctx context.Context, in *HandleRoleResourceReq, opts ...grpc.CallOption) (*HandleRoleResourceReply, error)
	// 资源模块
	// 列表资源
	ListResource(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 列表资源-分组
	ListResourceGroup(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*ListResourceGroupReply, error)
	// 创建资源
	CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*CreateResourceReply, error)
	// 获取资源
	GetResource(ctx context.Context, in *GetResourceReq, opts ...grpc.CallOption) (*Resource, error)
	// 修改资源
	UpdateResource(ctx context.Context, in *UpdateResourceReq, opts ...grpc.CallOption) (*UpdateResourceReply, error)
	// 删除资源
	DeleteResource(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*DeleteResourceReply, error)
	// 菜单模块
	// 列表菜单
	ListMenu(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建菜单
	CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuReply, error)
	// 获取树形菜单
	ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...grpc.CallOption) (*ListMenuTreeReply, error)
	// 获取菜单
	GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*Menu, error)
	// 修改菜单
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuReply, error)
	// 列表部门
	ListDept(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建部门
	CreateDept(ctx context.Context, in *CreateDeptReq, opts ...grpc.CallOption) (*CreateDeptReply, error)
	// 获取部门
	GetDept(ctx context.Context, in *GetDeptReq, opts ...grpc.CallOption) (*Dept, error)
	// 修改部门
	UpdateDept(ctx context.Context, in *UpdateDeptReq, opts ...grpc.CallOption) (*UpdateDeptReply, error)
	// 删除部门
	DeleteDept(ctx context.Context, in *DeleteDeptReq, opts ...grpc.CallOption) (*DeleteDeptReply, error)
	// 获取树形部门
	ListDeptTree(ctx context.Context, in *ListDeptTreeReq, opts ...grpc.CallOption) (*ListDeptTreeReply, error)
	// 列表职位
	ListPost(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建职位
	CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostReply, error)
	// 获取职位
	GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*Post, error)
	// 修改职位
	UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostReply, error)
	// 删除职位
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostReply, error)
	// 设置领域状态
	UpdatePostState(ctx context.Context, in *UpdatePostStateReq, opts ...grpc.CallOption) (*UpdatePostStateReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MiddlePassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/MiddlePassLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/PassLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/SmsLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/EmailLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileReply, error) {
	out := new(GetUserProfileReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserDomain(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserDomainReply, error) {
	out := new(ListUserDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserRoleReply, error) {
	out := new(ListUserRoleReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeReq, opts ...grpc.CallOption) (*ListUserRoleMenuTreeReply, error) {
	out := new(ListUserRoleMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserRoleMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionReq, opts ...grpc.CallOption) (*ListUserRolePermissionReply, error) {
	out := new(ListUserRolePermissionReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUser(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ExistUserName(ctx context.Context, in *ExistUserNameReq, opts ...grpc.CallOption) (*ExistUserNameReply, error) {
	out := new(ExistUserNameReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ExistUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleUserDomain(ctx context.Context, in *HandleUserDomainReq, opts ...grpc.CallOption) (*HandleUserDomainReply, error) {
	out := new(HandleUserDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleUserDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleUserDomainRole(ctx context.Context, in *HandleUserDomainRoleReq, opts ...grpc.CallOption) (*HandleUserDomainRoleReply, error) {
	out := new(HandleUserDomainRoleReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleUserDomainRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LoginDomain(ctx context.Context, in *LoginDomainReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/LoginDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RegisterDomain(ctx context.Context, in *RegisterDomainReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/RegisterDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDomain(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDomainTree(ctx context.Context, in *ListDomainTreeReq, opts ...grpc.CallOption) (*ListDomainTreeReply, error) {
	out := new(ListDomainTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDomainTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...grpc.CallOption) (*CreateDomainReply, error) {
	out := new(CreateDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDomain(ctx context.Context, in *GetDomainReq, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error) {
	out := new(UpdateDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...grpc.CallOption) (*DeleteDomainReply, error) {
	out := new(DeleteDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDomainState(ctx context.Context, in *UpdateDomainStateReq, opts ...grpc.CallOption) (*UpdateDomainStateReply, error) {
	out := new(UpdateDomainStateReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateDomainState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDomainMenu(ctx context.Context, in *ListDomainMenuReq, opts ...grpc.CallOption) (*ListDomainMenuReply, error) {
	out := new(ListDomainMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDomainMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleDomainMenu(ctx context.Context, in *HandleDomainMenuReq, opts ...grpc.CallOption) (*HandleDomainMenuReply, error) {
	out := new(HandleDomainMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleDomainMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListRole(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleReply, error) {
	out := new(CreateRoleReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleReply, error) {
	out := new(UpdateRoleReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateRoleState(ctx context.Context, in *UpdateRoleStateReq, opts ...grpc.CallOption) (*UpdateRoleStateReply, error) {
	out := new(UpdateRoleStateReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateRoleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleReply, error) {
	out := new(DeleteRoleReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListRoleMenu(ctx context.Context, in *ListRoleMenuReq, opts ...grpc.CallOption) (*ListRoleMenuReply, error) {
	out := new(ListRoleMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleRoleMenu(ctx context.Context, in *HandleRoleMenuReq, opts ...grpc.CallOption) (*HandleRoleMenuReply, error) {
	out := new(HandleRoleMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleRoleResource(ctx context.Context, in *HandleRoleResourceReq, opts ...grpc.CallOption) (*HandleRoleResourceReply, error) {
	out := new(HandleRoleResourceReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleRoleResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListResource(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListResourceGroup(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*ListResourceGroupReply, error) {
	out := new(ListResourceGroupReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListResourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*CreateResourceReply, error) {
	out := new(CreateResourceReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetResource(ctx context.Context, in *GetResourceReq, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateResource(ctx context.Context, in *UpdateResourceReq, opts ...grpc.CallOption) (*UpdateResourceReply, error) {
	out := new(UpdateResourceReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteResource(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*DeleteResourceReply, error) {
	out := new(DeleteResourceReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListMenu(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuReply, error) {
	out := new(CreateMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...grpc.CallOption) (*ListMenuTreeReply, error) {
	out := new(ListMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error) {
	out := new(UpdateMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuReply, error) {
	out := new(DeleteMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDept(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateDept(ctx context.Context, in *CreateDeptReq, opts ...grpc.CallOption) (*CreateDeptReply, error) {
	out := new(CreateDeptReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDept(ctx context.Context, in *GetDeptReq, opts ...grpc.CallOption) (*Dept, error) {
	out := new(Dept)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDept(ctx context.Context, in *UpdateDeptReq, opts ...grpc.CallOption) (*UpdateDeptReply, error) {
	out := new(UpdateDeptReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteDept(ctx context.Context, in *DeleteDeptReq, opts ...grpc.CallOption) (*DeleteDeptReply, error) {
	out := new(DeleteDeptReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDeptTree(ctx context.Context, in *ListDeptTreeReq, opts ...grpc.CallOption) (*ListDeptTreeReply, error) {
	out := new(ListDeptTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDeptTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListPost(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostReply, error) {
	out := new(CreatePostReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostReply, error) {
	out := new(UpdatePostReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostReply, error) {
	out := new(DeletePostReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdatePostState(ctx context.Context, in *UpdatePostStateReq, opts ...grpc.CallOption) (*UpdatePostStateReply, error) {
	out := new(UpdatePostStateReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdatePostState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// 登出
	Logout(context.Context, *emptypb.Empty) (*LogoutReply, error)
	// 中台密码登陆
	MiddlePassLogin(context.Context, *PassLoginReq) (*LoginReply, error)
	// 密码登陆
	PassLogin(context.Context, *PassLoginReq) (*LoginReply, error)
	// 短信登陆
	SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error)
	// 邮件登陆
	EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(context.Context, *emptypb.Empty) (*User, error)
	// 当前登录用户概述
	GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error)
	// // 获取用户菜单 - 弃用
	// rpc ListUserMenu (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
	//   option (google.api.http) = {
	//     get: "/admin/v1/users/menus"
	//   };
	// }
	// // 获取用户菜单-树形 - 弃用
	// rpc ListUserMenuTree (google.protobuf.Empty) returns (UserMenuTreeReply) {
	//   option (google.api.http) = {
	//     get: "/admin/v1/users/menus/trees"
	//   };
	// }
	// 当前登录用户拥有领域
	ListUserDomain(context.Context, *emptypb.Empty) (*ListUserDomainReply, error)
	// 当前登录用户拥有角色
	ListUserRole(context.Context, *emptypb.Empty) (*ListUserRoleReply, error)
	// 获取角色菜单树形列表
	ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeReq) (*ListUserRoleMenuTreeReply, error)
	// 获取角色权限列表
	ListUserRolePermission(context.Context, *ListUserRolePermissionReq) (*ListUserRolePermissionReply, error)
	// 列表用户
	ListUser(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	// 获取用户
	GetUser(context.Context, *GetUserReq) (*User, error)
	// 修改用户
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	// 验证用户名是否存在
	ExistUserName(context.Context, *ExistUserNameReq) (*ExistUserNameReply, error)
	// 绑定用户领域
	HandleUserDomain(context.Context, *HandleUserDomainReq) (*HandleUserDomainReply, error)
	// 绑定用户领域权限
	HandleUserDomainRole(context.Context, *HandleUserDomainRoleReq) (*HandleUserDomainRoleReply, error)
	// 领域模块
	// 登陆领域/租户
	LoginDomain(context.Context, *LoginDomainReq) (*LoginReply, error)
	// 注册领域/租户
	RegisterDomain(context.Context, *RegisterDomainReq) (*RegisterReply, error)
	// 列表领域
	ListDomain(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 获取领域树形列表
	ListDomainTree(context.Context, *ListDomainTreeReq) (*ListDomainTreeReply, error)
	// 创建领域
	CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error)
	// 获取领域
	GetDomain(context.Context, *GetDomainReq) (*Domain, error)
	// 修改领域
	UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error)
	// 删除领域
	DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error)
	// 设置领域状态
	UpdateDomainState(context.Context, *UpdateDomainStateReq) (*UpdateDomainStateReply, error)
	// 获取角色菜单
	ListDomainMenu(context.Context, *ListDomainMenuReq) (*ListDomainMenuReply, error)
	// 处理角色菜单
	HandleDomainMenu(context.Context, *HandleDomainMenuReq) (*HandleDomainMenuReply, error)
	// 角色模块
	// 列表角色
	ListRole(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建角色
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleReply, error)
	// 获取角色
	GetRole(context.Context, *GetRoleReq) (*Role, error)
	// 修改角色
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleReply, error)
	// 设置领域状态
	UpdateRoleState(context.Context, *UpdateRoleStateReq) (*UpdateRoleStateReply, error)
	// 删除角色
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleReply, error)
	// 获取角色菜单
	ListRoleMenu(context.Context, *ListRoleMenuReq) (*ListRoleMenuReply, error)
	// 处理角色菜单
	HandleRoleMenu(context.Context, *HandleRoleMenuReq) (*HandleRoleMenuReply, error)
	// 处理角色资源
	HandleRoleResource(context.Context, *HandleRoleResourceReq) (*HandleRoleResourceReply, error)
	// 资源模块
	// 列表资源
	ListResource(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 列表资源-分组
	ListResourceGroup(context.Context, *protobuf.PagingReq) (*ListResourceGroupReply, error)
	// 创建资源
	CreateResource(context.Context, *CreateResourceReq) (*CreateResourceReply, error)
	// 获取资源
	GetResource(context.Context, *GetResourceReq) (*Resource, error)
	// 修改资源
	UpdateResource(context.Context, *UpdateResourceReq) (*UpdateResourceReply, error)
	// 删除资源
	DeleteResource(context.Context, *DeleteResourceReq) (*DeleteResourceReply, error)
	// 菜单模块
	// 列表菜单
	ListMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建菜单
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error)
	// 获取树形菜单
	ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error)
	// 获取菜单
	GetMenu(context.Context, *GetMenuReq) (*Menu, error)
	// 修改菜单
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error)
	// 删除菜单
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error)
	// 列表部门
	ListDept(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建部门
	CreateDept(context.Context, *CreateDeptReq) (*CreateDeptReply, error)
	// 获取部门
	GetDept(context.Context, *GetDeptReq) (*Dept, error)
	// 修改部门
	UpdateDept(context.Context, *UpdateDeptReq) (*UpdateDeptReply, error)
	// 删除部门
	DeleteDept(context.Context, *DeleteDeptReq) (*DeleteDeptReply, error)
	// 获取树形部门
	ListDeptTree(context.Context, *ListDeptTreeReq) (*ListDeptTreeReply, error)
	// 列表职位
	ListPost(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建职位
	CreatePost(context.Context, *CreatePostReq) (*CreatePostReply, error)
	// 获取职位
	GetPost(context.Context, *GetPostReq) (*Post, error)
	// 修改职位
	UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostReply, error)
	// 删除职位
	DeletePost(context.Context, *DeletePostReq) (*DeletePostReply, error)
	// 设置领域状态
	UpdatePostState(context.Context, *UpdatePostStateReq) (*UpdatePostStateReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Logout(context.Context, *emptypb.Empty) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServer) MiddlePassLogin(context.Context, *PassLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiddlePassLogin not implemented")
}
func (UnimplementedAdminServer) PassLogin(context.Context, *PassLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassLogin not implemented")
}
func (UnimplementedAdminServer) SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsLogin not implemented")
}
func (UnimplementedAdminServer) EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAdminServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAdminServer) GetUserInfo(context.Context, *emptypb.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAdminServer) GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAdminServer) ListUserDomain(context.Context, *emptypb.Empty) (*ListUserDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDomain not implemented")
}
func (UnimplementedAdminServer) ListUserRole(context.Context, *emptypb.Empty) (*ListUserRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRole not implemented")
}
func (UnimplementedAdminServer) ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeReq) (*ListUserRoleMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoleMenuTree not implemented")
}
func (UnimplementedAdminServer) ListUserRolePermission(context.Context, *ListUserRolePermissionReq) (*ListUserRolePermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRolePermission not implemented")
}
func (UnimplementedAdminServer) ListUser(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedAdminServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminServer) GetUser(context.Context, *GetUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServer) ExistUserName(context.Context, *ExistUserNameReq) (*ExistUserNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserName not implemented")
}
func (UnimplementedAdminServer) HandleUserDomain(context.Context, *HandleUserDomainReq) (*HandleUserDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUserDomain not implemented")
}
func (UnimplementedAdminServer) HandleUserDomainRole(context.Context, *HandleUserDomainRoleReq) (*HandleUserDomainRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUserDomainRole not implemented")
}
func (UnimplementedAdminServer) LoginDomain(context.Context, *LoginDomainReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDomain not implemented")
}
func (UnimplementedAdminServer) RegisterDomain(context.Context, *RegisterDomainReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDomain not implemented")
}
func (UnimplementedAdminServer) ListDomain(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomain not implemented")
}
func (UnimplementedAdminServer) ListDomainTree(context.Context, *ListDomainTreeReq) (*ListDomainTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainTree not implemented")
}
func (UnimplementedAdminServer) CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedAdminServer) GetDomain(context.Context, *GetDomainReq) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedAdminServer) UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (UnimplementedAdminServer) DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedAdminServer) UpdateDomainState(context.Context, *UpdateDomainStateReq) (*UpdateDomainStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainState not implemented")
}
func (UnimplementedAdminServer) ListDomainMenu(context.Context, *ListDomainMenuReq) (*ListDomainMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainMenu not implemented")
}
func (UnimplementedAdminServer) HandleDomainMenu(context.Context, *HandleDomainMenuReq) (*HandleDomainMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDomainMenu not implemented")
}
func (UnimplementedAdminServer) ListRole(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedAdminServer) CreateRole(context.Context, *CreateRoleReq) (*CreateRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAdminServer) GetRole(context.Context, *GetRoleReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAdminServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAdminServer) UpdateRoleState(context.Context, *UpdateRoleStateReq) (*UpdateRoleStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleState not implemented")
}
func (UnimplementedAdminServer) DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminServer) ListRoleMenu(context.Context, *ListRoleMenuReq) (*ListRoleMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleMenu not implemented")
}
func (UnimplementedAdminServer) HandleRoleMenu(context.Context, *HandleRoleMenuReq) (*HandleRoleMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleMenu not implemented")
}
func (UnimplementedAdminServer) HandleRoleResource(context.Context, *HandleRoleResourceReq) (*HandleRoleResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleResource not implemented")
}
func (UnimplementedAdminServer) ListResource(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResource not implemented")
}
func (UnimplementedAdminServer) ListResourceGroup(context.Context, *protobuf.PagingReq) (*ListResourceGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceGroup not implemented")
}
func (UnimplementedAdminServer) CreateResource(context.Context, *CreateResourceReq) (*CreateResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedAdminServer) GetResource(context.Context, *GetResourceReq) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedAdminServer) UpdateResource(context.Context, *UpdateResourceReq) (*UpdateResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedAdminServer) DeleteResource(context.Context, *DeleteResourceReq) (*DeleteResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedAdminServer) ListMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedAdminServer) CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAdminServer) ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuTree not implemented")
}
func (UnimplementedAdminServer) GetMenu(context.Context, *GetMenuReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedAdminServer) UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAdminServer) DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAdminServer) ListDept(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDept not implemented")
}
func (UnimplementedAdminServer) CreateDept(context.Context, *CreateDeptReq) (*CreateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDept not implemented")
}
func (UnimplementedAdminServer) GetDept(context.Context, *GetDeptReq) (*Dept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDept not implemented")
}
func (UnimplementedAdminServer) UpdateDept(context.Context, *UpdateDeptReq) (*UpdateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDept not implemented")
}
func (UnimplementedAdminServer) DeleteDept(context.Context, *DeleteDeptReq) (*DeleteDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDept not implemented")
}
func (UnimplementedAdminServer) ListDeptTree(context.Context, *ListDeptTreeReq) (*ListDeptTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeptTree not implemented")
}
func (UnimplementedAdminServer) ListPost(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPost not implemented")
}
func (UnimplementedAdminServer) CreatePost(context.Context, *CreatePostReq) (*CreatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedAdminServer) GetPost(context.Context, *GetPostReq) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedAdminServer) UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedAdminServer) DeletePost(context.Context, *DeletePostReq) (*DeletePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedAdminServer) UpdatePostState(context.Context, *UpdatePostStateReq) (*UpdatePostStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostState not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MiddlePassLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MiddlePassLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/MiddlePassLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MiddlePassLogin(ctx, req.(*PassLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_PassLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).PassLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/PassLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).PassLogin(ctx, req.(*PassLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SmsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SmsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/SmsLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SmsLogin(ctx, req.(*SmsLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/EmailLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).EmailLogin(ctx, req.(*EmailLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserDomain(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserRoleMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserRoleMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserRoleMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserRoleMenuTree(ctx, req.(*ListUserRoleMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserRolePermission(ctx, req.(*ListUserRolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUser(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ExistUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ExistUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ExistUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ExistUserName(ctx, req.(*ExistUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleUserDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleUserDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleUserDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleUserDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleUserDomain(ctx, req.(*HandleUserDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleUserDomainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleUserDomainRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleUserDomainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleUserDomainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleUserDomainRole(ctx, req.(*HandleUserDomainRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LoginDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LoginDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/LoginDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LoginDomain(ctx, req.(*LoginDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RegisterDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RegisterDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/RegisterDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RegisterDomain(ctx, req.(*RegisterDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDomain(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDomainTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDomainTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDomainTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDomainTree(ctx, req.(*ListDomainTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateDomain(ctx, req.(*CreateDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDomain(ctx, req.(*GetDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDomain(ctx, req.(*UpdateDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteDomain(ctx, req.(*DeleteDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDomainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDomainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateDomainState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDomainState(ctx, req.(*UpdateDomainStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDomainMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDomainMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDomainMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDomainMenu(ctx, req.(*ListDomainMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleDomainMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleDomainMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleDomainMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleDomainMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleDomainMenu(ctx, req.(*HandleDomainMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListRole(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRole(ctx, req.(*GetRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateRoleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateRoleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateRoleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateRoleState(ctx, req.(*UpdateRoleStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListRoleMenu(ctx, req.(*ListRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleRoleMenu(ctx, req.(*HandleRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleRoleResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleRoleResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleRoleResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleRoleResource(ctx, req.(*HandleRoleResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListResource(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListResourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListResourceGroup(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateResource(ctx, req.(*CreateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetResource(ctx, req.(*GetResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateResource(ctx, req.(*UpdateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteResource(ctx, req.(*DeleteResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListMenu(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateMenu(ctx, req.(*CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListMenuTree(ctx, req.(*ListMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenu(ctx, req.(*GetMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteMenu(ctx, req.(*DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDept(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateDept(ctx, req.(*CreateDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDept(ctx, req.(*GetDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDept(ctx, req.(*UpdateDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteDept(ctx, req.(*DeleteDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDeptTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDeptTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDeptTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDeptTree(ctx, req.(*ListDeptTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListPost(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreatePost(ctx, req.(*CreatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPost(ctx, req.(*GetPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdatePost(ctx, req.(*UpdatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdatePostState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdatePostState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdatePostState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdatePostState(ctx, req.(*UpdatePostStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _Admin_Logout_Handler,
		},
		{
			MethodName: "MiddlePassLogin",
			Handler:    _Admin_MiddlePassLogin_Handler,
		},
		{
			MethodName: "PassLogin",
			Handler:    _Admin_PassLogin_Handler,
		},
		{
			MethodName: "SmsLogin",
			Handler:    _Admin_SmsLogin_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _Admin_EmailLogin_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Admin_Register_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Admin_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Admin_GetUserProfile_Handler,
		},
		{
			MethodName: "ListUserDomain",
			Handler:    _Admin_ListUserDomain_Handler,
		},
		{
			MethodName: "ListUserRole",
			Handler:    _Admin_ListUserRole_Handler,
		},
		{
			MethodName: "ListUserRoleMenuTree",
			Handler:    _Admin_ListUserRoleMenuTree_Handler,
		},
		{
			MethodName: "ListUserRolePermission",
			Handler:    _Admin_ListUserRolePermission_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Admin_ListUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Admin_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Admin_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Admin_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Admin_DeleteUser_Handler,
		},
		{
			MethodName: "ExistUserName",
			Handler:    _Admin_ExistUserName_Handler,
		},
		{
			MethodName: "HandleUserDomain",
			Handler:    _Admin_HandleUserDomain_Handler,
		},
		{
			MethodName: "HandleUserDomainRole",
			Handler:    _Admin_HandleUserDomainRole_Handler,
		},
		{
			MethodName: "LoginDomain",
			Handler:    _Admin_LoginDomain_Handler,
		},
		{
			MethodName: "RegisterDomain",
			Handler:    _Admin_RegisterDomain_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _Admin_ListDomain_Handler,
		},
		{
			MethodName: "ListDomainTree",
			Handler:    _Admin_ListDomainTree_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _Admin_CreateDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _Admin_GetDomain_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _Admin_UpdateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _Admin_DeleteDomain_Handler,
		},
		{
			MethodName: "UpdateDomainState",
			Handler:    _Admin_UpdateDomainState_Handler,
		},
		{
			MethodName: "ListDomainMenu",
			Handler:    _Admin_ListDomainMenu_Handler,
		},
		{
			MethodName: "HandleDomainMenu",
			Handler:    _Admin_HandleDomainMenu_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _Admin_ListRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Admin_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Admin_GetRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Admin_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateRoleState",
			Handler:    _Admin_UpdateRoleState_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Admin_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoleMenu",
			Handler:    _Admin_ListRoleMenu_Handler,
		},
		{
			MethodName: "HandleRoleMenu",
			Handler:    _Admin_HandleRoleMenu_Handler,
		},
		{
			MethodName: "HandleRoleResource",
			Handler:    _Admin_HandleRoleResource_Handler,
		},
		{
			MethodName: "ListResource",
			Handler:    _Admin_ListResource_Handler,
		},
		{
			MethodName: "ListResourceGroup",
			Handler:    _Admin_ListResourceGroup_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _Admin_CreateResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _Admin_GetResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Admin_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Admin_DeleteResource_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _Admin_ListMenu_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Admin_CreateMenu_Handler,
		},
		{
			MethodName: "ListMenuTree",
			Handler:    _Admin_ListMenuTree_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _Admin_GetMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Admin_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Admin_DeleteMenu_Handler,
		},
		{
			MethodName: "ListDept",
			Handler:    _Admin_ListDept_Handler,
		},
		{
			MethodName: "CreateDept",
			Handler:    _Admin_CreateDept_Handler,
		},
		{
			MethodName: "GetDept",
			Handler:    _Admin_GetDept_Handler,
		},
		{
			MethodName: "UpdateDept",
			Handler:    _Admin_UpdateDept_Handler,
		},
		{
			MethodName: "DeleteDept",
			Handler:    _Admin_DeleteDept_Handler,
		},
		{
			MethodName: "ListDeptTree",
			Handler:    _Admin_ListDeptTree_Handler,
		},
		{
			MethodName: "ListPost",
			Handler:    _Admin_ListPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Admin_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Admin_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Admin_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Admin_DeletePost_Handler,
		},
		{
			MethodName: "UpdatePostState",
			Handler:    _Admin_UpdatePostState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/admin.proto",
}
