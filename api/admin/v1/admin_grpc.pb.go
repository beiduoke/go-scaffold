// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_Logout_FullMethodName                     = "/admin.v1.AdminService/Logout"
	AdminService_Login_FullMethodName                      = "/admin.v1.AdminService/Login"
	AdminService_Register_FullMethodName                   = "/admin.v1.AdminService/Register"
	AdminService_SmsLogin_FullMethodName                   = "/admin.v1.AdminService/SmsLogin"
	AdminService_EmailLogin_FullMethodName                 = "/admin.v1.AdminService/EmailLogin"
	AdminService_GetUserInfo_FullMethodName                = "/admin.v1.AdminService/GetUserInfo"
	AdminService_GetUserProfile_FullMethodName             = "/admin.v1.AdminService/GetUserProfile"
	AdminService_ListUserRole_FullMethodName               = "/admin.v1.AdminService/ListUserRole"
	AdminService_ListUserRoleMenuRouterTree_FullMethodName = "/admin.v1.AdminService/ListUserRoleMenuRouterTree"
	AdminService_ListUserRoleMenuTree_FullMethodName       = "/admin.v1.AdminService/ListUserRoleMenuTree"
	AdminService_ListUserRolePermission_FullMethodName     = "/admin.v1.AdminService/ListUserRolePermission"
	AdminService_ListUser_FullMethodName                   = "/admin.v1.AdminService/ListUser"
	AdminService_CreateUser_FullMethodName                 = "/admin.v1.AdminService/CreateUser"
	AdminService_GetUser_FullMethodName                    = "/admin.v1.AdminService/GetUser"
	AdminService_UpdateUser_FullMethodName                 = "/admin.v1.AdminService/UpdateUser"
	AdminService_DeleteUser_FullMethodName                 = "/admin.v1.AdminService/DeleteUser"
	AdminService_ExistUserName_FullMethodName              = "/admin.v1.AdminService/ExistUserName"
	AdminService_ListDomain_FullMethodName                 = "/admin.v1.AdminService/ListDomain"
	AdminService_ListDomainTree_FullMethodName             = "/admin.v1.AdminService/ListDomainTree"
	AdminService_CreateDomain_FullMethodName               = "/admin.v1.AdminService/CreateDomain"
	AdminService_GetDomain_FullMethodName                  = "/admin.v1.AdminService/GetDomain"
	AdminService_GetDomainCode_FullMethodName              = "/admin.v1.AdminService/GetDomainCode"
	AdminService_GetDomainName_FullMethodName              = "/admin.v1.AdminService/GetDomainName"
	AdminService_UpdateDomain_FullMethodName               = "/admin.v1.AdminService/UpdateDomain"
	AdminService_DeleteDomain_FullMethodName               = "/admin.v1.AdminService/DeleteDomain"
	AdminService_UpdateDomainState_FullMethodName          = "/admin.v1.AdminService/UpdateDomainState"
	AdminService_ListDomainMenu_FullMethodName             = "/admin.v1.AdminService/ListDomainMenu"
	AdminService_HandleDomainMenu_FullMethodName           = "/admin.v1.AdminService/HandleDomainMenu"
	AdminService_ListRole_FullMethodName                   = "/admin.v1.AdminService/ListRole"
	AdminService_CreateRole_FullMethodName                 = "/admin.v1.AdminService/CreateRole"
	AdminService_GetRole_FullMethodName                    = "/admin.v1.AdminService/GetRole"
	AdminService_UpdateRole_FullMethodName                 = "/admin.v1.AdminService/UpdateRole"
	AdminService_UpdateRoleState_FullMethodName            = "/admin.v1.AdminService/UpdateRoleState"
	AdminService_DeleteRole_FullMethodName                 = "/admin.v1.AdminService/DeleteRole"
	AdminService_ListRoleMenu_FullMethodName               = "/admin.v1.AdminService/ListRoleMenu"
	AdminService_HandleRoleMenu_FullMethodName             = "/admin.v1.AdminService/HandleRoleMenu"
	AdminService_ListRoleDept_FullMethodName               = "/admin.v1.AdminService/ListRoleDept"
	AdminService_GetRoleDataScope_FullMethodName           = "/admin.v1.AdminService/GetRoleDataScope"
	AdminService_HandleRoleDataScope_FullMethodName        = "/admin.v1.AdminService/HandleRoleDataScope"
	AdminService_ListMenu_FullMethodName                   = "/admin.v1.AdminService/ListMenu"
	AdminService_CreateMenu_FullMethodName                 = "/admin.v1.AdminService/CreateMenu"
	AdminService_ListMenuTree_FullMethodName               = "/admin.v1.AdminService/ListMenuTree"
	AdminService_GetMenu_FullMethodName                    = "/admin.v1.AdminService/GetMenu"
	AdminService_UpdateMenu_FullMethodName                 = "/admin.v1.AdminService/UpdateMenu"
	AdminService_DeleteMenu_FullMethodName                 = "/admin.v1.AdminService/DeleteMenu"
	AdminService_ListDept_FullMethodName                   = "/admin.v1.AdminService/ListDept"
	AdminService_CreateDept_FullMethodName                 = "/admin.v1.AdminService/CreateDept"
	AdminService_GetDept_FullMethodName                    = "/admin.v1.AdminService/GetDept"
	AdminService_UpdateDept_FullMethodName                 = "/admin.v1.AdminService/UpdateDept"
	AdminService_UpdateDeptState_FullMethodName            = "/admin.v1.AdminService/UpdateDeptState"
	AdminService_DeleteDept_FullMethodName                 = "/admin.v1.AdminService/DeleteDept"
	AdminService_ListDeptTree_FullMethodName               = "/admin.v1.AdminService/ListDeptTree"
	AdminService_ListPost_FullMethodName                   = "/admin.v1.AdminService/ListPost"
	AdminService_CreatePost_FullMethodName                 = "/admin.v1.AdminService/CreatePost"
	AdminService_GetPost_FullMethodName                    = "/admin.v1.AdminService/GetPost"
	AdminService_UpdatePost_FullMethodName                 = "/admin.v1.AdminService/UpdatePost"
	AdminService_DeletePost_FullMethodName                 = "/admin.v1.AdminService/DeletePost"
	AdminService_UpdatePostState_FullMethodName            = "/admin.v1.AdminService/UpdatePostState"
	AdminService_ListDict_FullMethodName                   = "/admin.v1.AdminService/ListDict"
	AdminService_CreateDict_FullMethodName                 = "/admin.v1.AdminService/CreateDict"
	AdminService_GetDict_FullMethodName                    = "/admin.v1.AdminService/GetDict"
	AdminService_UpdateDict_FullMethodName                 = "/admin.v1.AdminService/UpdateDict"
	AdminService_DeleteDict_FullMethodName                 = "/admin.v1.AdminService/DeleteDict"
	AdminService_UpdateDictState_FullMethodName            = "/admin.v1.AdminService/UpdateDictState"
	AdminService_ListDictData_FullMethodName               = "/admin.v1.AdminService/ListDictData"
	AdminService_CreateDictData_FullMethodName             = "/admin.v1.AdminService/CreateDictData"
	AdminService_GetDictData_FullMethodName                = "/admin.v1.AdminService/GetDictData"
	AdminService_UpdateDictData_FullMethodName             = "/admin.v1.AdminService/UpdateDictData"
	AdminService_DeleteDictData_FullMethodName             = "/admin.v1.AdminService/DeleteDictData"
	AdminService_UpdateDictDataState_FullMethodName        = "/admin.v1.AdminService/UpdateDictDataState"
	AdminService_ListDomainPackage_FullMethodName          = "/admin.v1.AdminService/ListDomainPackage"
	AdminService_CreateDomainPackage_FullMethodName        = "/admin.v1.AdminService/CreateDomainPackage"
	AdminService_GetDomainPackage_FullMethodName           = "/admin.v1.AdminService/GetDomainPackage"
	AdminService_UpdateDomainPackage_FullMethodName        = "/admin.v1.AdminService/UpdateDomainPackage"
	AdminService_UpdateDomainPackageState_FullMethodName   = "/admin.v1.AdminService/UpdateDomainPackageState"
	AdminService_DeleteDomainPackage_FullMethodName        = "/admin.v1.AdminService/DeleteDomainPackage"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// 登出
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// 密码登陆
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 注册
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 短信登陆
	SmsLogin(ctx context.Context, in *SmsLoginRequest, opts ...grpc.CallOption) (*SmsLoginResponse, error)
	// 邮件登陆
	EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// 当前登录用户概述
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// 当前登录用户拥有角色
	ListUserRole(ctx context.Context, in *ListUserRoleRequest, opts ...grpc.CallOption) (*ListUserRoleResponse, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuRouterTree(ctx context.Context, in *ListUserRoleMenuRouterTreeRequest, opts ...grpc.CallOption) (*ListUserRoleMenuRouterTreeResponse, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeRequest, opts ...grpc.CallOption) (*ListUserRoleMenuTreeResponse, error)
	// 获取角色权限列表
	ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionRequest, opts ...grpc.CallOption) (*ListUserRolePermissionResponse, error)
	// 列表用户
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// 获取用户
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	// 修改用户
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// 验证用户名是否存在
	ExistUserName(ctx context.Context, in *ExistUserNameRequest, opts ...grpc.CallOption) (*ExistUserNameResponse, error)
	// 列表租户
	ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*ListDomainResponse, error)
	// 获取租户树形列表
	ListDomainTree(ctx context.Context, in *ListDomainTreeRequest, opts ...grpc.CallOption) (*ListDomainTreeResponse, error)
	// 创建租户
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	// 获取租户
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// 获取租户
	GetDomainCode(ctx context.Context, in *GetDomainCodeRequest, opts ...grpc.CallOption) (*Domain, error)
	// 获取租户
	GetDomainName(ctx context.Context, in *GetDomainNameRequest, opts ...grpc.CallOption) (*Domain, error)
	// 修改租户
	UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error)
	// 删除租户
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*DeleteDomainResponse, error)
	// 设置租户状态
	UpdateDomainState(ctx context.Context, in *UpdateDomainStateRequest, opts ...grpc.CallOption) (*UpdateDomainStateResponse, error)
	// 获取角色菜单
	ListDomainMenu(ctx context.Context, in *ListDomainMenuRequest, opts ...grpc.CallOption) (*ListDomainMenuResponse, error)
	// 处理角色菜单
	HandleDomainMenu(ctx context.Context, in *HandleDomainMenuRequest, opts ...grpc.CallOption) (*HandleDomainMenuResponse, error)
	// 角色模块
	// 列表角色
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// 获取指定ID角色
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
	// 修改指定ID角色
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// 更新指定ID角色状态
	UpdateRoleState(ctx context.Context, in *UpdateRoleStateRequest, opts ...grpc.CallOption) (*UpdateRoleStateResponse, error)
	// 删除指定ID角色
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// 获取指定ID角色菜单
	ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...grpc.CallOption) (*ListRoleMenuResponse, error)
	// 处理指定ID角色菜单
	HandleRoleMenu(ctx context.Context, in *HandleRoleMenuRequest, opts ...grpc.CallOption) (*HandleRoleMenuResponse, error)
	// 获取指定ID角色部门
	ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...grpc.CallOption) (*ListRoleDeptResponse, error)
	// 获取指定ID角色数据范围
	GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeRequest, opts ...grpc.CallOption) (*GetRoleDataScopeResponse, error)
	// 处理指定ID角色数据范围
	HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeRequest, opts ...grpc.CallOption) (*HandleRoleDataScopeResponse, error)
	// 菜单模块
	// 列表菜单
	ListMenu(ctx context.Context, in *ListMenuRequest, opts ...grpc.CallOption) (*ListMenuResponse, error)
	// 创建菜单
	CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*CreateMenuResponse, error)
	// 获取树形菜单
	ListMenuTree(ctx context.Context, in *ListMenuTreeRequest, opts ...grpc.CallOption) (*ListMenuTreeResponse, error)
	// 获取菜单
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*Menu, error)
	// 修改菜单
	UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*UpdateMenuResponse, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*DeleteMenuResponse, error)
	// 列表部门
	ListDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptResponse, error)
	// 创建部门
	CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...grpc.CallOption) (*CreateDeptResponse, error)
	// 获取部门
	GetDept(ctx context.Context, in *GetDeptRequest, opts ...grpc.CallOption) (*Dept, error)
	// 修改部门
	UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...grpc.CallOption) (*UpdateDeptResponse, error)
	// 更新指定ID角色状态
	UpdateDeptState(ctx context.Context, in *UpdateDeptStateRequest, opts ...grpc.CallOption) (*UpdateDeptStateResponse, error)
	// 删除部门
	DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...grpc.CallOption) (*DeleteDeptResponse, error)
	// 获取全部部门树形
	ListDeptTree(ctx context.Context, in *ListDeptTreeRequest, opts ...grpc.CallOption) (*ListDeptTreeResponse, error)
	// 列表岗位
	ListPost(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostResponse, error)
	// 创建岗位
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	// 获取岗位
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error)
	// 修改岗位
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	// 删除岗位
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	// 设置岗位状态
	UpdatePostState(ctx context.Context, in *UpdatePostStateRequest, opts ...grpc.CallOption) (*UpdatePostStateResponse, error)
	// 列表字典
	ListDict(ctx context.Context, in *ListDictRequest, opts ...grpc.CallOption) (*ListDictResponse, error)
	// 创建字典
	CreateDict(ctx context.Context, in *CreateDictRequest, opts ...grpc.CallOption) (*CreateDictResponse, error)
	// 获取字典
	GetDict(ctx context.Context, in *GetDictRequest, opts ...grpc.CallOption) (*Dict, error)
	// 修改字典
	UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...grpc.CallOption) (*UpdateDictResponse, error)
	// 删除字典
	DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...grpc.CallOption) (*DeleteDictResponse, error)
	// 设置字典状态
	UpdateDictState(ctx context.Context, in *UpdateDictStateRequest, opts ...grpc.CallOption) (*UpdateDictStateResponse, error)
	// 列表字典数据
	ListDictData(ctx context.Context, in *ListDictDataRequest, opts ...grpc.CallOption) (*ListDictDataResponse, error)
	// 创建字典数据
	CreateDictData(ctx context.Context, in *CreateDictDataRequest, opts ...grpc.CallOption) (*CreateDictDataResponse, error)
	// 获取字典数据
	GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*DictData, error)
	// 修改字典数据
	UpdateDictData(ctx context.Context, in *UpdateDictDataRequest, opts ...grpc.CallOption) (*UpdateDictDataResponse, error)
	// 删除字典数据
	DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...grpc.CallOption) (*DeleteDictDataResponse, error)
	// 设置字典数据状态
	UpdateDictDataState(ctx context.Context, in *UpdateDictDataStateRequest, opts ...grpc.CallOption) (*UpdateDictDataStateResponse, error)
	// 列表租户套餐
	ListDomainPackage(ctx context.Context, in *ListDomainPackageRequest, opts ...grpc.CallOption) (*ListDomainPackageResponse, error)
	// 创建租户套餐
	CreateDomainPackage(ctx context.Context, in *CreateDomainPackageRequest, opts ...grpc.CallOption) (*CreateDomainPackageResponse, error)
	// 获取租户套餐
	GetDomainPackage(ctx context.Context, in *GetDomainPackageRequest, opts ...grpc.CallOption) (*DomainPackage, error)
	// 修改租户套餐
	UpdateDomainPackage(ctx context.Context, in *UpdateDomainPackageRequest, opts ...grpc.CallOption) (*UpdateDomainPackageResponse, error)
	// 更新指定ID套餐状态
	UpdateDomainPackageState(ctx context.Context, in *UpdateDomainPackageStateRequest, opts ...grpc.CallOption) (*UpdateDomainPackageStateResponse, error)
	// 删除租户套餐
	DeleteDomainPackage(ctx context.Context, in *DeleteDomainPackageRequest, opts ...grpc.CallOption) (*DeleteDomainPackageResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, AdminService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AdminService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AdminService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SmsLogin(ctx context.Context, in *SmsLoginRequest, opts ...grpc.CallOption) (*SmsLoginResponse, error) {
	out := new(SmsLoginResponse)
	err := c.cc.Invoke(ctx, AdminService_SmsLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error) {
	out := new(EmailLoginResponse)
	err := c.cc.Invoke(ctx, AdminService_EmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, AdminService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, AdminService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRole(ctx context.Context, in *ListUserRoleRequest, opts ...grpc.CallOption) (*ListUserRoleResponse, error) {
	out := new(ListUserRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRoleMenuRouterTree(ctx context.Context, in *ListUserRoleMenuRouterTreeRequest, opts ...grpc.CallOption) (*ListUserRoleMenuRouterTreeResponse, error) {
	out := new(ListUserRoleMenuRouterTreeResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUserRoleMenuRouterTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeRequest, opts ...grpc.CallOption) (*ListUserRoleMenuTreeResponse, error) {
	out := new(ListUserRoleMenuTreeResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUserRoleMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionRequest, opts ...grpc.CallOption) (*ListUserRolePermissionResponse, error) {
	out := new(ListUserRolePermissionResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUserRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, AdminService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ExistUserName(ctx context.Context, in *ExistUserNameRequest, opts ...grpc.CallOption) (*ExistUserNameResponse, error) {
	out := new(ExistUserNameResponse)
	err := c.cc.Invoke(ctx, AdminService_ExistUserName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDomain(ctx context.Context, in *ListDomainRequest, opts ...grpc.CallOption) (*ListDomainResponse, error) {
	out := new(ListDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDomainTree(ctx context.Context, in *ListDomainTreeRequest, opts ...grpc.CallOption) (*ListDomainTreeResponse, error) {
	out := new(ListDomainTreeResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDomainTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, AdminService_GetDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomainCode(ctx context.Context, in *GetDomainCodeRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, AdminService_GetDomainCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomainName(ctx context.Context, in *GetDomainNameRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, AdminService_GetDomainName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error) {
	out := new(UpdateDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*DeleteDomainResponse, error) {
	out := new(DeleteDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomainState(ctx context.Context, in *UpdateDomainStateRequest, opts ...grpc.CallOption) (*UpdateDomainStateResponse, error) {
	out := new(UpdateDomainStateResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDomainState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDomainMenu(ctx context.Context, in *ListDomainMenuRequest, opts ...grpc.CallOption) (*ListDomainMenuResponse, error) {
	out := new(ListDomainMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDomainMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleDomainMenu(ctx context.Context, in *HandleDomainMenuRequest, opts ...grpc.CallOption) (*HandleDomainMenuResponse, error) {
	out := new(HandleDomainMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_HandleDomainMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error) {
	out := new(ListRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_ListRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, AdminService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateRoleState(ctx context.Context, in *UpdateRoleStateRequest, opts ...grpc.CallOption) (*UpdateRoleStateResponse, error) {
	out := new(UpdateRoleStateResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateRoleState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...grpc.CallOption) (*ListRoleMenuResponse, error) {
	out := new(ListRoleMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_ListRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleRoleMenu(ctx context.Context, in *HandleRoleMenuRequest, opts ...grpc.CallOption) (*HandleRoleMenuResponse, error) {
	out := new(HandleRoleMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_HandleRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...grpc.CallOption) (*ListRoleDeptResponse, error) {
	out := new(ListRoleDeptResponse)
	err := c.cc.Invoke(ctx, AdminService_ListRoleDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeRequest, opts ...grpc.CallOption) (*GetRoleDataScopeResponse, error) {
	out := new(GetRoleDataScopeResponse)
	err := c.cc.Invoke(ctx, AdminService_GetRoleDataScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeRequest, opts ...grpc.CallOption) (*HandleRoleDataScopeResponse, error) {
	out := new(HandleRoleDataScopeResponse)
	err := c.cc.Invoke(ctx, AdminService_HandleRoleDataScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMenu(ctx context.Context, in *ListMenuRequest, opts ...grpc.CallOption) (*ListMenuResponse, error) {
	out := new(ListMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_ListMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*CreateMenuResponse, error) {
	out := new(CreateMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMenuTree(ctx context.Context, in *ListMenuTreeRequest, opts ...grpc.CallOption) (*ListMenuTreeResponse, error) {
	out := new(ListMenuTreeResponse)
	err := c.cc.Invoke(ctx, AdminService_ListMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, AdminService_GetMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*UpdateMenuResponse, error) {
	out := new(UpdateMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*DeleteMenuResponse, error) {
	out := new(DeleteMenuResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptResponse, error) {
	out := new(ListDeptResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...grpc.CallOption) (*CreateDeptResponse, error) {
	out := new(CreateDeptResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDept(ctx context.Context, in *GetDeptRequest, opts ...grpc.CallOption) (*Dept, error) {
	out := new(Dept)
	err := c.cc.Invoke(ctx, AdminService_GetDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...grpc.CallOption) (*UpdateDeptResponse, error) {
	out := new(UpdateDeptResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDeptState(ctx context.Context, in *UpdateDeptStateRequest, opts ...grpc.CallOption) (*UpdateDeptStateResponse, error) {
	out := new(UpdateDeptStateResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDeptState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...grpc.CallOption) (*DeleteDeptResponse, error) {
	out := new(DeleteDeptResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDeptTree(ctx context.Context, in *ListDeptTreeRequest, opts ...grpc.CallOption) (*ListDeptTreeResponse, error) {
	out := new(ListDeptTreeResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDeptTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListPost(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostResponse, error) {
	out := new(ListPostResponse)
	err := c.cc.Invoke(ctx, AdminService_ListPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, AdminService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, AdminService_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, AdminService_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePostState(ctx context.Context, in *UpdatePostStateRequest, opts ...grpc.CallOption) (*UpdatePostStateResponse, error) {
	out := new(UpdatePostStateResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePostState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDict(ctx context.Context, in *ListDictRequest, opts ...grpc.CallOption) (*ListDictResponse, error) {
	out := new(ListDictResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDict(ctx context.Context, in *CreateDictRequest, opts ...grpc.CallOption) (*CreateDictResponse, error) {
	out := new(CreateDictResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDict(ctx context.Context, in *GetDictRequest, opts ...grpc.CallOption) (*Dict, error) {
	out := new(Dict)
	err := c.cc.Invoke(ctx, AdminService_GetDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...grpc.CallOption) (*UpdateDictResponse, error) {
	out := new(UpdateDictResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...grpc.CallOption) (*DeleteDictResponse, error) {
	out := new(DeleteDictResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDictState(ctx context.Context, in *UpdateDictStateRequest, opts ...grpc.CallOption) (*UpdateDictStateResponse, error) {
	out := new(UpdateDictStateResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDictState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDictData(ctx context.Context, in *ListDictDataRequest, opts ...grpc.CallOption) (*ListDictDataResponse, error) {
	out := new(ListDictDataResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDictData(ctx context.Context, in *CreateDictDataRequest, opts ...grpc.CallOption) (*CreateDictDataResponse, error) {
	out := new(CreateDictDataResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*DictData, error) {
	out := new(DictData)
	err := c.cc.Invoke(ctx, AdminService_GetDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDictData(ctx context.Context, in *UpdateDictDataRequest, opts ...grpc.CallOption) (*UpdateDictDataResponse, error) {
	out := new(UpdateDictDataResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...grpc.CallOption) (*DeleteDictDataResponse, error) {
	out := new(DeleteDictDataResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDictDataState(ctx context.Context, in *UpdateDictDataStateRequest, opts ...grpc.CallOption) (*UpdateDictDataStateResponse, error) {
	out := new(UpdateDictDataStateResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDictDataState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDomainPackage(ctx context.Context, in *ListDomainPackageRequest, opts ...grpc.CallOption) (*ListDomainPackageResponse, error) {
	out := new(ListDomainPackageResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDomainPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDomainPackage(ctx context.Context, in *CreateDomainPackageRequest, opts ...grpc.CallOption) (*CreateDomainPackageResponse, error) {
	out := new(CreateDomainPackageResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateDomainPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomainPackage(ctx context.Context, in *GetDomainPackageRequest, opts ...grpc.CallOption) (*DomainPackage, error) {
	out := new(DomainPackage)
	err := c.cc.Invoke(ctx, AdminService_GetDomainPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomainPackage(ctx context.Context, in *UpdateDomainPackageRequest, opts ...grpc.CallOption) (*UpdateDomainPackageResponse, error) {
	out := new(UpdateDomainPackageResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDomainPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomainPackageState(ctx context.Context, in *UpdateDomainPackageStateRequest, opts ...grpc.CallOption) (*UpdateDomainPackageStateResponse, error) {
	out := new(UpdateDomainPackageStateResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDomainPackageState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDomainPackage(ctx context.Context, in *DeleteDomainPackageRequest, opts ...grpc.CallOption) (*DeleteDomainPackageResponse, error) {
	out := new(DeleteDomainPackageResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteDomainPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	// 登出
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// 密码登陆
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 注册
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 短信登陆
	SmsLogin(context.Context, *SmsLoginRequest) (*SmsLoginResponse, error)
	// 邮件登陆
	EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginResponse, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// 当前登录用户概述
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// 当前登录用户拥有角色
	ListUserRole(context.Context, *ListUserRoleRequest) (*ListUserRoleResponse, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuRouterTree(context.Context, *ListUserRoleMenuRouterTreeRequest) (*ListUserRoleMenuRouterTreeResponse, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeRequest) (*ListUserRoleMenuTreeResponse, error)
	// 获取角色权限列表
	ListUserRolePermission(context.Context, *ListUserRolePermissionRequest) (*ListUserRolePermissionResponse, error)
	// 列表用户
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// 获取用户
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// 修改用户
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// 验证用户名是否存在
	ExistUserName(context.Context, *ExistUserNameRequest) (*ExistUserNameResponse, error)
	// 列表租户
	ListDomain(context.Context, *ListDomainRequest) (*ListDomainResponse, error)
	// 获取租户树形列表
	ListDomainTree(context.Context, *ListDomainTreeRequest) (*ListDomainTreeResponse, error)
	// 创建租户
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	// 获取租户
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// 获取租户
	GetDomainCode(context.Context, *GetDomainCodeRequest) (*Domain, error)
	// 获取租户
	GetDomainName(context.Context, *GetDomainNameRequest) (*Domain, error)
	// 修改租户
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	// 删除租户
	DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error)
	// 设置租户状态
	UpdateDomainState(context.Context, *UpdateDomainStateRequest) (*UpdateDomainStateResponse, error)
	// 获取角色菜单
	ListDomainMenu(context.Context, *ListDomainMenuRequest) (*ListDomainMenuResponse, error)
	// 处理角色菜单
	HandleDomainMenu(context.Context, *HandleDomainMenuRequest) (*HandleDomainMenuResponse, error)
	// 角色模块
	// 列表角色
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	// 创建角色
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// 获取指定ID角色
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	// 修改指定ID角色
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// 更新指定ID角色状态
	UpdateRoleState(context.Context, *UpdateRoleStateRequest) (*UpdateRoleStateResponse, error)
	// 删除指定ID角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// 获取指定ID角色菜单
	ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ListRoleMenuResponse, error)
	// 处理指定ID角色菜单
	HandleRoleMenu(context.Context, *HandleRoleMenuRequest) (*HandleRoleMenuResponse, error)
	// 获取指定ID角色部门
	ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptResponse, error)
	// 获取指定ID角色数据范围
	GetRoleDataScope(context.Context, *GetRoleDataScopeRequest) (*GetRoleDataScopeResponse, error)
	// 处理指定ID角色数据范围
	HandleRoleDataScope(context.Context, *HandleRoleDataScopeRequest) (*HandleRoleDataScopeResponse, error)
	// 菜单模块
	// 列表菜单
	ListMenu(context.Context, *ListMenuRequest) (*ListMenuResponse, error)
	// 创建菜单
	CreateMenu(context.Context, *CreateMenuRequest) (*CreateMenuResponse, error)
	// 获取树形菜单
	ListMenuTree(context.Context, *ListMenuTreeRequest) (*ListMenuTreeResponse, error)
	// 获取菜单
	GetMenu(context.Context, *GetMenuRequest) (*Menu, error)
	// 修改菜单
	UpdateMenu(context.Context, *UpdateMenuRequest) (*UpdateMenuResponse, error)
	// 删除菜单
	DeleteMenu(context.Context, *DeleteMenuRequest) (*DeleteMenuResponse, error)
	// 列表部门
	ListDept(context.Context, *ListDeptRequest) (*ListDeptResponse, error)
	// 创建部门
	CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptResponse, error)
	// 获取部门
	GetDept(context.Context, *GetDeptRequest) (*Dept, error)
	// 修改部门
	UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptResponse, error)
	// 更新指定ID角色状态
	UpdateDeptState(context.Context, *UpdateDeptStateRequest) (*UpdateDeptStateResponse, error)
	// 删除部门
	DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptResponse, error)
	// 获取全部部门树形
	ListDeptTree(context.Context, *ListDeptTreeRequest) (*ListDeptTreeResponse, error)
	// 列表岗位
	ListPost(context.Context, *ListPostRequest) (*ListPostResponse, error)
	// 创建岗位
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	// 获取岗位
	GetPost(context.Context, *GetPostRequest) (*Post, error)
	// 修改岗位
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	// 删除岗位
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	// 设置岗位状态
	UpdatePostState(context.Context, *UpdatePostStateRequest) (*UpdatePostStateResponse, error)
	// 列表字典
	ListDict(context.Context, *ListDictRequest) (*ListDictResponse, error)
	// 创建字典
	CreateDict(context.Context, *CreateDictRequest) (*CreateDictResponse, error)
	// 获取字典
	GetDict(context.Context, *GetDictRequest) (*Dict, error)
	// 修改字典
	UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictResponse, error)
	// 删除字典
	DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictResponse, error)
	// 设置字典状态
	UpdateDictState(context.Context, *UpdateDictStateRequest) (*UpdateDictStateResponse, error)
	// 列表字典数据
	ListDictData(context.Context, *ListDictDataRequest) (*ListDictDataResponse, error)
	// 创建字典数据
	CreateDictData(context.Context, *CreateDictDataRequest) (*CreateDictDataResponse, error)
	// 获取字典数据
	GetDictData(context.Context, *GetDictDataRequest) (*DictData, error)
	// 修改字典数据
	UpdateDictData(context.Context, *UpdateDictDataRequest) (*UpdateDictDataResponse, error)
	// 删除字典数据
	DeleteDictData(context.Context, *DeleteDictDataRequest) (*DeleteDictDataResponse, error)
	// 设置字典数据状态
	UpdateDictDataState(context.Context, *UpdateDictDataStateRequest) (*UpdateDictDataStateResponse, error)
	// 列表租户套餐
	ListDomainPackage(context.Context, *ListDomainPackageRequest) (*ListDomainPackageResponse, error)
	// 创建租户套餐
	CreateDomainPackage(context.Context, *CreateDomainPackageRequest) (*CreateDomainPackageResponse, error)
	// 获取租户套餐
	GetDomainPackage(context.Context, *GetDomainPackageRequest) (*DomainPackage, error)
	// 修改租户套餐
	UpdateDomainPackage(context.Context, *UpdateDomainPackageRequest) (*UpdateDomainPackageResponse, error)
	// 更新指定ID套餐状态
	UpdateDomainPackageState(context.Context, *UpdateDomainPackageStateRequest) (*UpdateDomainPackageStateResponse, error)
	// 删除租户套餐
	DeleteDomainPackage(context.Context, *DeleteDomainPackageRequest) (*DeleteDomainPackageResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAdminServiceServer) SmsLogin(context.Context, *SmsLoginRequest) (*SmsLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsLogin not implemented")
}
func (UnimplementedAdminServiceServer) EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAdminServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAdminServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRole(context.Context, *ListUserRoleRequest) (*ListUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRole not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRoleMenuRouterTree(context.Context, *ListUserRoleMenuRouterTreeRequest) (*ListUserRoleMenuRouterTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoleMenuRouterTree not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeRequest) (*ListUserRoleMenuTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoleMenuTree not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRolePermission(context.Context, *ListUserRolePermissionRequest) (*ListUserRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRolePermission not implemented")
}
func (UnimplementedAdminServiceServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedAdminServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServiceServer) ExistUserName(context.Context, *ExistUserNameRequest) (*ExistUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserName not implemented")
}
func (UnimplementedAdminServiceServer) ListDomain(context.Context, *ListDomainRequest) (*ListDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomain not implemented")
}
func (UnimplementedAdminServiceServer) ListDomainTree(context.Context, *ListDomainTreeRequest) (*ListDomainTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainTree not implemented")
}
func (UnimplementedAdminServiceServer) CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedAdminServiceServer) GetDomain(context.Context, *GetDomainRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedAdminServiceServer) GetDomainCode(context.Context, *GetDomainCodeRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainCode not implemented")
}
func (UnimplementedAdminServiceServer) GetDomainName(context.Context, *GetDomainNameRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainName not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomainState(context.Context, *UpdateDomainStateRequest) (*UpdateDomainStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainState not implemented")
}
func (UnimplementedAdminServiceServer) ListDomainMenu(context.Context, *ListDomainMenuRequest) (*ListDomainMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainMenu not implemented")
}
func (UnimplementedAdminServiceServer) HandleDomainMenu(context.Context, *HandleDomainMenuRequest) (*HandleDomainMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDomainMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedAdminServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAdminServiceServer) GetRole(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAdminServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAdminServiceServer) UpdateRoleState(context.Context, *UpdateRoleStateRequest) (*UpdateRoleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleState not implemented")
}
func (UnimplementedAdminServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminServiceServer) ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ListRoleMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleMenu not implemented")
}
func (UnimplementedAdminServiceServer) HandleRoleMenu(context.Context, *HandleRoleMenuRequest) (*HandleRoleMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleDept not implemented")
}
func (UnimplementedAdminServiceServer) GetRoleDataScope(context.Context, *GetRoleDataScopeRequest) (*GetRoleDataScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleDataScope not implemented")
}
func (UnimplementedAdminServiceServer) HandleRoleDataScope(context.Context, *HandleRoleDataScopeRequest) (*HandleRoleDataScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleDataScope not implemented")
}
func (UnimplementedAdminServiceServer) ListMenu(context.Context, *ListMenuRequest) (*ListMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedAdminServiceServer) CreateMenu(context.Context, *CreateMenuRequest) (*CreateMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListMenuTree(context.Context, *ListMenuTreeRequest) (*ListMenuTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuTree not implemented")
}
func (UnimplementedAdminServiceServer) GetMenu(context.Context, *GetMenuRequest) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedAdminServiceServer) UpdateMenu(context.Context, *UpdateMenuRequest) (*UpdateMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAdminServiceServer) DeleteMenu(context.Context, *DeleteMenuRequest) (*DeleteMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListDept(context.Context, *ListDeptRequest) (*ListDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDept not implemented")
}
func (UnimplementedAdminServiceServer) CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDept not implemented")
}
func (UnimplementedAdminServiceServer) GetDept(context.Context, *GetDeptRequest) (*Dept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDept not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDept not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDeptState(context.Context, *UpdateDeptStateRequest) (*UpdateDeptStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeptState not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDept not implemented")
}
func (UnimplementedAdminServiceServer) ListDeptTree(context.Context, *ListDeptTreeRequest) (*ListDeptTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeptTree not implemented")
}
func (UnimplementedAdminServiceServer) ListPost(context.Context, *ListPostRequest) (*ListPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPost not implemented")
}
func (UnimplementedAdminServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedAdminServiceServer) GetPost(context.Context, *GetPostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedAdminServiceServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePostState(context.Context, *UpdatePostStateRequest) (*UpdatePostStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostState not implemented")
}
func (UnimplementedAdminServiceServer) ListDict(context.Context, *ListDictRequest) (*ListDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDict not implemented")
}
func (UnimplementedAdminServiceServer) CreateDict(context.Context, *CreateDictRequest) (*CreateDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDict not implemented")
}
func (UnimplementedAdminServiceServer) GetDict(context.Context, *GetDictRequest) (*Dict, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDict not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDict not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDict not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDictState(context.Context, *UpdateDictStateRequest) (*UpdateDictStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictState not implemented")
}
func (UnimplementedAdminServiceServer) ListDictData(context.Context, *ListDictDataRequest) (*ListDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictData not implemented")
}
func (UnimplementedAdminServiceServer) CreateDictData(context.Context, *CreateDictDataRequest) (*CreateDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictData not implemented")
}
func (UnimplementedAdminServiceServer) GetDictData(context.Context, *GetDictDataRequest) (*DictData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictData not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDictData(context.Context, *UpdateDictDataRequest) (*UpdateDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictData not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDictData(context.Context, *DeleteDictDataRequest) (*DeleteDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictData not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDictDataState(context.Context, *UpdateDictDataStateRequest) (*UpdateDictDataStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictDataState not implemented")
}
func (UnimplementedAdminServiceServer) ListDomainPackage(context.Context, *ListDomainPackageRequest) (*ListDomainPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainPackage not implemented")
}
func (UnimplementedAdminServiceServer) CreateDomainPackage(context.Context, *CreateDomainPackageRequest) (*CreateDomainPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomainPackage not implemented")
}
func (UnimplementedAdminServiceServer) GetDomainPackage(context.Context, *GetDomainPackageRequest) (*DomainPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainPackage not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomainPackage(context.Context, *UpdateDomainPackageRequest) (*UpdateDomainPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainPackage not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomainPackageState(context.Context, *UpdateDomainPackageStateRequest) (*UpdateDomainPackageStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainPackageState not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDomainPackage(context.Context, *DeleteDomainPackageRequest) (*DeleteDomainPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomainPackage not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SmsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SmsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SmsLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SmsLogin(ctx, req.(*SmsLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_EmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EmailLogin(ctx, req.(*EmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRole(ctx, req.(*ListUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRoleMenuRouterTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleMenuRouterTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRoleMenuRouterTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRoleMenuRouterTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRoleMenuRouterTree(ctx, req.(*ListUserRoleMenuRouterTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRoleMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleMenuTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRoleMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRoleMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRoleMenuTree(ctx, req.(*ListUserRoleMenuTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRolePermission(ctx, req.(*ListUserRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ExistUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ExistUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ExistUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ExistUserName(ctx, req.(*ExistUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDomain(ctx, req.(*ListDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDomainTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDomainTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDomainTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDomainTree(ctx, req.(*ListDomainTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomainCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomainCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomainCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomainCode(ctx, req.(*GetDomainCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomainName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomainName(ctx, req.(*GetDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomain(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDomainState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomainState(ctx, req.(*UpdateDomainStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDomainMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDomainMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDomainMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDomainMenu(ctx, req.(*ListDomainMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleDomainMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleDomainMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleDomainMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleDomainMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleDomainMenu(ctx, req.(*HandleDomainMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateRoleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateRoleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateRoleState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateRoleState(ctx, req.(*UpdateRoleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListRoleMenu(ctx, req.(*ListRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleRoleMenu(ctx, req.(*HandleRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListRoleDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListRoleDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListRoleDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListRoleDept(ctx, req.(*ListRoleDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRoleDataScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleDataScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRoleDataScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRoleDataScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRoleDataScope(ctx, req.(*GetRoleDataScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleRoleDataScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleDataScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleRoleDataScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleRoleDataScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleRoleDataScope(ctx, req.(*HandleRoleDataScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMenu(ctx, req.(*ListMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateMenu(ctx, req.(*CreateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMenuTree(ctx, req.(*ListMenuTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetMenu(ctx, req.(*GetMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateMenu(ctx, req.(*UpdateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteMenu(ctx, req.(*DeleteMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDept(ctx, req.(*ListDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDept(ctx, req.(*CreateDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDept(ctx, req.(*GetDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDept(ctx, req.(*UpdateDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDeptState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDeptState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDeptState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDeptState(ctx, req.(*UpdateDeptStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDept(ctx, req.(*DeleteDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDeptTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDeptTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDeptTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDeptTree(ctx, req.(*ListDeptTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListPost(ctx, req.(*ListPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePostState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePostState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePostState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePostState(ctx, req.(*UpdatePostStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDict(ctx, req.(*ListDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDict(ctx, req.(*CreateDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDict(ctx, req.(*GetDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDict(ctx, req.(*UpdateDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDict(ctx, req.(*DeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDictState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDictState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDictState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDictState(ctx, req.(*UpdateDictStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDictData(ctx, req.(*ListDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDictData(ctx, req.(*CreateDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDictData(ctx, req.(*GetDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDictData(ctx, req.(*UpdateDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDictData(ctx, req.(*DeleteDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDictDataState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDataStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDictDataState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDictDataState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDictDataState(ctx, req.(*UpdateDictDataStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDomainPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDomainPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDomainPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDomainPackage(ctx, req.(*ListDomainPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDomainPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDomainPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDomainPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDomainPackage(ctx, req.(*CreateDomainPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomainPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomainPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomainPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomainPackage(ctx, req.(*GetDomainPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomainPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomainPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDomainPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomainPackage(ctx, req.(*UpdateDomainPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomainPackageState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainPackageStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomainPackageState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDomainPackageState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomainPackageState(ctx, req.(*UpdateDomainPackageStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDomainPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDomainPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDomainPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDomainPackage(ctx, req.(*DeleteDomainPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _AdminService_Logout_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AdminService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AdminService_Register_Handler,
		},
		{
			MethodName: "SmsLogin",
			Handler:    _AdminService_SmsLogin_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _AdminService_EmailLogin_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _AdminService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _AdminService_GetUserProfile_Handler,
		},
		{
			MethodName: "ListUserRole",
			Handler:    _AdminService_ListUserRole_Handler,
		},
		{
			MethodName: "ListUserRoleMenuRouterTree",
			Handler:    _AdminService_ListUserRoleMenuRouterTree_Handler,
		},
		{
			MethodName: "ListUserRoleMenuTree",
			Handler:    _AdminService_ListUserRoleMenuTree_Handler,
		},
		{
			MethodName: "ListUserRolePermission",
			Handler:    _AdminService_ListUserRolePermission_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _AdminService_ListUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AdminService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AdminService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AdminService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminService_DeleteUser_Handler,
		},
		{
			MethodName: "ExistUserName",
			Handler:    _AdminService_ExistUserName_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _AdminService_ListDomain_Handler,
		},
		{
			MethodName: "ListDomainTree",
			Handler:    _AdminService_ListDomainTree_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _AdminService_CreateDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _AdminService_GetDomain_Handler,
		},
		{
			MethodName: "GetDomainCode",
			Handler:    _AdminService_GetDomainCode_Handler,
		},
		{
			MethodName: "GetDomainName",
			Handler:    _AdminService_GetDomainName_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _AdminService_UpdateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _AdminService_DeleteDomain_Handler,
		},
		{
			MethodName: "UpdateDomainState",
			Handler:    _AdminService_UpdateDomainState_Handler,
		},
		{
			MethodName: "ListDomainMenu",
			Handler:    _AdminService_ListDomainMenu_Handler,
		},
		{
			MethodName: "HandleDomainMenu",
			Handler:    _AdminService_HandleDomainMenu_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _AdminService_ListRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AdminService_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AdminService_GetRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AdminService_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateRoleState",
			Handler:    _AdminService_UpdateRoleState_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AdminService_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoleMenu",
			Handler:    _AdminService_ListRoleMenu_Handler,
		},
		{
			MethodName: "HandleRoleMenu",
			Handler:    _AdminService_HandleRoleMenu_Handler,
		},
		{
			MethodName: "ListRoleDept",
			Handler:    _AdminService_ListRoleDept_Handler,
		},
		{
			MethodName: "GetRoleDataScope",
			Handler:    _AdminService_GetRoleDataScope_Handler,
		},
		{
			MethodName: "HandleRoleDataScope",
			Handler:    _AdminService_HandleRoleDataScope_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _AdminService_ListMenu_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _AdminService_CreateMenu_Handler,
		},
		{
			MethodName: "ListMenuTree",
			Handler:    _AdminService_ListMenuTree_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _AdminService_GetMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _AdminService_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _AdminService_DeleteMenu_Handler,
		},
		{
			MethodName: "ListDept",
			Handler:    _AdminService_ListDept_Handler,
		},
		{
			MethodName: "CreateDept",
			Handler:    _AdminService_CreateDept_Handler,
		},
		{
			MethodName: "GetDept",
			Handler:    _AdminService_GetDept_Handler,
		},
		{
			MethodName: "UpdateDept",
			Handler:    _AdminService_UpdateDept_Handler,
		},
		{
			MethodName: "UpdateDeptState",
			Handler:    _AdminService_UpdateDeptState_Handler,
		},
		{
			MethodName: "DeleteDept",
			Handler:    _AdminService_DeleteDept_Handler,
		},
		{
			MethodName: "ListDeptTree",
			Handler:    _AdminService_ListDeptTree_Handler,
		},
		{
			MethodName: "ListPost",
			Handler:    _AdminService_ListPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _AdminService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _AdminService_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _AdminService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _AdminService_DeletePost_Handler,
		},
		{
			MethodName: "UpdatePostState",
			Handler:    _AdminService_UpdatePostState_Handler,
		},
		{
			MethodName: "ListDict",
			Handler:    _AdminService_ListDict_Handler,
		},
		{
			MethodName: "CreateDict",
			Handler:    _AdminService_CreateDict_Handler,
		},
		{
			MethodName: "GetDict",
			Handler:    _AdminService_GetDict_Handler,
		},
		{
			MethodName: "UpdateDict",
			Handler:    _AdminService_UpdateDict_Handler,
		},
		{
			MethodName: "DeleteDict",
			Handler:    _AdminService_DeleteDict_Handler,
		},
		{
			MethodName: "UpdateDictState",
			Handler:    _AdminService_UpdateDictState_Handler,
		},
		{
			MethodName: "ListDictData",
			Handler:    _AdminService_ListDictData_Handler,
		},
		{
			MethodName: "CreateDictData",
			Handler:    _AdminService_CreateDictData_Handler,
		},
		{
			MethodName: "GetDictData",
			Handler:    _AdminService_GetDictData_Handler,
		},
		{
			MethodName: "UpdateDictData",
			Handler:    _AdminService_UpdateDictData_Handler,
		},
		{
			MethodName: "DeleteDictData",
			Handler:    _AdminService_DeleteDictData_Handler,
		},
		{
			MethodName: "UpdateDictDataState",
			Handler:    _AdminService_UpdateDictDataState_Handler,
		},
		{
			MethodName: "ListDomainPackage",
			Handler:    _AdminService_ListDomainPackage_Handler,
		},
		{
			MethodName: "CreateDomainPackage",
			Handler:    _AdminService_CreateDomainPackage_Handler,
		},
		{
			MethodName: "GetDomainPackage",
			Handler:    _AdminService_GetDomainPackage_Handler,
		},
		{
			MethodName: "UpdateDomainPackage",
			Handler:    _AdminService_UpdateDomainPackage_Handler,
		},
		{
			MethodName: "UpdateDomainPackageState",
			Handler:    _AdminService_UpdateDomainPackageState_Handler,
		},
		{
			MethodName: "DeleteDomainPackage",
			Handler:    _AdminService_DeleteDomainPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/admin.proto",
}
