// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_Logout_FullMethodName                     = "/admin.v1.AdminService/Logout"
	AdminService_Login_FullMethodName                      = "/admin.v1.AdminService/Login"
	AdminService_Register_FullMethodName                   = "/admin.v1.AdminService/Register"
	AdminService_SmsLogin_FullMethodName                   = "/admin.v1.AdminService/SmsLogin"
	AdminService_EmailLogin_FullMethodName                 = "/admin.v1.AdminService/EmailLogin"
	AdminService_GetUserInfo_FullMethodName                = "/admin.v1.AdminService/GetUserInfo"
	AdminService_GetUserProfile_FullMethodName             = "/admin.v1.AdminService/GetUserProfile"
	AdminService_ListUserRole_FullMethodName               = "/admin.v1.AdminService/ListUserRole"
	AdminService_ListUserRoleMenuRouterTree_FullMethodName = "/admin.v1.AdminService/ListUserRoleMenuRouterTree"
	AdminService_ListUserRoleMenuTree_FullMethodName       = "/admin.v1.AdminService/ListUserRoleMenuTree"
	AdminService_ListUserRolePermission_FullMethodName     = "/admin.v1.AdminService/ListUserRolePermission"
	AdminService_ListUser_FullMethodName                   = "/admin.v1.AdminService/ListUser"
	AdminService_CreateUser_FullMethodName                 = "/admin.v1.AdminService/CreateUser"
	AdminService_GetUser_FullMethodName                    = "/admin.v1.AdminService/GetUser"
	AdminService_UpdateUser_FullMethodName                 = "/admin.v1.AdminService/UpdateUser"
	AdminService_DeleteUser_FullMethodName                 = "/admin.v1.AdminService/DeleteUser"
	AdminService_ExistUserName_FullMethodName              = "/admin.v1.AdminService/ExistUserName"
	AdminService_ListDomain_FullMethodName                 = "/admin.v1.AdminService/ListDomain"
	AdminService_ListDomainTree_FullMethodName             = "/admin.v1.AdminService/ListDomainTree"
	AdminService_CreateDomain_FullMethodName               = "/admin.v1.AdminService/CreateDomain"
	AdminService_GetDomain_FullMethodName                  = "/admin.v1.AdminService/GetDomain"
	AdminService_GetDomainCode_FullMethodName              = "/admin.v1.AdminService/GetDomainCode"
	AdminService_GetDomainName_FullMethodName              = "/admin.v1.AdminService/GetDomainName"
	AdminService_UpdateDomain_FullMethodName               = "/admin.v1.AdminService/UpdateDomain"
	AdminService_DeleteDomain_FullMethodName               = "/admin.v1.AdminService/DeleteDomain"
	AdminService_UpdateDomainState_FullMethodName          = "/admin.v1.AdminService/UpdateDomainState"
	AdminService_ListDomainMenu_FullMethodName             = "/admin.v1.AdminService/ListDomainMenu"
	AdminService_HandleDomainMenu_FullMethodName           = "/admin.v1.AdminService/HandleDomainMenu"
	AdminService_ListRole_FullMethodName                   = "/admin.v1.AdminService/ListRole"
	AdminService_CreateRole_FullMethodName                 = "/admin.v1.AdminService/CreateRole"
	AdminService_GetRole_FullMethodName                    = "/admin.v1.AdminService/GetRole"
	AdminService_UpdateRole_FullMethodName                 = "/admin.v1.AdminService/UpdateRole"
	AdminService_UpdateRoleState_FullMethodName            = "/admin.v1.AdminService/UpdateRoleState"
	AdminService_DeleteRole_FullMethodName                 = "/admin.v1.AdminService/DeleteRole"
	AdminService_ListRoleMenu_FullMethodName               = "/admin.v1.AdminService/ListRoleMenu"
	AdminService_HandleRoleMenu_FullMethodName             = "/admin.v1.AdminService/HandleRoleMenu"
	AdminService_ListRoleDept_FullMethodName               = "/admin.v1.AdminService/ListRoleDept"
	AdminService_GetRoleDataScope_FullMethodName           = "/admin.v1.AdminService/GetRoleDataScope"
	AdminService_HandleRoleDataScope_FullMethodName        = "/admin.v1.AdminService/HandleRoleDataScope"
	AdminService_ListMenu_FullMethodName                   = "/admin.v1.AdminService/ListMenu"
	AdminService_CreateMenu_FullMethodName                 = "/admin.v1.AdminService/CreateMenu"
	AdminService_ListMenuTree_FullMethodName               = "/admin.v1.AdminService/ListMenuTree"
	AdminService_GetMenu_FullMethodName                    = "/admin.v1.AdminService/GetMenu"
	AdminService_UpdateMenu_FullMethodName                 = "/admin.v1.AdminService/UpdateMenu"
	AdminService_DeleteMenu_FullMethodName                 = "/admin.v1.AdminService/DeleteMenu"
	AdminService_ListDept_FullMethodName                   = "/admin.v1.AdminService/ListDept"
	AdminService_CreateDept_FullMethodName                 = "/admin.v1.AdminService/CreateDept"
	AdminService_GetDept_FullMethodName                    = "/admin.v1.AdminService/GetDept"
	AdminService_UpdateDept_FullMethodName                 = "/admin.v1.AdminService/UpdateDept"
	AdminService_UpdateDeptState_FullMethodName            = "/admin.v1.AdminService/UpdateDeptState"
	AdminService_DeleteDept_FullMethodName                 = "/admin.v1.AdminService/DeleteDept"
	AdminService_ListDeptTree_FullMethodName               = "/admin.v1.AdminService/ListDeptTree"
	AdminService_ListPost_FullMethodName                   = "/admin.v1.AdminService/ListPost"
	AdminService_CreatePost_FullMethodName                 = "/admin.v1.AdminService/CreatePost"
	AdminService_GetPost_FullMethodName                    = "/admin.v1.AdminService/GetPost"
	AdminService_UpdatePost_FullMethodName                 = "/admin.v1.AdminService/UpdatePost"
	AdminService_DeletePost_FullMethodName                 = "/admin.v1.AdminService/DeletePost"
	AdminService_UpdatePostState_FullMethodName            = "/admin.v1.AdminService/UpdatePostState"
	AdminService_ListDict_FullMethodName                   = "/admin.v1.AdminService/ListDict"
	AdminService_CreateDict_FullMethodName                 = "/admin.v1.AdminService/CreateDict"
	AdminService_GetDict_FullMethodName                    = "/admin.v1.AdminService/GetDict"
	AdminService_UpdateDict_FullMethodName                 = "/admin.v1.AdminService/UpdateDict"
	AdminService_DeleteDict_FullMethodName                 = "/admin.v1.AdminService/DeleteDict"
	AdminService_UpdateDictState_FullMethodName            = "/admin.v1.AdminService/UpdateDictState"
	AdminService_ListDictData_FullMethodName               = "/admin.v1.AdminService/ListDictData"
	AdminService_CreateDictData_FullMethodName             = "/admin.v1.AdminService/CreateDictData"
	AdminService_GetDictData_FullMethodName                = "/admin.v1.AdminService/GetDictData"
	AdminService_UpdateDictData_FullMethodName             = "/admin.v1.AdminService/UpdateDictData"
	AdminService_DeleteDictData_FullMethodName             = "/admin.v1.AdminService/DeleteDictData"
	AdminService_UpdateDictDataState_FullMethodName        = "/admin.v1.AdminService/UpdateDictDataState"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// 登出
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutReply, error)
	// 密码登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// 短信登陆
	SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 邮件登陆
	EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserInfoReply, error)
	// 当前登录用户概述
	GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileReply, error)
	// 当前登录用户拥有角色
	ListUserRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserRoleReply, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuRouterTree(ctx context.Context, in *ListUserRoleMenuRouterTreeReq, opts ...grpc.CallOption) (*ListUserRoleMenuRouterTreeReply, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeReq, opts ...grpc.CallOption) (*ListUserRoleMenuTreeReply, error)
	// 获取角色权限列表
	ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionReq, opts ...grpc.CallOption) (*ListUserRolePermissionReply, error)
	// 列表用户
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error)
	// 获取用户
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error)
	// 修改用户
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error)
	// 验证用户名是否存在
	ExistUserName(ctx context.Context, in *ExistUserNameReq, opts ...grpc.CallOption) (*ExistUserNameReply, error)
	// 列表领域
	ListDomain(ctx context.Context, in *ListDomainReq, opts ...grpc.CallOption) (*ListDomainReply, error)
	// 获取领域树形列表
	ListDomainTree(ctx context.Context, in *ListDomainTreeReq, opts ...grpc.CallOption) (*ListDomainTreeReply, error)
	// 创建领域
	CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...grpc.CallOption) (*CreateDomainReply, error)
	// 获取领域
	GetDomain(ctx context.Context, in *GetDomainReq, opts ...grpc.CallOption) (*Domain, error)
	// 获取领域
	GetDomainCode(ctx context.Context, in *GetDomainCodeReq, opts ...grpc.CallOption) (*Domain, error)
	// 获取领域
	GetDomainName(ctx context.Context, in *GetDomainNameReq, opts ...grpc.CallOption) (*Domain, error)
	// 修改领域
	UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error)
	// 删除领域
	DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...grpc.CallOption) (*DeleteDomainReply, error)
	// 设置领域状态
	UpdateDomainState(ctx context.Context, in *UpdateDomainStateReq, opts ...grpc.CallOption) (*UpdateDomainStateReply, error)
	// 获取角色菜单
	ListDomainMenu(ctx context.Context, in *ListDomainMenuReq, opts ...grpc.CallOption) (*ListDomainMenuReply, error)
	// 处理角色菜单
	HandleDomainMenu(ctx context.Context, in *HandleDomainMenuReq, opts ...grpc.CallOption) (*HandleDomainMenuReply, error)
	// 角色模块
	// 列表角色
	ListRole(ctx context.Context, in *ListRoleReq, opts ...grpc.CallOption) (*ListRoleReply, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleReply, error)
	// 获取指定ID角色
	GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*Role, error)
	// 修改指定ID角色
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleReply, error)
	// 更新指定ID角色状态
	UpdateRoleState(ctx context.Context, in *UpdateRoleStateReq, opts ...grpc.CallOption) (*UpdateRoleStateReply, error)
	// 删除指定ID角色
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleReply, error)
	// 获取指定ID角色菜单
	ListRoleMenu(ctx context.Context, in *ListRoleMenuReq, opts ...grpc.CallOption) (*ListRoleMenuReply, error)
	// 处理指定ID角色菜单
	HandleRoleMenu(ctx context.Context, in *HandleRoleMenuReq, opts ...grpc.CallOption) (*HandleRoleMenuReply, error)
	// 获取指定ID角色部门
	ListRoleDept(ctx context.Context, in *ListRoleDeptReq, opts ...grpc.CallOption) (*ListRoleDeptReply, error)
	// 获取指定ID角色数据范围
	GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeReq, opts ...grpc.CallOption) (*GetRoleDataScopeReply, error)
	// 处理指定ID角色数据范围
	HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeReq, opts ...grpc.CallOption) (*HandleRoleDataScopeReply, error)
	// 菜单模块
	// 列表菜单
	ListMenu(ctx context.Context, in *ListMenuReq, opts ...grpc.CallOption) (*ListMenuReply, error)
	// 创建菜单
	CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuReply, error)
	// 获取树形菜单
	ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...grpc.CallOption) (*ListMenuTreeReply, error)
	// 获取菜单
	GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*Menu, error)
	// 修改菜单
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuReply, error)
	// 列表部门
	ListDept(ctx context.Context, in *ListDeptReq, opts ...grpc.CallOption) (*ListDeptReply, error)
	// 创建部门
	CreateDept(ctx context.Context, in *CreateDeptReq, opts ...grpc.CallOption) (*CreateDeptReply, error)
	// 获取部门
	GetDept(ctx context.Context, in *GetDeptReq, opts ...grpc.CallOption) (*Dept, error)
	// 修改部门
	UpdateDept(ctx context.Context, in *UpdateDeptReq, opts ...grpc.CallOption) (*UpdateDeptReply, error)
	// 更新指定ID角色状态
	UpdateDeptState(ctx context.Context, in *UpdateDeptStateReq, opts ...grpc.CallOption) (*UpdateDeptStateReply, error)
	// 删除部门
	DeleteDept(ctx context.Context, in *DeleteDeptReq, opts ...grpc.CallOption) (*DeleteDeptReply, error)
	// 获取全部部门树形
	ListDeptTree(ctx context.Context, in *ListDeptTreeReq, opts ...grpc.CallOption) (*ListDeptTreeReply, error)
	// 列表岗位
	ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostReply, error)
	// 创建岗位
	CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostReply, error)
	// 获取岗位
	GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*Post, error)
	// 修改岗位
	UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostReply, error)
	// 删除岗位
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostReply, error)
	// 设置岗位状态
	UpdatePostState(ctx context.Context, in *UpdatePostStateReq, opts ...grpc.CallOption) (*UpdatePostStateReply, error)
	// 列表字典
	ListDict(ctx context.Context, in *ListDictReq, opts ...grpc.CallOption) (*ListDictReply, error)
	// 创建字典
	CreateDict(ctx context.Context, in *CreateDictReq, opts ...grpc.CallOption) (*CreateDictReply, error)
	// 获取字典
	GetDict(ctx context.Context, in *GetDictReq, opts ...grpc.CallOption) (*Dict, error)
	// 修改字典
	UpdateDict(ctx context.Context, in *UpdateDictReq, opts ...grpc.CallOption) (*UpdateDictReply, error)
	// 删除字典
	DeleteDict(ctx context.Context, in *DeleteDictReq, opts ...grpc.CallOption) (*DeleteDictReply, error)
	// 设置字典状态
	UpdateDictState(ctx context.Context, in *UpdateDictStateReq, opts ...grpc.CallOption) (*UpdateDictStateReply, error)
	// 列表字典数据
	ListDictData(ctx context.Context, in *ListDictDataReq, opts ...grpc.CallOption) (*ListDictDataReply, error)
	// 创建字典数据
	CreateDictData(ctx context.Context, in *CreateDictDataReq, opts ...grpc.CallOption) (*CreateDictDataReply, error)
	// 获取字典数据
	GetDictData(ctx context.Context, in *GetDictDataReq, opts ...grpc.CallOption) (*DictData, error)
	// 修改字典数据
	UpdateDictData(ctx context.Context, in *UpdateDictDataReq, opts ...grpc.CallOption) (*UpdateDictDataReply, error)
	// 删除字典数据
	DeleteDictData(ctx context.Context, in *DeleteDictDataReq, opts ...grpc.CallOption) (*DeleteDictDataReply, error)
	// 设置字典数据状态
	UpdateDictDataState(ctx context.Context, in *UpdateDictDataStateReq, opts ...grpc.CallOption) (*UpdateDictDataStateReply, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, AdminService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, AdminService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, AdminService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, AdminService_SmsLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, AdminService_EmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserInfoReply, error) {
	out := new(GetUserInfoReply)
	err := c.cc.Invoke(ctx, AdminService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileReply, error) {
	out := new(GetUserProfileReply)
	err := c.cc.Invoke(ctx, AdminService_GetUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserRoleReply, error) {
	out := new(ListUserRoleReply)
	err := c.cc.Invoke(ctx, AdminService_ListUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRoleMenuRouterTree(ctx context.Context, in *ListUserRoleMenuRouterTreeReq, opts ...grpc.CallOption) (*ListUserRoleMenuRouterTreeReply, error) {
	out := new(ListUserRoleMenuRouterTreeReply)
	err := c.cc.Invoke(ctx, AdminService_ListUserRoleMenuRouterTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeReq, opts ...grpc.CallOption) (*ListUserRoleMenuTreeReply, error) {
	out := new(ListUserRoleMenuTreeReply)
	err := c.cc.Invoke(ctx, AdminService_ListUserRoleMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionReq, opts ...grpc.CallOption) (*ListUserRolePermissionReply, error) {
	out := new(ListUserRolePermissionReply)
	err := c.cc.Invoke(ctx, AdminService_ListUserRolePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, AdminService_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, AdminService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, AdminService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, AdminService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ExistUserName(ctx context.Context, in *ExistUserNameReq, opts ...grpc.CallOption) (*ExistUserNameReply, error) {
	out := new(ExistUserNameReply)
	err := c.cc.Invoke(ctx, AdminService_ExistUserName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDomain(ctx context.Context, in *ListDomainReq, opts ...grpc.CallOption) (*ListDomainReply, error) {
	out := new(ListDomainReply)
	err := c.cc.Invoke(ctx, AdminService_ListDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDomainTree(ctx context.Context, in *ListDomainTreeReq, opts ...grpc.CallOption) (*ListDomainTreeReply, error) {
	out := new(ListDomainTreeReply)
	err := c.cc.Invoke(ctx, AdminService_ListDomainTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...grpc.CallOption) (*CreateDomainReply, error) {
	out := new(CreateDomainReply)
	err := c.cc.Invoke(ctx, AdminService_CreateDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomain(ctx context.Context, in *GetDomainReq, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, AdminService_GetDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomainCode(ctx context.Context, in *GetDomainCodeReq, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, AdminService_GetDomainCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomainName(ctx context.Context, in *GetDomainNameReq, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, AdminService_GetDomainName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error) {
	out := new(UpdateDomainReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...grpc.CallOption) (*DeleteDomainReply, error) {
	out := new(DeleteDomainReply)
	err := c.cc.Invoke(ctx, AdminService_DeleteDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomainState(ctx context.Context, in *UpdateDomainStateReq, opts ...grpc.CallOption) (*UpdateDomainStateReply, error) {
	out := new(UpdateDomainStateReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDomainState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDomainMenu(ctx context.Context, in *ListDomainMenuReq, opts ...grpc.CallOption) (*ListDomainMenuReply, error) {
	out := new(ListDomainMenuReply)
	err := c.cc.Invoke(ctx, AdminService_ListDomainMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleDomainMenu(ctx context.Context, in *HandleDomainMenuReq, opts ...grpc.CallOption) (*HandleDomainMenuReply, error) {
	out := new(HandleDomainMenuReply)
	err := c.cc.Invoke(ctx, AdminService_HandleDomainMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListRole(ctx context.Context, in *ListRoleReq, opts ...grpc.CallOption) (*ListRoleReply, error) {
	out := new(ListRoleReply)
	err := c.cc.Invoke(ctx, AdminService_ListRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleReply, error) {
	out := new(CreateRoleReply)
	err := c.cc.Invoke(ctx, AdminService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, AdminService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleReply, error) {
	out := new(UpdateRoleReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateRoleState(ctx context.Context, in *UpdateRoleStateReq, opts ...grpc.CallOption) (*UpdateRoleStateReply, error) {
	out := new(UpdateRoleStateReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateRoleState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleReply, error) {
	out := new(DeleteRoleReply)
	err := c.cc.Invoke(ctx, AdminService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListRoleMenu(ctx context.Context, in *ListRoleMenuReq, opts ...grpc.CallOption) (*ListRoleMenuReply, error) {
	out := new(ListRoleMenuReply)
	err := c.cc.Invoke(ctx, AdminService_ListRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleRoleMenu(ctx context.Context, in *HandleRoleMenuReq, opts ...grpc.CallOption) (*HandleRoleMenuReply, error) {
	out := new(HandleRoleMenuReply)
	err := c.cc.Invoke(ctx, AdminService_HandleRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListRoleDept(ctx context.Context, in *ListRoleDeptReq, opts ...grpc.CallOption) (*ListRoleDeptReply, error) {
	out := new(ListRoleDeptReply)
	err := c.cc.Invoke(ctx, AdminService_ListRoleDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeReq, opts ...grpc.CallOption) (*GetRoleDataScopeReply, error) {
	out := new(GetRoleDataScopeReply)
	err := c.cc.Invoke(ctx, AdminService_GetRoleDataScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeReq, opts ...grpc.CallOption) (*HandleRoleDataScopeReply, error) {
	out := new(HandleRoleDataScopeReply)
	err := c.cc.Invoke(ctx, AdminService_HandleRoleDataScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMenu(ctx context.Context, in *ListMenuReq, opts ...grpc.CallOption) (*ListMenuReply, error) {
	out := new(ListMenuReply)
	err := c.cc.Invoke(ctx, AdminService_ListMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuReply, error) {
	out := new(CreateMenuReply)
	err := c.cc.Invoke(ctx, AdminService_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...grpc.CallOption) (*ListMenuTreeReply, error) {
	out := new(ListMenuTreeReply)
	err := c.cc.Invoke(ctx, AdminService_ListMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, AdminService_GetMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error) {
	out := new(UpdateMenuReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuReply, error) {
	out := new(DeleteMenuReply)
	err := c.cc.Invoke(ctx, AdminService_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDept(ctx context.Context, in *ListDeptReq, opts ...grpc.CallOption) (*ListDeptReply, error) {
	out := new(ListDeptReply)
	err := c.cc.Invoke(ctx, AdminService_ListDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDept(ctx context.Context, in *CreateDeptReq, opts ...grpc.CallOption) (*CreateDeptReply, error) {
	out := new(CreateDeptReply)
	err := c.cc.Invoke(ctx, AdminService_CreateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDept(ctx context.Context, in *GetDeptReq, opts ...grpc.CallOption) (*Dept, error) {
	out := new(Dept)
	err := c.cc.Invoke(ctx, AdminService_GetDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDept(ctx context.Context, in *UpdateDeptReq, opts ...grpc.CallOption) (*UpdateDeptReply, error) {
	out := new(UpdateDeptReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDeptState(ctx context.Context, in *UpdateDeptStateReq, opts ...grpc.CallOption) (*UpdateDeptStateReply, error) {
	out := new(UpdateDeptStateReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDeptState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDept(ctx context.Context, in *DeleteDeptReq, opts ...grpc.CallOption) (*DeleteDeptReply, error) {
	out := new(DeleteDeptReply)
	err := c.cc.Invoke(ctx, AdminService_DeleteDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDeptTree(ctx context.Context, in *ListDeptTreeReq, opts ...grpc.CallOption) (*ListDeptTreeReply, error) {
	out := new(ListDeptTreeReply)
	err := c.cc.Invoke(ctx, AdminService_ListDeptTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListPost(ctx context.Context, in *ListPostReq, opts ...grpc.CallOption) (*ListPostReply, error) {
	out := new(ListPostReply)
	err := c.cc.Invoke(ctx, AdminService_ListPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostReply, error) {
	out := new(CreatePostReply)
	err := c.cc.Invoke(ctx, AdminService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, AdminService_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostReply, error) {
	out := new(UpdatePostReply)
	err := c.cc.Invoke(ctx, AdminService_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostReply, error) {
	out := new(DeletePostReply)
	err := c.cc.Invoke(ctx, AdminService_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePostState(ctx context.Context, in *UpdatePostStateReq, opts ...grpc.CallOption) (*UpdatePostStateReply, error) {
	out := new(UpdatePostStateReply)
	err := c.cc.Invoke(ctx, AdminService_UpdatePostState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDict(ctx context.Context, in *ListDictReq, opts ...grpc.CallOption) (*ListDictReply, error) {
	out := new(ListDictReply)
	err := c.cc.Invoke(ctx, AdminService_ListDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDict(ctx context.Context, in *CreateDictReq, opts ...grpc.CallOption) (*CreateDictReply, error) {
	out := new(CreateDictReply)
	err := c.cc.Invoke(ctx, AdminService_CreateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDict(ctx context.Context, in *GetDictReq, opts ...grpc.CallOption) (*Dict, error) {
	out := new(Dict)
	err := c.cc.Invoke(ctx, AdminService_GetDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDict(ctx context.Context, in *UpdateDictReq, opts ...grpc.CallOption) (*UpdateDictReply, error) {
	out := new(UpdateDictReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDict(ctx context.Context, in *DeleteDictReq, opts ...grpc.CallOption) (*DeleteDictReply, error) {
	out := new(DeleteDictReply)
	err := c.cc.Invoke(ctx, AdminService_DeleteDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDictState(ctx context.Context, in *UpdateDictStateReq, opts ...grpc.CallOption) (*UpdateDictStateReply, error) {
	out := new(UpdateDictStateReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDictState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDictData(ctx context.Context, in *ListDictDataReq, opts ...grpc.CallOption) (*ListDictDataReply, error) {
	out := new(ListDictDataReply)
	err := c.cc.Invoke(ctx, AdminService_ListDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDictData(ctx context.Context, in *CreateDictDataReq, opts ...grpc.CallOption) (*CreateDictDataReply, error) {
	out := new(CreateDictDataReply)
	err := c.cc.Invoke(ctx, AdminService_CreateDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDictData(ctx context.Context, in *GetDictDataReq, opts ...grpc.CallOption) (*DictData, error) {
	out := new(DictData)
	err := c.cc.Invoke(ctx, AdminService_GetDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDictData(ctx context.Context, in *UpdateDictDataReq, opts ...grpc.CallOption) (*UpdateDictDataReply, error) {
	out := new(UpdateDictDataReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDictData(ctx context.Context, in *DeleteDictDataReq, opts ...grpc.CallOption) (*DeleteDictDataReply, error) {
	out := new(DeleteDictDataReply)
	err := c.cc.Invoke(ctx, AdminService_DeleteDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDictDataState(ctx context.Context, in *UpdateDictDataStateReq, opts ...grpc.CallOption) (*UpdateDictDataStateReply, error) {
	out := new(UpdateDictDataStateReply)
	err := c.cc.Invoke(ctx, AdminService_UpdateDictDataState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	// 登出
	Logout(context.Context, *emptypb.Empty) (*LogoutReply, error)
	// 密码登陆
	Login(context.Context, *LoginReq) (*LoginReply, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	// 短信登陆
	SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error)
	// 邮件登陆
	EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(context.Context, *emptypb.Empty) (*GetUserInfoReply, error)
	// 当前登录用户概述
	GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error)
	// 当前登录用户拥有角色
	ListUserRole(context.Context, *emptypb.Empty) (*ListUserRoleReply, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuRouterTree(context.Context, *ListUserRoleMenuRouterTreeReq) (*ListUserRoleMenuRouterTreeReply, error)
	// 获取角色菜单路由树形列表
	ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeReq) (*ListUserRoleMenuTreeReply, error)
	// 获取角色权限列表
	ListUserRolePermission(context.Context, *ListUserRolePermissionReq) (*ListUserRolePermissionReply, error)
	// 列表用户
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	// 获取用户
	GetUser(context.Context, *GetUserReq) (*User, error)
	// 修改用户
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	// 验证用户名是否存在
	ExistUserName(context.Context, *ExistUserNameReq) (*ExistUserNameReply, error)
	// 列表领域
	ListDomain(context.Context, *ListDomainReq) (*ListDomainReply, error)
	// 获取领域树形列表
	ListDomainTree(context.Context, *ListDomainTreeReq) (*ListDomainTreeReply, error)
	// 创建领域
	CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error)
	// 获取领域
	GetDomain(context.Context, *GetDomainReq) (*Domain, error)
	// 获取领域
	GetDomainCode(context.Context, *GetDomainCodeReq) (*Domain, error)
	// 获取领域
	GetDomainName(context.Context, *GetDomainNameReq) (*Domain, error)
	// 修改领域
	UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error)
	// 删除领域
	DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error)
	// 设置领域状态
	UpdateDomainState(context.Context, *UpdateDomainStateReq) (*UpdateDomainStateReply, error)
	// 获取角色菜单
	ListDomainMenu(context.Context, *ListDomainMenuReq) (*ListDomainMenuReply, error)
	// 处理角色菜单
	HandleDomainMenu(context.Context, *HandleDomainMenuReq) (*HandleDomainMenuReply, error)
	// 角色模块
	// 列表角色
	ListRole(context.Context, *ListRoleReq) (*ListRoleReply, error)
	// 创建角色
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleReply, error)
	// 获取指定ID角色
	GetRole(context.Context, *GetRoleReq) (*Role, error)
	// 修改指定ID角色
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleReply, error)
	// 更新指定ID角色状态
	UpdateRoleState(context.Context, *UpdateRoleStateReq) (*UpdateRoleStateReply, error)
	// 删除指定ID角色
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleReply, error)
	// 获取指定ID角色菜单
	ListRoleMenu(context.Context, *ListRoleMenuReq) (*ListRoleMenuReply, error)
	// 处理指定ID角色菜单
	HandleRoleMenu(context.Context, *HandleRoleMenuReq) (*HandleRoleMenuReply, error)
	// 获取指定ID角色部门
	ListRoleDept(context.Context, *ListRoleDeptReq) (*ListRoleDeptReply, error)
	// 获取指定ID角色数据范围
	GetRoleDataScope(context.Context, *GetRoleDataScopeReq) (*GetRoleDataScopeReply, error)
	// 处理指定ID角色数据范围
	HandleRoleDataScope(context.Context, *HandleRoleDataScopeReq) (*HandleRoleDataScopeReply, error)
	// 菜单模块
	// 列表菜单
	ListMenu(context.Context, *ListMenuReq) (*ListMenuReply, error)
	// 创建菜单
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error)
	// 获取树形菜单
	ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error)
	// 获取菜单
	GetMenu(context.Context, *GetMenuReq) (*Menu, error)
	// 修改菜单
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error)
	// 删除菜单
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error)
	// 列表部门
	ListDept(context.Context, *ListDeptReq) (*ListDeptReply, error)
	// 创建部门
	CreateDept(context.Context, *CreateDeptReq) (*CreateDeptReply, error)
	// 获取部门
	GetDept(context.Context, *GetDeptReq) (*Dept, error)
	// 修改部门
	UpdateDept(context.Context, *UpdateDeptReq) (*UpdateDeptReply, error)
	// 更新指定ID角色状态
	UpdateDeptState(context.Context, *UpdateDeptStateReq) (*UpdateDeptStateReply, error)
	// 删除部门
	DeleteDept(context.Context, *DeleteDeptReq) (*DeleteDeptReply, error)
	// 获取全部部门树形
	ListDeptTree(context.Context, *ListDeptTreeReq) (*ListDeptTreeReply, error)
	// 列表岗位
	ListPost(context.Context, *ListPostReq) (*ListPostReply, error)
	// 创建岗位
	CreatePost(context.Context, *CreatePostReq) (*CreatePostReply, error)
	// 获取岗位
	GetPost(context.Context, *GetPostReq) (*Post, error)
	// 修改岗位
	UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostReply, error)
	// 删除岗位
	DeletePost(context.Context, *DeletePostReq) (*DeletePostReply, error)
	// 设置岗位状态
	UpdatePostState(context.Context, *UpdatePostStateReq) (*UpdatePostStateReply, error)
	// 列表字典
	ListDict(context.Context, *ListDictReq) (*ListDictReply, error)
	// 创建字典
	CreateDict(context.Context, *CreateDictReq) (*CreateDictReply, error)
	// 获取字典
	GetDict(context.Context, *GetDictReq) (*Dict, error)
	// 修改字典
	UpdateDict(context.Context, *UpdateDictReq) (*UpdateDictReply, error)
	// 删除字典
	DeleteDict(context.Context, *DeleteDictReq) (*DeleteDictReply, error)
	// 设置字典状态
	UpdateDictState(context.Context, *UpdateDictStateReq) (*UpdateDictStateReply, error)
	// 列表字典数据
	ListDictData(context.Context, *ListDictDataReq) (*ListDictDataReply, error)
	// 创建字典数据
	CreateDictData(context.Context, *CreateDictDataReq) (*CreateDictDataReply, error)
	// 获取字典数据
	GetDictData(context.Context, *GetDictDataReq) (*DictData, error)
	// 修改字典数据
	UpdateDictData(context.Context, *UpdateDictDataReq) (*UpdateDictDataReply, error)
	// 删除字典数据
	DeleteDictData(context.Context, *DeleteDictDataReq) (*DeleteDictDataReply, error)
	// 设置字典数据状态
	UpdateDictDataState(context.Context, *UpdateDictDataStateReq) (*UpdateDictDataStateReply, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Logout(context.Context, *emptypb.Empty) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServiceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServiceServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAdminServiceServer) SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsLogin not implemented")
}
func (UnimplementedAdminServiceServer) EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAdminServiceServer) GetUserInfo(context.Context, *emptypb.Empty) (*GetUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAdminServiceServer) GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRole(context.Context, *emptypb.Empty) (*ListUserRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRole not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRoleMenuRouterTree(context.Context, *ListUserRoleMenuRouterTreeReq) (*ListUserRoleMenuRouterTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoleMenuRouterTree not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeReq) (*ListUserRoleMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoleMenuTree not implemented")
}
func (UnimplementedAdminServiceServer) ListUserRolePermission(context.Context, *ListUserRolePermissionReq) (*ListUserRolePermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRolePermission not implemented")
}
func (UnimplementedAdminServiceServer) ListUser(context.Context, *ListUserReq) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedAdminServiceServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminServiceServer) GetUser(context.Context, *GetUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServiceServer) ExistUserName(context.Context, *ExistUserNameReq) (*ExistUserNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserName not implemented")
}
func (UnimplementedAdminServiceServer) ListDomain(context.Context, *ListDomainReq) (*ListDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomain not implemented")
}
func (UnimplementedAdminServiceServer) ListDomainTree(context.Context, *ListDomainTreeReq) (*ListDomainTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainTree not implemented")
}
func (UnimplementedAdminServiceServer) CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedAdminServiceServer) GetDomain(context.Context, *GetDomainReq) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedAdminServiceServer) GetDomainCode(context.Context, *GetDomainCodeReq) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainCode not implemented")
}
func (UnimplementedAdminServiceServer) GetDomainName(context.Context, *GetDomainNameReq) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainName not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomainState(context.Context, *UpdateDomainStateReq) (*UpdateDomainStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainState not implemented")
}
func (UnimplementedAdminServiceServer) ListDomainMenu(context.Context, *ListDomainMenuReq) (*ListDomainMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainMenu not implemented")
}
func (UnimplementedAdminServiceServer) HandleDomainMenu(context.Context, *HandleDomainMenuReq) (*HandleDomainMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDomainMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListRole(context.Context, *ListRoleReq) (*ListRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedAdminServiceServer) CreateRole(context.Context, *CreateRoleReq) (*CreateRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAdminServiceServer) GetRole(context.Context, *GetRoleReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAdminServiceServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAdminServiceServer) UpdateRoleState(context.Context, *UpdateRoleStateReq) (*UpdateRoleStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleState not implemented")
}
func (UnimplementedAdminServiceServer) DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminServiceServer) ListRoleMenu(context.Context, *ListRoleMenuReq) (*ListRoleMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleMenu not implemented")
}
func (UnimplementedAdminServiceServer) HandleRoleMenu(context.Context, *HandleRoleMenuReq) (*HandleRoleMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListRoleDept(context.Context, *ListRoleDeptReq) (*ListRoleDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleDept not implemented")
}
func (UnimplementedAdminServiceServer) GetRoleDataScope(context.Context, *GetRoleDataScopeReq) (*GetRoleDataScopeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleDataScope not implemented")
}
func (UnimplementedAdminServiceServer) HandleRoleDataScope(context.Context, *HandleRoleDataScopeReq) (*HandleRoleDataScopeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleDataScope not implemented")
}
func (UnimplementedAdminServiceServer) ListMenu(context.Context, *ListMenuReq) (*ListMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedAdminServiceServer) CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuTree not implemented")
}
func (UnimplementedAdminServiceServer) GetMenu(context.Context, *GetMenuReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedAdminServiceServer) UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAdminServiceServer) DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAdminServiceServer) ListDept(context.Context, *ListDeptReq) (*ListDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDept not implemented")
}
func (UnimplementedAdminServiceServer) CreateDept(context.Context, *CreateDeptReq) (*CreateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDept not implemented")
}
func (UnimplementedAdminServiceServer) GetDept(context.Context, *GetDeptReq) (*Dept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDept not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDept(context.Context, *UpdateDeptReq) (*UpdateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDept not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDeptState(context.Context, *UpdateDeptStateReq) (*UpdateDeptStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeptState not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDept(context.Context, *DeleteDeptReq) (*DeleteDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDept not implemented")
}
func (UnimplementedAdminServiceServer) ListDeptTree(context.Context, *ListDeptTreeReq) (*ListDeptTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeptTree not implemented")
}
func (UnimplementedAdminServiceServer) ListPost(context.Context, *ListPostReq) (*ListPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPost not implemented")
}
func (UnimplementedAdminServiceServer) CreatePost(context.Context, *CreatePostReq) (*CreatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedAdminServiceServer) GetPost(context.Context, *GetPostReq) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedAdminServiceServer) DeletePost(context.Context, *DeletePostReq) (*DeletePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePostState(context.Context, *UpdatePostStateReq) (*UpdatePostStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostState not implemented")
}
func (UnimplementedAdminServiceServer) ListDict(context.Context, *ListDictReq) (*ListDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDict not implemented")
}
func (UnimplementedAdminServiceServer) CreateDict(context.Context, *CreateDictReq) (*CreateDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDict not implemented")
}
func (UnimplementedAdminServiceServer) GetDict(context.Context, *GetDictReq) (*Dict, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDict not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDict(context.Context, *UpdateDictReq) (*UpdateDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDict not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDict(context.Context, *DeleteDictReq) (*DeleteDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDict not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDictState(context.Context, *UpdateDictStateReq) (*UpdateDictStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictState not implemented")
}
func (UnimplementedAdminServiceServer) ListDictData(context.Context, *ListDictDataReq) (*ListDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictData not implemented")
}
func (UnimplementedAdminServiceServer) CreateDictData(context.Context, *CreateDictDataReq) (*CreateDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictData not implemented")
}
func (UnimplementedAdminServiceServer) GetDictData(context.Context, *GetDictDataReq) (*DictData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictData not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDictData(context.Context, *UpdateDictDataReq) (*UpdateDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictData not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDictData(context.Context, *DeleteDictDataReq) (*DeleteDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictData not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDictDataState(context.Context, *UpdateDictDataStateReq) (*UpdateDictDataStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictDataState not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SmsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SmsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SmsLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SmsLogin(ctx, req.(*SmsLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_EmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EmailLogin(ctx, req.(*EmailLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUserProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRoleMenuRouterTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleMenuRouterTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRoleMenuRouterTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRoleMenuRouterTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRoleMenuRouterTree(ctx, req.(*ListUserRoleMenuRouterTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRoleMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRoleMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRoleMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRoleMenuTree(ctx, req.(*ListUserRoleMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUserRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUserRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUserRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUserRolePermission(ctx, req.(*ListUserRolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ExistUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ExistUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ExistUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ExistUserName(ctx, req.(*ExistUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDomain(ctx, req.(*ListDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDomainTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDomainTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDomainTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDomainTree(ctx, req.(*ListDomainTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDomain(ctx, req.(*CreateDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomain(ctx, req.(*GetDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomainCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomainCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomainCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomainCode(ctx, req.(*GetDomainCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomainName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomainName(ctx, req.(*GetDomainNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomain(ctx, req.(*UpdateDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDomain(ctx, req.(*DeleteDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDomainState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomainState(ctx, req.(*UpdateDomainStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDomainMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDomainMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDomainMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDomainMenu(ctx, req.(*ListDomainMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleDomainMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleDomainMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleDomainMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleDomainMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleDomainMenu(ctx, req.(*HandleDomainMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListRole(ctx, req.(*ListRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRole(ctx, req.(*GetRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateRoleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateRoleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateRoleState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateRoleState(ctx, req.(*UpdateRoleStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListRoleMenu(ctx, req.(*ListRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleRoleMenu(ctx, req.(*HandleRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListRoleDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListRoleDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListRoleDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListRoleDept(ctx, req.(*ListRoleDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRoleDataScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleDataScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRoleDataScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRoleDataScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRoleDataScope(ctx, req.(*GetRoleDataScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HandleRoleDataScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleDataScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HandleRoleDataScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HandleRoleDataScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HandleRoleDataScope(ctx, req.(*HandleRoleDataScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMenu(ctx, req.(*ListMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateMenu(ctx, req.(*CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMenuTree(ctx, req.(*ListMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetMenu(ctx, req.(*GetMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteMenu(ctx, req.(*DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDept(ctx, req.(*ListDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDept(ctx, req.(*CreateDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDept(ctx, req.(*GetDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDept(ctx, req.(*UpdateDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDeptState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDeptState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDeptState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDeptState(ctx, req.(*UpdateDeptStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDept(ctx, req.(*DeleteDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDeptTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDeptTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDeptTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDeptTree(ctx, req.(*ListDeptTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListPost(ctx, req.(*ListPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreatePost(ctx, req.(*CreatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPost(ctx, req.(*GetPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePost(ctx, req.(*UpdatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePostState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePostState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePostState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePostState(ctx, req.(*UpdatePostStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDict(ctx, req.(*ListDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDict(ctx, req.(*CreateDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDict(ctx, req.(*GetDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDict(ctx, req.(*UpdateDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDict(ctx, req.(*DeleteDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDictState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDictState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDictState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDictState(ctx, req.(*UpdateDictStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDictData(ctx, req.(*ListDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDictData(ctx, req.(*CreateDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDictData(ctx, req.(*GetDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDictData(ctx, req.(*UpdateDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDictData(ctx, req.(*DeleteDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDictDataState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDataStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDictDataState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDictDataState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDictDataState(ctx, req.(*UpdateDictDataStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _AdminService_Logout_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AdminService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AdminService_Register_Handler,
		},
		{
			MethodName: "SmsLogin",
			Handler:    _AdminService_SmsLogin_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _AdminService_EmailLogin_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _AdminService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _AdminService_GetUserProfile_Handler,
		},
		{
			MethodName: "ListUserRole",
			Handler:    _AdminService_ListUserRole_Handler,
		},
		{
			MethodName: "ListUserRoleMenuRouterTree",
			Handler:    _AdminService_ListUserRoleMenuRouterTree_Handler,
		},
		{
			MethodName: "ListUserRoleMenuTree",
			Handler:    _AdminService_ListUserRoleMenuTree_Handler,
		},
		{
			MethodName: "ListUserRolePermission",
			Handler:    _AdminService_ListUserRolePermission_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _AdminService_ListUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AdminService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AdminService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AdminService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminService_DeleteUser_Handler,
		},
		{
			MethodName: "ExistUserName",
			Handler:    _AdminService_ExistUserName_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _AdminService_ListDomain_Handler,
		},
		{
			MethodName: "ListDomainTree",
			Handler:    _AdminService_ListDomainTree_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _AdminService_CreateDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _AdminService_GetDomain_Handler,
		},
		{
			MethodName: "GetDomainCode",
			Handler:    _AdminService_GetDomainCode_Handler,
		},
		{
			MethodName: "GetDomainName",
			Handler:    _AdminService_GetDomainName_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _AdminService_UpdateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _AdminService_DeleteDomain_Handler,
		},
		{
			MethodName: "UpdateDomainState",
			Handler:    _AdminService_UpdateDomainState_Handler,
		},
		{
			MethodName: "ListDomainMenu",
			Handler:    _AdminService_ListDomainMenu_Handler,
		},
		{
			MethodName: "HandleDomainMenu",
			Handler:    _AdminService_HandleDomainMenu_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _AdminService_ListRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AdminService_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AdminService_GetRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AdminService_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateRoleState",
			Handler:    _AdminService_UpdateRoleState_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AdminService_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoleMenu",
			Handler:    _AdminService_ListRoleMenu_Handler,
		},
		{
			MethodName: "HandleRoleMenu",
			Handler:    _AdminService_HandleRoleMenu_Handler,
		},
		{
			MethodName: "ListRoleDept",
			Handler:    _AdminService_ListRoleDept_Handler,
		},
		{
			MethodName: "GetRoleDataScope",
			Handler:    _AdminService_GetRoleDataScope_Handler,
		},
		{
			MethodName: "HandleRoleDataScope",
			Handler:    _AdminService_HandleRoleDataScope_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _AdminService_ListMenu_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _AdminService_CreateMenu_Handler,
		},
		{
			MethodName: "ListMenuTree",
			Handler:    _AdminService_ListMenuTree_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _AdminService_GetMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _AdminService_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _AdminService_DeleteMenu_Handler,
		},
		{
			MethodName: "ListDept",
			Handler:    _AdminService_ListDept_Handler,
		},
		{
			MethodName: "CreateDept",
			Handler:    _AdminService_CreateDept_Handler,
		},
		{
			MethodName: "GetDept",
			Handler:    _AdminService_GetDept_Handler,
		},
		{
			MethodName: "UpdateDept",
			Handler:    _AdminService_UpdateDept_Handler,
		},
		{
			MethodName: "UpdateDeptState",
			Handler:    _AdminService_UpdateDeptState_Handler,
		},
		{
			MethodName: "DeleteDept",
			Handler:    _AdminService_DeleteDept_Handler,
		},
		{
			MethodName: "ListDeptTree",
			Handler:    _AdminService_ListDeptTree_Handler,
		},
		{
			MethodName: "ListPost",
			Handler:    _AdminService_ListPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _AdminService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _AdminService_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _AdminService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _AdminService_DeletePost_Handler,
		},
		{
			MethodName: "UpdatePostState",
			Handler:    _AdminService_UpdatePostState_Handler,
		},
		{
			MethodName: "ListDict",
			Handler:    _AdminService_ListDict_Handler,
		},
		{
			MethodName: "CreateDict",
			Handler:    _AdminService_CreateDict_Handler,
		},
		{
			MethodName: "GetDict",
			Handler:    _AdminService_GetDict_Handler,
		},
		{
			MethodName: "UpdateDict",
			Handler:    _AdminService_UpdateDict_Handler,
		},
		{
			MethodName: "DeleteDict",
			Handler:    _AdminService_DeleteDict_Handler,
		},
		{
			MethodName: "UpdateDictState",
			Handler:    _AdminService_UpdateDictState_Handler,
		},
		{
			MethodName: "ListDictData",
			Handler:    _AdminService_ListDictData_Handler,
		},
		{
			MethodName: "CreateDictData",
			Handler:    _AdminService_CreateDictData_Handler,
		},
		{
			MethodName: "GetDictData",
			Handler:    _AdminService_GetDictData_Handler,
		},
		{
			MethodName: "UpdateDictData",
			Handler:    _AdminService_UpdateDictData_Handler,
		},
		{
			MethodName: "DeleteDictData",
			Handler:    _AdminService_DeleteDictData_Handler,
		},
		{
			MethodName: "UpdateDictDataState",
			Handler:    _AdminService_UpdateDictDataState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/admin.proto",
}
