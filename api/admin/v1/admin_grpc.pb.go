// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// 登出
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutReply, error)
	// 密码登陆
	PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 短信登陆
	SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 邮件登陆
	EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error)
	// 当前登录用户概述
	GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileReply, error)
	// 获取用户菜单
	ListUserMenu(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 获取用户菜单-树形
	ListUserMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserMenuTreeReply, error)
	// 当前登录用户拥有领域
	ListUserDomain(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserDomainReply, error)
	// 当前登录用户拥有角色
	ListUserAuthority(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserAuthorityReply, error)
	// 列表用户
	ListUser(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error)
	// 获取用户
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error)
	// 修改用户
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error)
	// 绑定用户领域
	HandleUserDomain(ctx context.Context, in *HandleUserDomainReq, opts ...grpc.CallOption) (*HandleUserDomainReply, error)
	// 绑定用户领域权限
	HandleUserDomainAuthority(ctx context.Context, in *HandleUserDomainAuthorityReq, opts ...grpc.CallOption) (*HandleUserDomainAuthorityReply, error)
	// 领域模块
	// 登陆领域/租户
	LoginDomain(ctx context.Context, in *LoginDomainReq, opts ...grpc.CallOption) (*LoginReply, error)
	// 注册领域/租户
	RegisterDomain(ctx context.Context, in *RegisterDomainReq, opts ...grpc.CallOption) (*RegisterReply, error)
	// 列表领域
	ListDomain(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建领域
	CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...grpc.CallOption) (*CreateDomainReply, error)
	// 获取领域
	GetDomain(ctx context.Context, in *GetDomainReq, opts ...grpc.CallOption) (*Domain, error)
	// 修改领域
	UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error)
	// 删除领域
	DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...grpc.CallOption) (*DeleteDomainReply, error)
	// 权限角色模块
	// 列表权限角色
	ListAuthority(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建权限角色
	CreateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...grpc.CallOption) (*CreateAuthorityReply, error)
	// 获取权限角色
	GetAuthority(ctx context.Context, in *GetAuthorityReq, opts ...grpc.CallOption) (*Authority, error)
	// 修改权限角色
	UpdateAuthority(ctx context.Context, in *UpdateAuthorityReq, opts ...grpc.CallOption) (*UpdateAuthorityReply, error)
	// 删除权限角色
	DeleteAuthority(ctx context.Context, in *DeleteAuthorityReq, opts ...grpc.CallOption) (*DeleteAuthorityReply, error)
	// 处理权限角色菜单
	HandleAuthorityMenu(ctx context.Context, in *HandleAuthorityMenuReq, opts ...grpc.CallOption) (*HandleAuthorityMenuReply, error)
	// 处理权限角色接口
	HandleAuthorityApi(ctx context.Context, in *HandleAuthorityApiReq, opts ...grpc.CallOption) (*HandleAuthorityApiReply, error)
	// 获取权限角色菜单树形列表
	ListAuthorityMenuTree(ctx context.Context, in *ListAuthorityMenuTreeReq, opts ...grpc.CallOption) (*ListAuthorityMenuTreeReply, error)
	// 获取权限角色菜单列表
	ListAuthorityPermission(ctx context.Context, in *ListAuthorityPermissionReq, opts ...grpc.CallOption) (*ListAuthorityPermissionReply, error)
	// 接口模块
	// 列表接口
	ListApi(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建接口
	CreateApi(ctx context.Context, in *CreateApiReq, opts ...grpc.CallOption) (*CreateApiReply, error)
	// 获取接口
	GetApi(ctx context.Context, in *GetApiReq, opts ...grpc.CallOption) (*Api, error)
	// 修改接口
	UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...grpc.CallOption) (*UpdateApiReply, error)
	// 删除接口
	DeleteApi(ctx context.Context, in *DeleteApiReq, opts ...grpc.CallOption) (*DeleteApiReply, error)
	// 菜单模块
	// 列表菜单
	ListMenu(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建菜单
	CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuReply, error)
	// 获取树形菜单
	ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...grpc.CallOption) (*ListMenuTreeReply, error)
	// 获取菜单
	GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*Menu, error)
	// 修改菜单
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error)
	// 删除菜单
	DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuReply, error)
	// 列表部门
	ListDepartment(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error)
	// 创建部门
	CreateDepartment(ctx context.Context, in *CreateDepartmentReq, opts ...grpc.CallOption) (*CreateDepartmentReply, error)
	// 获取部门
	GetDepartment(ctx context.Context, in *GetDepartmentReq, opts ...grpc.CallOption) (*Department, error)
	// 修改部门
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentReq, opts ...grpc.CallOption) (*UpdateDepartmentReply, error)
	// 删除部门
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentReq, opts ...grpc.CallOption) (*DeleteDepartmentReply, error)
	// 获取树形部门
	ListDepartmentTree(ctx context.Context, in *ListDepartmentTreeReq, opts ...grpc.CallOption) (*ListDepartmentTreeReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) PassLogin(ctx context.Context, in *PassLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/PassLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/SmsLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/EmailLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserProfileReply, error) {
	out := new(GetUserProfileReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserMenu(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserMenuTreeReply, error) {
	out := new(UserMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserDomain(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserDomainReply, error) {
	out := new(ListUserDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUserAuthority(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserAuthorityReply, error) {
	out := new(ListUserAuthorityReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUserAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListUser(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleUserDomain(ctx context.Context, in *HandleUserDomainReq, opts ...grpc.CallOption) (*HandleUserDomainReply, error) {
	out := new(HandleUserDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleUserDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleUserDomainAuthority(ctx context.Context, in *HandleUserDomainAuthorityReq, opts ...grpc.CallOption) (*HandleUserDomainAuthorityReply, error) {
	out := new(HandleUserDomainAuthorityReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleUserDomainAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LoginDomain(ctx context.Context, in *LoginDomainReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/LoginDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RegisterDomain(ctx context.Context, in *RegisterDomainReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/RegisterDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDomain(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...grpc.CallOption) (*CreateDomainReply, error) {
	out := new(CreateDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDomain(ctx context.Context, in *GetDomainReq, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...grpc.CallOption) (*UpdateDomainReply, error) {
	out := new(UpdateDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...grpc.CallOption) (*DeleteDomainReply, error) {
	out := new(DeleteDomainReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAuthority(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...grpc.CallOption) (*CreateAuthorityReply, error) {
	out := new(CreateAuthorityReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAuthority(ctx context.Context, in *GetAuthorityReq, opts ...grpc.CallOption) (*Authority, error) {
	out := new(Authority)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAuthority(ctx context.Context, in *UpdateAuthorityReq, opts ...grpc.CallOption) (*UpdateAuthorityReply, error) {
	out := new(UpdateAuthorityReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteAuthority(ctx context.Context, in *DeleteAuthorityReq, opts ...grpc.CallOption) (*DeleteAuthorityReply, error) {
	out := new(DeleteAuthorityReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleAuthorityMenu(ctx context.Context, in *HandleAuthorityMenuReq, opts ...grpc.CallOption) (*HandleAuthorityMenuReply, error) {
	out := new(HandleAuthorityMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleAuthorityMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) HandleAuthorityApi(ctx context.Context, in *HandleAuthorityApiReq, opts ...grpc.CallOption) (*HandleAuthorityApiReply, error) {
	out := new(HandleAuthorityApiReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/HandleAuthorityApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAuthorityMenuTree(ctx context.Context, in *ListAuthorityMenuTreeReq, opts ...grpc.CallOption) (*ListAuthorityMenuTreeReply, error) {
	out := new(ListAuthorityMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListAuthorityMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAuthorityPermission(ctx context.Context, in *ListAuthorityPermissionReq, opts ...grpc.CallOption) (*ListAuthorityPermissionReply, error) {
	out := new(ListAuthorityPermissionReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListAuthorityPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListApi(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateApi(ctx context.Context, in *CreateApiReq, opts ...grpc.CallOption) (*CreateApiReply, error) {
	out := new(CreateApiReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetApi(ctx context.Context, in *GetApiReq, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...grpc.CallOption) (*UpdateApiReply, error) {
	out := new(UpdateApiReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteApi(ctx context.Context, in *DeleteApiReq, opts ...grpc.CallOption) (*DeleteApiReply, error) {
	out := new(DeleteApiReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListMenu(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuReply, error) {
	out := new(CreateMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...grpc.CallOption) (*ListMenuTreeReply, error) {
	out := new(ListMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error) {
	out := new(UpdateMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuReply, error) {
	out := new(DeleteMenuReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDepartment(ctx context.Context, in *protobuf.PagingReq, opts ...grpc.CallOption) (*protobuf.PagingReply, error) {
	out := new(protobuf.PagingReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateDepartment(ctx context.Context, in *CreateDepartmentReq, opts ...grpc.CallOption) (*CreateDepartmentReply, error) {
	out := new(CreateDepartmentReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDepartment(ctx context.Context, in *GetDepartmentReq, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentReq, opts ...grpc.CallOption) (*UpdateDepartmentReply, error) {
	out := new(UpdateDepartmentReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentReq, opts ...grpc.CallOption) (*DeleteDepartmentReply, error) {
	out := new(DeleteDepartmentReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDepartmentTree(ctx context.Context, in *ListDepartmentTreeReq, opts ...grpc.CallOption) (*ListDepartmentTreeReply, error) {
	out := new(ListDepartmentTreeReply)
	err := c.cc.Invoke(ctx, "/api.admin.v1.Admin/ListDepartmentTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// 登出
	Logout(context.Context, *emptypb.Empty) (*LogoutReply, error)
	// 密码登陆
	PassLogin(context.Context, *PassLoginReq) (*LoginReply, error)
	// 短信登陆
	SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error)
	// 邮件登陆
	EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	// User 用户模块
	// 当前登录用户概述
	GetUserInfo(context.Context, *emptypb.Empty) (*User, error)
	// 当前登录用户概述
	GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error)
	// 获取用户菜单
	ListUserMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 获取用户菜单-树形
	ListUserMenuTree(context.Context, *emptypb.Empty) (*UserMenuTreeReply, error)
	// 当前登录用户拥有领域
	ListUserDomain(context.Context, *emptypb.Empty) (*ListUserDomainReply, error)
	// 当前登录用户拥有角色
	ListUserAuthority(context.Context, *emptypb.Empty) (*ListUserAuthorityReply, error)
	// 列表用户
	ListUser(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	// 获取用户
	GetUser(context.Context, *GetUserReq) (*User, error)
	// 修改用户
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	// 绑定用户领域
	HandleUserDomain(context.Context, *HandleUserDomainReq) (*HandleUserDomainReply, error)
	// 绑定用户领域权限
	HandleUserDomainAuthority(context.Context, *HandleUserDomainAuthorityReq) (*HandleUserDomainAuthorityReply, error)
	// 领域模块
	// 登陆领域/租户
	LoginDomain(context.Context, *LoginDomainReq) (*LoginReply, error)
	// 注册领域/租户
	RegisterDomain(context.Context, *RegisterDomainReq) (*RegisterReply, error)
	// 列表领域
	ListDomain(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建领域
	CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error)
	// 获取领域
	GetDomain(context.Context, *GetDomainReq) (*Domain, error)
	// 修改领域
	UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error)
	// 删除领域
	DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error)
	// 权限角色模块
	// 列表权限角色
	ListAuthority(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建权限角色
	CreateAuthority(context.Context, *CreateAuthorityReq) (*CreateAuthorityReply, error)
	// 获取权限角色
	GetAuthority(context.Context, *GetAuthorityReq) (*Authority, error)
	// 修改权限角色
	UpdateAuthority(context.Context, *UpdateAuthorityReq) (*UpdateAuthorityReply, error)
	// 删除权限角色
	DeleteAuthority(context.Context, *DeleteAuthorityReq) (*DeleteAuthorityReply, error)
	// 处理权限角色菜单
	HandleAuthorityMenu(context.Context, *HandleAuthorityMenuReq) (*HandleAuthorityMenuReply, error)
	// 处理权限角色接口
	HandleAuthorityApi(context.Context, *HandleAuthorityApiReq) (*HandleAuthorityApiReply, error)
	// 获取权限角色菜单树形列表
	ListAuthorityMenuTree(context.Context, *ListAuthorityMenuTreeReq) (*ListAuthorityMenuTreeReply, error)
	// 获取权限角色菜单列表
	ListAuthorityPermission(context.Context, *ListAuthorityPermissionReq) (*ListAuthorityPermissionReply, error)
	// 接口模块
	// 列表接口
	ListApi(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建接口
	CreateApi(context.Context, *CreateApiReq) (*CreateApiReply, error)
	// 获取接口
	GetApi(context.Context, *GetApiReq) (*Api, error)
	// 修改接口
	UpdateApi(context.Context, *UpdateApiReq) (*UpdateApiReply, error)
	// 删除接口
	DeleteApi(context.Context, *DeleteApiReq) (*DeleteApiReply, error)
	// 菜单模块
	// 列表菜单
	ListMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建菜单
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error)
	// 获取树形菜单
	ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error)
	// 获取菜单
	GetMenu(context.Context, *GetMenuReq) (*Menu, error)
	// 修改菜单
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error)
	// 删除菜单
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error)
	// 列表部门
	ListDepartment(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	// 创建部门
	CreateDepartment(context.Context, *CreateDepartmentReq) (*CreateDepartmentReply, error)
	// 获取部门
	GetDepartment(context.Context, *GetDepartmentReq) (*Department, error)
	// 修改部门
	UpdateDepartment(context.Context, *UpdateDepartmentReq) (*UpdateDepartmentReply, error)
	// 删除部门
	DeleteDepartment(context.Context, *DeleteDepartmentReq) (*DeleteDepartmentReply, error)
	// 获取树形部门
	ListDepartmentTree(context.Context, *ListDepartmentTreeReq) (*ListDepartmentTreeReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Logout(context.Context, *emptypb.Empty) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServer) PassLogin(context.Context, *PassLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassLogin not implemented")
}
func (UnimplementedAdminServer) SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsLogin not implemented")
}
func (UnimplementedAdminServer) EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAdminServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAdminServer) GetUserInfo(context.Context, *emptypb.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAdminServer) GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAdminServer) ListUserMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMenu not implemented")
}
func (UnimplementedAdminServer) ListUserMenuTree(context.Context, *emptypb.Empty) (*UserMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMenuTree not implemented")
}
func (UnimplementedAdminServer) ListUserDomain(context.Context, *emptypb.Empty) (*ListUserDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDomain not implemented")
}
func (UnimplementedAdminServer) ListUserAuthority(context.Context, *emptypb.Empty) (*ListUserAuthorityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAuthority not implemented")
}
func (UnimplementedAdminServer) ListUser(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedAdminServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminServer) GetUser(context.Context, *GetUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAdminServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAdminServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServer) HandleUserDomain(context.Context, *HandleUserDomainReq) (*HandleUserDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUserDomain not implemented")
}
func (UnimplementedAdminServer) HandleUserDomainAuthority(context.Context, *HandleUserDomainAuthorityReq) (*HandleUserDomainAuthorityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUserDomainAuthority not implemented")
}
func (UnimplementedAdminServer) LoginDomain(context.Context, *LoginDomainReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDomain not implemented")
}
func (UnimplementedAdminServer) RegisterDomain(context.Context, *RegisterDomainReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDomain not implemented")
}
func (UnimplementedAdminServer) ListDomain(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomain not implemented")
}
func (UnimplementedAdminServer) CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedAdminServer) GetDomain(context.Context, *GetDomainReq) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedAdminServer) UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (UnimplementedAdminServer) DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedAdminServer) ListAuthority(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthority not implemented")
}
func (UnimplementedAdminServer) CreateAuthority(context.Context, *CreateAuthorityReq) (*CreateAuthorityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthority not implemented")
}
func (UnimplementedAdminServer) GetAuthority(context.Context, *GetAuthorityReq) (*Authority, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthority not implemented")
}
func (UnimplementedAdminServer) UpdateAuthority(context.Context, *UpdateAuthorityReq) (*UpdateAuthorityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthority not implemented")
}
func (UnimplementedAdminServer) DeleteAuthority(context.Context, *DeleteAuthorityReq) (*DeleteAuthorityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthority not implemented")
}
func (UnimplementedAdminServer) HandleAuthorityMenu(context.Context, *HandleAuthorityMenuReq) (*HandleAuthorityMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAuthorityMenu not implemented")
}
func (UnimplementedAdminServer) HandleAuthorityApi(context.Context, *HandleAuthorityApiReq) (*HandleAuthorityApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAuthorityApi not implemented")
}
func (UnimplementedAdminServer) ListAuthorityMenuTree(context.Context, *ListAuthorityMenuTreeReq) (*ListAuthorityMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorityMenuTree not implemented")
}
func (UnimplementedAdminServer) ListAuthorityPermission(context.Context, *ListAuthorityPermissionReq) (*ListAuthorityPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorityPermission not implemented")
}
func (UnimplementedAdminServer) ListApi(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApi not implemented")
}
func (UnimplementedAdminServer) CreateApi(context.Context, *CreateApiReq) (*CreateApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedAdminServer) GetApi(context.Context, *GetApiReq) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApi not implemented")
}
func (UnimplementedAdminServer) UpdateApi(context.Context, *UpdateApiReq) (*UpdateApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedAdminServer) DeleteApi(context.Context, *DeleteApiReq) (*DeleteApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedAdminServer) ListMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedAdminServer) CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAdminServer) ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuTree not implemented")
}
func (UnimplementedAdminServer) GetMenu(context.Context, *GetMenuReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedAdminServer) UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAdminServer) DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAdminServer) ListDepartment(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartment not implemented")
}
func (UnimplementedAdminServer) CreateDepartment(context.Context, *CreateDepartmentReq) (*CreateDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedAdminServer) GetDepartment(context.Context, *GetDepartmentReq) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedAdminServer) UpdateDepartment(context.Context, *UpdateDepartmentReq) (*UpdateDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedAdminServer) DeleteDepartment(context.Context, *DeleteDepartmentReq) (*DeleteDepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedAdminServer) ListDepartmentTree(context.Context, *ListDepartmentTreeReq) (*ListDepartmentTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartmentTree not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_PassLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).PassLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/PassLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).PassLogin(ctx, req.(*PassLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SmsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SmsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/SmsLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SmsLogin(ctx, req.(*SmsLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/EmailLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).EmailLogin(ctx, req.(*EmailLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserMenu(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserMenuTree(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserDomain(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUserAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUserAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUserAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUserAuthority(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListUser(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleUserDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleUserDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleUserDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleUserDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleUserDomain(ctx, req.(*HandleUserDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleUserDomainAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleUserDomainAuthorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleUserDomainAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleUserDomainAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleUserDomainAuthority(ctx, req.(*HandleUserDomainAuthorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LoginDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LoginDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/LoginDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LoginDomain(ctx, req.(*LoginDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RegisterDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RegisterDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/RegisterDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RegisterDomain(ctx, req.(*RegisterDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDomain(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateDomain(ctx, req.(*CreateDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDomain(ctx, req.(*GetDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDomain(ctx, req.(*UpdateDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteDomain(ctx, req.(*DeleteDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAuthority(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateAuthority(ctx, req.(*CreateAuthorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAuthority(ctx, req.(*GetAuthorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAuthority(ctx, req.(*UpdateAuthorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteAuthority(ctx, req.(*DeleteAuthorityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleAuthorityMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleAuthorityMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleAuthorityMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleAuthorityMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleAuthorityMenu(ctx, req.(*HandleAuthorityMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_HandleAuthorityApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleAuthorityApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).HandleAuthorityApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/HandleAuthorityApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).HandleAuthorityApi(ctx, req.(*HandleAuthorityApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAuthorityMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorityMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAuthorityMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListAuthorityMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAuthorityMenuTree(ctx, req.(*ListAuthorityMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAuthorityPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorityPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAuthorityPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListAuthorityPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAuthorityPermission(ctx, req.(*ListAuthorityPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListApi(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateApi(ctx, req.(*CreateApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetApi(ctx, req.(*GetApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateApi(ctx, req.(*UpdateApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteApi(ctx, req.(*DeleteApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListMenu(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateMenu(ctx, req.(*CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListMenuTree(ctx, req.(*ListMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenu(ctx, req.(*GetMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteMenu(ctx, req.(*DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDepartment(ctx, req.(*protobuf.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateDepartment(ctx, req.(*CreateDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDepartment(ctx, req.(*GetDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDepartment(ctx, req.(*UpdateDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteDepartment(ctx, req.(*DeleteDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDepartmentTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListDepartmentTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.v1.Admin/ListDepartmentTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListDepartmentTree(ctx, req.(*ListDepartmentTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logout",
			Handler:    _Admin_Logout_Handler,
		},
		{
			MethodName: "PassLogin",
			Handler:    _Admin_PassLogin_Handler,
		},
		{
			MethodName: "SmsLogin",
			Handler:    _Admin_SmsLogin_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _Admin_EmailLogin_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Admin_Register_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Admin_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Admin_GetUserProfile_Handler,
		},
		{
			MethodName: "ListUserMenu",
			Handler:    _Admin_ListUserMenu_Handler,
		},
		{
			MethodName: "ListUserMenuTree",
			Handler:    _Admin_ListUserMenuTree_Handler,
		},
		{
			MethodName: "ListUserDomain",
			Handler:    _Admin_ListUserDomain_Handler,
		},
		{
			MethodName: "ListUserAuthority",
			Handler:    _Admin_ListUserAuthority_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Admin_ListUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Admin_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Admin_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Admin_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Admin_DeleteUser_Handler,
		},
		{
			MethodName: "HandleUserDomain",
			Handler:    _Admin_HandleUserDomain_Handler,
		},
		{
			MethodName: "HandleUserDomainAuthority",
			Handler:    _Admin_HandleUserDomainAuthority_Handler,
		},
		{
			MethodName: "LoginDomain",
			Handler:    _Admin_LoginDomain_Handler,
		},
		{
			MethodName: "RegisterDomain",
			Handler:    _Admin_RegisterDomain_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _Admin_ListDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _Admin_CreateDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _Admin_GetDomain_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _Admin_UpdateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _Admin_DeleteDomain_Handler,
		},
		{
			MethodName: "ListAuthority",
			Handler:    _Admin_ListAuthority_Handler,
		},
		{
			MethodName: "CreateAuthority",
			Handler:    _Admin_CreateAuthority_Handler,
		},
		{
			MethodName: "GetAuthority",
			Handler:    _Admin_GetAuthority_Handler,
		},
		{
			MethodName: "UpdateAuthority",
			Handler:    _Admin_UpdateAuthority_Handler,
		},
		{
			MethodName: "DeleteAuthority",
			Handler:    _Admin_DeleteAuthority_Handler,
		},
		{
			MethodName: "HandleAuthorityMenu",
			Handler:    _Admin_HandleAuthorityMenu_Handler,
		},
		{
			MethodName: "HandleAuthorityApi",
			Handler:    _Admin_HandleAuthorityApi_Handler,
		},
		{
			MethodName: "ListAuthorityMenuTree",
			Handler:    _Admin_ListAuthorityMenuTree_Handler,
		},
		{
			MethodName: "ListAuthorityPermission",
			Handler:    _Admin_ListAuthorityPermission_Handler,
		},
		{
			MethodName: "ListApi",
			Handler:    _Admin_ListApi_Handler,
		},
		{
			MethodName: "CreateApi",
			Handler:    _Admin_CreateApi_Handler,
		},
		{
			MethodName: "GetApi",
			Handler:    _Admin_GetApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _Admin_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _Admin_DeleteApi_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _Admin_ListMenu_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Admin_CreateMenu_Handler,
		},
		{
			MethodName: "ListMenuTree",
			Handler:    _Admin_ListMenuTree_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _Admin_GetMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Admin_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Admin_DeleteMenu_Handler,
		},
		{
			MethodName: "ListDepartment",
			Handler:    _Admin_ListDepartment_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _Admin_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _Admin_GetDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Admin_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Admin_DeleteDepartment_Handler,
		},
		{
			MethodName: "ListDepartmentTree",
			Handler:    _Admin_ListDepartmentTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/admin.proto",
}
