// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/service/domain.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = protobuf.DomainState(0)
)

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DomainMultiError, or nil if none found.
func (m *Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DomainValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DomainValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DomainValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DomainValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DomainValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DomainValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.State != nil {
		// no validation rules for State
	}

	if len(errors) > 0 {
		return DomainMultiError(errors)
	}

	return nil
}

// DomainMultiError is an error wrapping multiple validation errors returned by
// Domain.ValidateAll() if the designated constraints aren't met.
type DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainMultiError) AllErrors() []error { return m }

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on CreateDomainReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDomainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDomainReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDomainReqMultiError, or nil if none found.
func (m *CreateDomainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDomainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDomainReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDomainReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDomainReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDomainReqMultiError(errors)
	}

	return nil
}

// CreateDomainReqMultiError is an error wrapping multiple validation errors
// returned by CreateDomainReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDomainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDomainReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDomainReqMultiError) AllErrors() []error { return m }

// CreateDomainReqValidationError is the validation error returned by
// CreateDomainReq.Validate if the designated constraints aren't met.
type CreateDomainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDomainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDomainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDomainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDomainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDomainReqValidationError) ErrorName() string { return "CreateDomainReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateDomainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDomainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDomainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDomainReqValidationError{}

// Validate checks the field values on CreateDomainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDomainReplyMultiError, or nil if none found.
func (m *CreateDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateDomainReplyMultiError(errors)
	}

	return nil
}

// CreateDomainReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDomainReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDomainReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDomainReplyMultiError) AllErrors() []error { return m }

// CreateDomainReplyValidationError is the validation error returned by
// CreateDomainReply.Validate if the designated constraints aren't met.
type CreateDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDomainReplyValidationError) ErrorName() string {
	return "CreateDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDomainReplyValidationError{}

// Validate checks the field values on UpdateDomainReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainReqMultiError, or nil if none found.
func (m *UpdateDomainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDomainReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDomainReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDomainReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDomainReqMultiError(errors)
	}

	return nil
}

// UpdateDomainReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDomainReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDomainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainReqMultiError) AllErrors() []error { return m }

// UpdateDomainReqValidationError is the validation error returned by
// UpdateDomainReq.Validate if the designated constraints aren't met.
type UpdateDomainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainReqValidationError) ErrorName() string { return "UpdateDomainReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDomainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainReqValidationError{}

// Validate checks the field values on UpdateDomainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainReplyMultiError, or nil if none found.
func (m *UpdateDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateDomainReplyMultiError(errors)
	}

	return nil
}

// UpdateDomainReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDomainReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainReplyMultiError) AllErrors() []error { return m }

// UpdateDomainReplyValidationError is the validation error returned by
// UpdateDomainReply.Validate if the designated constraints aren't met.
type UpdateDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainReplyValidationError) ErrorName() string {
	return "UpdateDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainReplyValidationError{}

// Validate checks the field values on GetDomainReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDomainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDomainReqMultiError, or
// nil if none found.
func (m *GetDomainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDomainReqMultiError(errors)
	}

	return nil
}

// GetDomainReqMultiError is an error wrapping multiple validation errors
// returned by GetDomainReq.ValidateAll() if the designated constraints aren't met.
type GetDomainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainReqMultiError) AllErrors() []error { return m }

// GetDomainReqValidationError is the validation error returned by
// GetDomainReq.Validate if the designated constraints aren't met.
type GetDomainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainReqValidationError) ErrorName() string { return "GetDomainReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDomainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainReqValidationError{}

// Validate checks the field values on DeleteDomainReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainReqMultiError, or nil if none found.
func (m *DeleteDomainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDomainReqMultiError(errors)
	}

	return nil
}

// DeleteDomainReqMultiError is an error wrapping multiple validation errors
// returned by DeleteDomainReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteDomainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainReqMultiError) AllErrors() []error { return m }

// DeleteDomainReqValidationError is the validation error returned by
// DeleteDomainReq.Validate if the designated constraints aren't met.
type DeleteDomainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainReqValidationError) ErrorName() string { return "DeleteDomainReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDomainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainReqValidationError{}

// Validate checks the field values on DeleteDomainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainReplyMultiError, or nil if none found.
func (m *DeleteDomainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteDomainReplyMultiError(errors)
	}

	return nil
}

// DeleteDomainReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDomainReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDomainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainReplyMultiError) AllErrors() []error { return m }

// DeleteDomainReplyValidationError is the validation error returned by
// DeleteDomainReply.Validate if the designated constraints aren't met.
type DeleteDomainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainReplyValidationError) ErrorName() string {
	return "DeleteDomainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainReplyValidationError{}

// Validate checks the field values on UpdateDomainReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainReq_DataMultiError, or nil if none found.
func (m *UpdateDomainReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := UpdateDomainReq_DataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDomainReq_DataMultiError(errors)
	}

	return nil
}

// UpdateDomainReq_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainReq_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainReq_DataMultiError) AllErrors() []error { return m }

// UpdateDomainReq_DataValidationError is the validation error returned by
// UpdateDomainReq_Data.Validate if the designated constraints aren't met.
type UpdateDomainReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainReq_DataValidationError) ErrorName() string {
	return "UpdateDomainReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainReq_DataValidationError{}
