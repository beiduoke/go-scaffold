// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/service/menu.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = protobuf.MenuHidden(0)
)

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuMultiError, or nil if none found.
func (m *Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildrens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("Childrens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("Childrens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  fmt.Sprintf("Childrens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Hidden != nil {
		// no validation rules for Hidden
	}

	if m.Component != nil {
		// no validation rules for Component
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.KeepAlive != nil {
		// no validation rules for KeepAlive
	}

	if m.BaseMenu != nil {
		// no validation rules for BaseMenu
	}

	if m.CloseTab != nil {
		// no validation rules for CloseTab
	}

	if len(errors) > 0 {
		return MenuMultiError(errors)
	}

	return nil
}

// MenuMultiError is an error wrapping multiple validation errors returned by
// Menu.ValidateAll() if the designated constraints aren't met.
type MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuMultiError) AllErrors() []error { return m }

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on CreateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateMenuReqMultiError, or
// nil if none found.
func (m *CreateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMenuReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMenuReqMultiError(errors)
	}

	return nil
}

// CreateMenuReqMultiError is an error wrapping multiple validation errors
// returned by CreateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuReqMultiError) AllErrors() []error { return m }

// CreateMenuReqValidationError is the validation error returned by
// CreateMenuReq.Validate if the designated constraints aren't met.
type CreateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReqValidationError) ErrorName() string { return "CreateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReqValidationError{}

// Validate checks the field values on CreateMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuReplyMultiError, or nil if none found.
func (m *CreateMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateMenuReplyMultiError(errors)
	}

	return nil
}

// CreateMenuReplyMultiError is an error wrapping multiple validation errors
// returned by CreateMenuReply.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuReplyMultiError) AllErrors() []error { return m }

// CreateMenuReplyValidationError is the validation error returned by
// CreateMenuReply.Validate if the designated constraints aren't met.
type CreateMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReplyValidationError) ErrorName() string { return "CreateMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReplyValidationError{}

// Validate checks the field values on UpdateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuReqMultiError, or
// nil if none found.
func (m *UpdateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMenuReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMenuReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMenuReqMultiError(errors)
	}

	return nil
}

// UpdateMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReqMultiError) AllErrors() []error { return m }

// UpdateMenuReqValidationError is the validation error returned by
// UpdateMenuReq.Validate if the designated constraints aren't met.
type UpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReqValidationError) ErrorName() string { return "UpdateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReqValidationError{}

// Validate checks the field values on UpdateMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenuReplyMultiError, or nil if none found.
func (m *UpdateMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateMenuReplyMultiError(errors)
	}

	return nil
}

// UpdateMenuReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReplyMultiError) AllErrors() []error { return m }

// UpdateMenuReplyValidationError is the validation error returned by
// UpdateMenuReply.Validate if the designated constraints aren't met.
type UpdateMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReplyValidationError) ErrorName() string { return "UpdateMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReplyValidationError{}

// Validate checks the field values on GetMenuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMenuReqMultiError, or
// nil if none found.
func (m *GetMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMenuReqMultiError(errors)
	}

	return nil
}

// GetMenuReqMultiError is an error wrapping multiple validation errors
// returned by GetMenuReq.ValidateAll() if the designated constraints aren't met.
type GetMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuReqMultiError) AllErrors() []error { return m }

// GetMenuReqValidationError is the validation error returned by
// GetMenuReq.Validate if the designated constraints aren't met.
type GetMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuReqValidationError) ErrorName() string { return "GetMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuReqValidationError{}

// Validate checks the field values on DeleteMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteMenuReqMultiError, or
// nil if none found.
func (m *DeleteMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMenuReqMultiError(errors)
	}

	return nil
}

// DeleteMenuReqMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuReqMultiError) AllErrors() []error { return m }

// DeleteMenuReqValidationError is the validation error returned by
// DeleteMenuReq.Validate if the designated constraints aren't met.
type DeleteMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuReqValidationError) ErrorName() string { return "DeleteMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuReqValidationError{}

// Validate checks the field values on DeleteMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuReplyMultiError, or nil if none found.
func (m *DeleteMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteMenuReplyMultiError(errors)
	}

	return nil
}

// DeleteMenuReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuReplyMultiError) AllErrors() []error { return m }

// DeleteMenuReplyValidationError is the validation error returned by
// DeleteMenuReply.Validate if the designated constraints aren't met.
type DeleteMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuReplyValidationError) ErrorName() string { return "DeleteMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuReplyValidationError{}

// Validate checks the field values on GetMenuTreeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMenuTreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuTreeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMenuTreeReqMultiError,
// or nil if none found.
func (m *GetMenuTreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuTreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMenuTreeReqMultiError(errors)
	}

	return nil
}

// GetMenuTreeReqMultiError is an error wrapping multiple validation errors
// returned by GetMenuTreeReq.ValidateAll() if the designated constraints
// aren't met.
type GetMenuTreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuTreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuTreeReqMultiError) AllErrors() []error { return m }

// GetMenuTreeReqValidationError is the validation error returned by
// GetMenuTreeReq.Validate if the designated constraints aren't met.
type GetMenuTreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuTreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuTreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuTreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuTreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuTreeReqValidationError) ErrorName() string { return "GetMenuTreeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuTreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuTreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuTreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuTreeReqValidationError{}

// Validate checks the field values on GetMenuTreeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMenuTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuTreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenuTreeReplyMultiError, or nil if none found.
func (m *GetMenuTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMenuTreeReplyMultiError(errors)
	}

	return nil
}

// GetMenuTreeReplyMultiError is an error wrapping multiple validation errors
// returned by GetMenuTreeReply.ValidateAll() if the designated constraints
// aren't met.
type GetMenuTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuTreeReplyMultiError) AllErrors() []error { return m }

// GetMenuTreeReplyValidationError is the validation error returned by
// GetMenuTreeReply.Validate if the designated constraints aren't met.
type GetMenuTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuTreeReplyValidationError) ErrorName() string { return "GetMenuTreeReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuTreeReplyValidationError{}

// Validate checks the field values on CreateMenuReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuReq_DataMultiError, or nil if none found.
func (m *CreateMenuReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := CreateMenuReq_DataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMenuReq_DataMultiError(errors)
	}

	return nil
}

// CreateMenuReq_DataMultiError is an error wrapping multiple validation errors
// returned by CreateMenuReq_Data.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuReq_DataMultiError) AllErrors() []error { return m }

// CreateMenuReq_DataValidationError is the validation error returned by
// CreateMenuReq_Data.Validate if the designated constraints aren't met.
type CreateMenuReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReq_DataValidationError) ErrorName() string {
	return "CreateMenuReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReq_DataValidationError{}

// Validate checks the field values on UpdateMenuReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenuReq_DataMultiError, or nil if none found.
func (m *UpdateMenuReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMenuReq_DataMultiError(errors)
	}

	return nil
}

// UpdateMenuReq_DataMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReq_Data.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReq_DataMultiError) AllErrors() []error { return m }

// UpdateMenuReq_DataValidationError is the validation error returned by
// UpdateMenuReq_Data.Validate if the designated constraints aren't met.
type UpdateMenuReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReq_DataValidationError) ErrorName() string {
	return "UpdateMenuReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMenuReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReq_DataValidationError{}
