// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.21.5
// source: admin/v1/service/authority.proto

package service

import (
	context "context"
	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthorityServiceCreateAuthority = "/api.admin.v1.service.AuthorityService/CreateAuthority"
const OperationAuthorityServiceCreateRole = "/api.admin.v1.service.AuthorityService/CreateRole"
const OperationAuthorityServiceDeleteAuthority = "/api.admin.v1.service.AuthorityService/DeleteAuthority"
const OperationAuthorityServiceDeleteRole = "/api.admin.v1.service.AuthorityService/DeleteRole"
const OperationAuthorityServiceGetAuthority = "/api.admin.v1.service.AuthorityService/GetAuthority"
const OperationAuthorityServiceGetRole = "/api.admin.v1.service.AuthorityService/GetRole"
const OperationAuthorityServiceListAuthority = "/api.admin.v1.service.AuthorityService/ListAuthority"
const OperationAuthorityServiceListRole = "/api.admin.v1.service.AuthorityService/ListRole"
const OperationAuthorityServiceUpdateAuthority = "/api.admin.v1.service.AuthorityService/UpdateAuthority"
const OperationAuthorityServiceUpdateRole = "/api.admin.v1.service.AuthorityService/UpdateRole"

type AuthorityServiceHTTPServer interface {
	CreateAuthority(context.Context, *CreateAuthorityReq) (*CreateAuthorityReply, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleReply, error)
	DeleteAuthority(context.Context, *DeleteAuthorityReq) (*DeleteAuthorityReply, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleReply, error)
	GetAuthority(context.Context, *GetAuthorityReq) (*Authority, error)
	GetRole(context.Context, *GetRoleReq) (*Role, error)
	ListAuthority(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListRole(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	UpdateAuthority(context.Context, *UpdateAuthorityReq) (*UpdateAuthorityReply, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleReply, error)
}

func RegisterAuthorityServiceHTTPServer(s *http.Server, srv AuthorityServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/roles", _AuthorityService_ListRole0_HTTP_Handler(srv))
	r.POST("/admin/v1/roles", _AuthorityService_CreateRole0_HTTP_Handler(srv))
	r.GET("/admin/v1/roles/{id}", _AuthorityService_GetRole0_HTTP_Handler(srv))
	r.PUT("/admin/v1/roles/{id}", _AuthorityService_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/roles/{id}", _AuthorityService_DeleteRole0_HTTP_Handler(srv))
	r.GET("/admin/v1/authorities", _AuthorityService_ListAuthority0_HTTP_Handler(srv))
	r.POST("/admin/v1/authorities", _AuthorityService_CreateAuthority0_HTTP_Handler(srv))
	r.GET("/admin/v1/authorities/{id}", _AuthorityService_GetAuthority0_HTTP_Handler(srv))
	r.PUT("/admin/v1/authorities/{id}", _AuthorityService_UpdateAuthority0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/authorities/{id}", _AuthorityService_DeleteAuthority0_HTTP_Handler(srv))
}

func _AuthorityService_ListRole0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceListRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_CreateRole0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_GetRole0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_UpdateRole0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_DeleteRole0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_ListAuthority0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceListAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuthority(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_CreateAuthority0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAuthorityReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceCreateAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuthority(ctx, req.(*CreateAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthorityReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_GetAuthority0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAuthorityReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceGetAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAuthority(ctx, req.(*GetAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Authority)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_UpdateAuthority0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAuthorityReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceUpdateAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAuthority(ctx, req.(*UpdateAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAuthorityReply)
		return ctx.Result(200, reply)
	}
}

func _AuthorityService_DeleteAuthority0_HTTP_Handler(srv AuthorityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAuthorityReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityServiceDeleteAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAuthority(ctx, req.(*DeleteAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAuthorityReply)
		return ctx.Result(200, reply)
	}
}

type AuthorityServiceHTTPClient interface {
	CreateAuthority(ctx context.Context, req *CreateAuthorityReq, opts ...http.CallOption) (rsp *CreateAuthorityReply, err error)
	CreateRole(ctx context.Context, req *CreateRoleReq, opts ...http.CallOption) (rsp *CreateRoleReply, err error)
	DeleteAuthority(ctx context.Context, req *DeleteAuthorityReq, opts ...http.CallOption) (rsp *DeleteAuthorityReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleReq, opts ...http.CallOption) (rsp *DeleteRoleReply, err error)
	GetAuthority(ctx context.Context, req *GetAuthorityReq, opts ...http.CallOption) (rsp *Authority, err error)
	GetRole(ctx context.Context, req *GetRoleReq, opts ...http.CallOption) (rsp *Role, err error)
	ListAuthority(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListRole(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	UpdateAuthority(ctx context.Context, req *UpdateAuthorityReq, opts ...http.CallOption) (rsp *UpdateAuthorityReply, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...http.CallOption) (rsp *UpdateRoleReply, err error)
}

type AuthorityServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthorityServiceHTTPClient(client *http.Client) AuthorityServiceHTTPClient {
	return &AuthorityServiceHTTPClientImpl{client}
}

func (c *AuthorityServiceHTTPClientImpl) CreateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...http.CallOption) (*CreateAuthorityReply, error) {
	var out CreateAuthorityReply
	pattern := "/admin/v1/authorities"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityServiceCreateAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...http.CallOption) (*CreateRoleReply, error) {
	var out CreateRoleReply
	pattern := "/admin/v1/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) DeleteAuthority(ctx context.Context, in *DeleteAuthorityReq, opts ...http.CallOption) (*DeleteAuthorityReply, error) {
	var out DeleteAuthorityReply
	pattern := "/admin/v1/authorities/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorityServiceDeleteAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...http.CallOption) (*DeleteRoleReply, error) {
	var out DeleteRoleReply
	pattern := "/admin/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorityServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) GetAuthority(ctx context.Context, in *GetAuthorityReq, opts ...http.CallOption) (*Authority, error) {
	var out Authority
	pattern := "/admin/v1/authorities/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorityServiceGetAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleReq, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/admin/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorityServiceGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) ListAuthority(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/authorities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorityServiceListAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) ListRole(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorityServiceListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) UpdateAuthority(ctx context.Context, in *UpdateAuthorityReq, opts ...http.CallOption) (*UpdateAuthorityReply, error) {
	var out UpdateAuthorityReply
	pattern := "/admin/v1/authorities/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityServiceUpdateAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...http.CallOption) (*UpdateRoleReply, error) {
	var out UpdateRoleReply
	pattern := "/admin/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
