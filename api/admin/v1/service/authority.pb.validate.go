// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/service/authority.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = protobuf.AuthorityState(0)
)

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on CreateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleReqMultiError, or
// nil if none found.
func (m *CreateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleReqMultiError(errors)
	}

	return nil
}

// CreateRoleReqMultiError is an error wrapping multiple validation errors
// returned by CreateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleReqMultiError) AllErrors() []error { return m }

// CreateRoleReqValidationError is the validation error returned by
// CreateRoleReq.Validate if the designated constraints aren't met.
type CreateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReqValidationError) ErrorName() string { return "CreateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReqValidationError{}

// Validate checks the field values on CreateRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleReplyMultiError, or nil if none found.
func (m *CreateRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateRoleReplyMultiError(errors)
	}

	return nil
}

// CreateRoleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateRoleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleReplyMultiError) AllErrors() []error { return m }

// CreateRoleReplyValidationError is the validation error returned by
// CreateRoleReply.Validate if the designated constraints aren't met.
type CreateRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReplyValidationError) ErrorName() string { return "CreateRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReplyValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleReqMultiError, or
// nil if none found.
func (m *UpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleReqMultiError(errors)
	}

	return nil
}

// UpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReqMultiError) AllErrors() []error { return m }

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on UpdateRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleReplyMultiError, or nil if none found.
func (m *UpdateRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateRoleReplyMultiError(errors)
	}

	return nil
}

// UpdateRoleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReplyMultiError) AllErrors() []error { return m }

// UpdateRoleReplyValidationError is the validation error returned by
// UpdateRoleReply.Validate if the designated constraints aren't met.
type UpdateRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReplyValidationError) ErrorName() string { return "UpdateRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReplyValidationError{}

// Validate checks the field values on GetRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleReqMultiError, or
// nil if none found.
func (m *GetRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoleReqMultiError(errors)
	}

	return nil
}

// GetRoleReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleReq.ValidateAll() if the designated constraints aren't met.
type GetRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleReqMultiError) AllErrors() []error { return m }

// GetRoleReqValidationError is the validation error returned by
// GetRoleReq.Validate if the designated constraints aren't met.
type GetRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleReqValidationError) ErrorName() string { return "GetRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleReqValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleReqMultiError, or
// nil if none found.
func (m *DeleteRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoleReqMultiError(errors)
	}

	return nil
}

// DeleteRoleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReqMultiError) AllErrors() []error { return m }

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}

// Validate checks the field values on DeleteRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleReplyMultiError, or nil if none found.
func (m *DeleteRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteRoleReplyMultiError(errors)
	}

	return nil
}

// DeleteRoleReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReplyMultiError) AllErrors() []error { return m }

// DeleteRoleReplyValidationError is the validation error returned by
// DeleteRoleReply.Validate if the designated constraints aren't met.
type DeleteRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReplyValidationError) ErrorName() string { return "DeleteRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReplyValidationError{}

// Validate checks the field values on Authority with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Authority) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Authority with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthorityMultiError, or nil
// if none found.
func (m *Authority) ValidateAll() error {
	return m.validate(true)
}

func (m *Authority) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthorityValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthorityValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthorityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthorityValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthorityValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthorityValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.State != nil {
		// no validation rules for State
	}

	if len(errors) > 0 {
		return AuthorityMultiError(errors)
	}

	return nil
}

// AuthorityMultiError is an error wrapping multiple validation errors returned
// by Authority.ValidateAll() if the designated constraints aren't met.
type AuthorityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorityMultiError) AllErrors() []error { return m }

// AuthorityValidationError is the validation error returned by
// Authority.Validate if the designated constraints aren't met.
type AuthorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorityValidationError) ErrorName() string { return "AuthorityValidationError" }

// Error satisfies the builtin error interface
func (e AuthorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorityValidationError{}

// Validate checks the field values on CreateAuthorityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAuthorityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuthorityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuthorityReqMultiError, or nil if none found.
func (m *CreateAuthorityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuthorityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAuthorityReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAuthorityReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAuthorityReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAuthorityReqMultiError(errors)
	}

	return nil
}

// CreateAuthorityReqMultiError is an error wrapping multiple validation errors
// returned by CreateAuthorityReq.ValidateAll() if the designated constraints
// aren't met.
type CreateAuthorityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuthorityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuthorityReqMultiError) AllErrors() []error { return m }

// CreateAuthorityReqValidationError is the validation error returned by
// CreateAuthorityReq.Validate if the designated constraints aren't met.
type CreateAuthorityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuthorityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuthorityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuthorityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuthorityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuthorityReqValidationError) ErrorName() string {
	return "CreateAuthorityReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAuthorityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuthorityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuthorityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuthorityReqValidationError{}

// Validate checks the field values on CreateAuthorityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAuthorityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuthorityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuthorityReplyMultiError, or nil if none found.
func (m *CreateAuthorityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuthorityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateAuthorityReplyMultiError(errors)
	}

	return nil
}

// CreateAuthorityReplyMultiError is an error wrapping multiple validation
// errors returned by CreateAuthorityReply.ValidateAll() if the designated
// constraints aren't met.
type CreateAuthorityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuthorityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuthorityReplyMultiError) AllErrors() []error { return m }

// CreateAuthorityReplyValidationError is the validation error returned by
// CreateAuthorityReply.Validate if the designated constraints aren't met.
type CreateAuthorityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuthorityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuthorityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuthorityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuthorityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuthorityReplyValidationError) ErrorName() string {
	return "CreateAuthorityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAuthorityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuthorityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuthorityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuthorityReplyValidationError{}

// Validate checks the field values on UpdateAuthorityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuthorityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuthorityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuthorityReqMultiError, or nil if none found.
func (m *UpdateAuthorityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuthorityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAuthorityReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAuthorityReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAuthorityReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAuthorityReqMultiError(errors)
	}

	return nil
}

// UpdateAuthorityReqMultiError is an error wrapping multiple validation errors
// returned by UpdateAuthorityReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateAuthorityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuthorityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuthorityReqMultiError) AllErrors() []error { return m }

// UpdateAuthorityReqValidationError is the validation error returned by
// UpdateAuthorityReq.Validate if the designated constraints aren't met.
type UpdateAuthorityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuthorityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuthorityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuthorityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuthorityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuthorityReqValidationError) ErrorName() string {
	return "UpdateAuthorityReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuthorityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuthorityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuthorityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuthorityReqValidationError{}

// Validate checks the field values on UpdateAuthorityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuthorityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuthorityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuthorityReplyMultiError, or nil if none found.
func (m *UpdateAuthorityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuthorityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateAuthorityReplyMultiError(errors)
	}

	return nil
}

// UpdateAuthorityReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAuthorityReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateAuthorityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuthorityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuthorityReplyMultiError) AllErrors() []error { return m }

// UpdateAuthorityReplyValidationError is the validation error returned by
// UpdateAuthorityReply.Validate if the designated constraints aren't met.
type UpdateAuthorityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuthorityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuthorityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuthorityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuthorityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuthorityReplyValidationError) ErrorName() string {
	return "UpdateAuthorityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuthorityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuthorityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuthorityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuthorityReplyValidationError{}

// Validate checks the field values on GetAuthorityReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorityReqMultiError, or nil if none found.
func (m *GetAuthorityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAuthorityReqMultiError(errors)
	}

	return nil
}

// GetAuthorityReqMultiError is an error wrapping multiple validation errors
// returned by GetAuthorityReq.ValidateAll() if the designated constraints
// aren't met.
type GetAuthorityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorityReqMultiError) AllErrors() []error { return m }

// GetAuthorityReqValidationError is the validation error returned by
// GetAuthorityReq.Validate if the designated constraints aren't met.
type GetAuthorityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorityReqValidationError) ErrorName() string { return "GetAuthorityReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthorityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorityReqValidationError{}

// Validate checks the field values on DeleteAuthorityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthorityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthorityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuthorityReqMultiError, or nil if none found.
func (m *DeleteAuthorityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthorityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAuthorityReqMultiError(errors)
	}

	return nil
}

// DeleteAuthorityReqMultiError is an error wrapping multiple validation errors
// returned by DeleteAuthorityReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteAuthorityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthorityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthorityReqMultiError) AllErrors() []error { return m }

// DeleteAuthorityReqValidationError is the validation error returned by
// DeleteAuthorityReq.Validate if the designated constraints aren't met.
type DeleteAuthorityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthorityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthorityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthorityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthorityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthorityReqValidationError) ErrorName() string {
	return "DeleteAuthorityReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAuthorityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthorityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthorityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthorityReqValidationError{}

// Validate checks the field values on DeleteAuthorityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthorityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthorityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuthorityReplyMultiError, or nil if none found.
func (m *DeleteAuthorityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthorityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteAuthorityReplyMultiError(errors)
	}

	return nil
}

// DeleteAuthorityReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteAuthorityReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteAuthorityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthorityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthorityReplyMultiError) AllErrors() []error { return m }

// DeleteAuthorityReplyValidationError is the validation error returned by
// DeleteAuthorityReply.Validate if the designated constraints aren't met.
type DeleteAuthorityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthorityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthorityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthorityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthorityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthorityReplyValidationError) ErrorName() string {
	return "DeleteAuthorityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAuthorityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthorityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthorityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthorityReplyValidationError{}

// Validate checks the field values on UpdateRoleReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleReq_DataMultiError, or nil if none found.
func (m *UpdateRoleReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleReq_DataMultiError(errors)
	}

	return nil
}

// UpdateRoleReq_DataMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq_Data.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReq_DataMultiError) AllErrors() []error { return m }

// UpdateRoleReq_DataValidationError is the validation error returned by
// UpdateRoleReq_Data.Validate if the designated constraints aren't met.
type UpdateRoleReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReq_DataValidationError) ErrorName() string {
	return "UpdateRoleReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReq_DataValidationError{}

// Validate checks the field values on UpdateAuthorityReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuthorityReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuthorityReq_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuthorityReq_DataMultiError, or nil if none found.
func (m *UpdateAuthorityReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuthorityReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAuthorityReq_DataMultiError(errors)
	}

	return nil
}

// UpdateAuthorityReq_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateAuthorityReq_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateAuthorityReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuthorityReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuthorityReq_DataMultiError) AllErrors() []error { return m }

// UpdateAuthorityReq_DataValidationError is the validation error returned by
// UpdateAuthorityReq_Data.Validate if the designated constraints aren't met.
type UpdateAuthorityReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuthorityReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuthorityReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuthorityReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuthorityReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuthorityReq_DataValidationError) ErrorName() string {
	return "UpdateAuthorityReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuthorityReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuthorityReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuthorityReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuthorityReq_DataValidationError{}
