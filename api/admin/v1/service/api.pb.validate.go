// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/service/api.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Api with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Api) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Api with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiMultiError, or nil if none found.
func (m *Api) ValidateAll() error {
	return m.validate(true)
}

func (m *Api) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ApiMultiError(errors)
	}

	return nil
}

// ApiMultiError is an error wrapping multiple validation errors returned by
// Api.ValidateAll() if the designated constraints aren't met.
type ApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiMultiError) AllErrors() []error { return m }

// ApiValidationError is the validation error returned by Api.Validate if the
// designated constraints aren't met.
type ApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiValidationError) ErrorName() string { return "ApiValidationError" }

// Error satisfies the builtin error interface
func (e ApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiValidationError{}

// Validate checks the field values on CreateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReqMultiError, or
// nil if none found.
func (m *CreateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateApiReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateApiReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApiReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateApiReqMultiError(errors)
	}

	return nil
}

// CreateApiReqMultiError is an error wrapping multiple validation errors
// returned by CreateApiReq.ValidateAll() if the designated constraints aren't met.
type CreateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReqMultiError) AllErrors() []error { return m }

// CreateApiReqValidationError is the validation error returned by
// CreateApiReq.Validate if the designated constraints aren't met.
type CreateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReqValidationError) ErrorName() string { return "CreateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReqValidationError{}

// Validate checks the field values on CreateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReplyMultiError,
// or nil if none found.
func (m *CreateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateApiReplyMultiError(errors)
	}

	return nil
}

// CreateApiReplyMultiError is an error wrapping multiple validation errors
// returned by CreateApiReply.ValidateAll() if the designated constraints
// aren't met.
type CreateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReplyMultiError) AllErrors() []error { return m }

// CreateApiReplyValidationError is the validation error returned by
// CreateApiReply.Validate if the designated constraints aren't met.
type CreateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReplyValidationError) ErrorName() string { return "CreateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReplyValidationError{}

// Validate checks the field values on UpdateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReqMultiError, or
// nil if none found.
func (m *UpdateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApiReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApiReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApiReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateApiReqMultiError(errors)
	}

	return nil
}

// UpdateApiReqMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReq.ValidateAll() if the designated constraints aren't met.
type UpdateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReqMultiError) AllErrors() []error { return m }

// UpdateApiReqValidationError is the validation error returned by
// UpdateApiReq.Validate if the designated constraints aren't met.
type UpdateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReqValidationError) ErrorName() string { return "UpdateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReqValidationError{}

// Validate checks the field values on UpdateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReplyMultiError,
// or nil if none found.
func (m *UpdateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateApiReplyMultiError(errors)
	}

	return nil
}

// UpdateApiReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReplyMultiError) AllErrors() []error { return m }

// UpdateApiReplyValidationError is the validation error returned by
// UpdateApiReply.Validate if the designated constraints aren't met.
type UpdateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReplyValidationError) ErrorName() string { return "UpdateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReplyValidationError{}

// Validate checks the field values on GetApiReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiReqMultiError, or nil
// if none found.
func (m *GetApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetApiReqMultiError(errors)
	}

	return nil
}

// GetApiReqMultiError is an error wrapping multiple validation errors returned
// by GetApiReq.ValidateAll() if the designated constraints aren't met.
type GetApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiReqMultiError) AllErrors() []error { return m }

// GetApiReqValidationError is the validation error returned by
// GetApiReq.Validate if the designated constraints aren't met.
type GetApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiReqValidationError) ErrorName() string { return "GetApiReqValidationError" }

// Error satisfies the builtin error interface
func (e GetApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiReqValidationError{}

// Validate checks the field values on DeleteApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReqMultiError, or
// nil if none found.
func (m *DeleteApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteApiReqMultiError(errors)
	}

	return nil
}

// DeleteApiReqMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReq.ValidateAll() if the designated constraints aren't met.
type DeleteApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReqMultiError) AllErrors() []error { return m }

// DeleteApiReqValidationError is the validation error returned by
// DeleteApiReq.Validate if the designated constraints aren't met.
type DeleteApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReqValidationError) ErrorName() string { return "DeleteApiReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReqValidationError{}

// Validate checks the field values on DeleteApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReplyMultiError,
// or nil if none found.
func (m *DeleteApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteApiReplyMultiError(errors)
	}

	return nil
}

// DeleteApiReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReplyMultiError) AllErrors() []error { return m }

// DeleteApiReplyValidationError is the validation error returned by
// DeleteApiReply.Validate if the designated constraints aren't met.
type DeleteApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReplyValidationError) ErrorName() string { return "DeleteApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReplyValidationError{}

// Validate checks the field values on CreateApiReq_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateApiReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApiReq_DataMultiError, or nil if none found.
func (m *CreateApiReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := CreateApiReq_DataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateApiReq_DataMultiError(errors)
	}

	return nil
}

// CreateApiReq_DataMultiError is an error wrapping multiple validation errors
// returned by CreateApiReq_Data.ValidateAll() if the designated constraints
// aren't met.
type CreateApiReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReq_DataMultiError) AllErrors() []error { return m }

// CreateApiReq_DataValidationError is the validation error returned by
// CreateApiReq_Data.Validate if the designated constraints aren't met.
type CreateApiReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReq_DataValidationError) ErrorName() string {
	return "CreateApiReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApiReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReq_DataValidationError{}

// Validate checks the field values on UpdateApiReq_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApiReq_DataMultiError, or nil if none found.
func (m *UpdateApiReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateApiReq_DataMultiError(errors)
	}

	return nil
}

// UpdateApiReq_DataMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReq_Data.ValidateAll() if the designated constraints
// aren't met.
type UpdateApiReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReq_DataMultiError) AllErrors() []error { return m }

// UpdateApiReq_DataValidationError is the validation error returned by
// UpdateApiReq_Data.Validate if the designated constraints aren't met.
type UpdateApiReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReq_DataValidationError) ErrorName() string {
	return "UpdateApiReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApiReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReq_DataValidationError{}
