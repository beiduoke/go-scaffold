syntax = "proto3";

package api.admin.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protobuf/enum.proto";
import "protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/beiduoke/go-scaffold/api/admin/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.admin.v1";
option java_outer_classname = "adminProtoV1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "apiKey";
      value: {
        name: "Authorization";
        description: "jwt 无状态";
        type: 2;
        in: 2;
        flow: 2;
      }
    }
  };
	info: {
		title: "Scaffold API";
		version: "1.0";
		contact: {
			name: "基础架构";
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			email: "none@example.com";
		};
		license: {
			name: "BSD 3-Clause License";
			url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
		};
		extensions: {
			key: "x-something-something";
			value: {
				string_value: "yadda";
			}
		};
  };
};

// The greeting service definition.
service Admin {
  // 登出
  rpc Logout (google.protobuf.Empty) returns (LogoutReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/logout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      external_docs: {
        url: "https://github.com/grpc-ecosystem/grpc-gateway";
        description: "SayHello Query";
      }
      security: {
          security_requirement: {
              key: "ApiKeyAuth";
              value: {}
          }
          security_requirement: {
              key: "OAuth2";
              value: {
                  scope: "read";
                  scope: "write";
              }
          }
      }
      extensions: {
          key: "x-irreversible";
          value: {
              bool_value: true;
          }
      }
    };
  }
  // 登陆
  rpc Login (LoginReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/login"
      body: "auth"
      additional_bindings {
        patch: "/admin/v1/auth/login/{domain}"
        body: "auth"
      }
    };
  }
  // 注册
  rpc Register (RegisterReq) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/register"
      body: "auth"
    };
  }

  // User 用户模块
  // 当前登录用户概述
  rpc GetUserProfile (google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/profiles"
    };
  }
  // 获取用户菜单
  rpc GetUserMenu (google.protobuf.Empty) returns (GetUserMenuReply) {
    option (google.api.http) = {
      get: "/admin/v1/users/menus"
    };
  }
  // 列表用户
  rpc ListUser (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/users"
    };
  }
  // 创建用户
  rpc CreateUser (CreateUserReq) returns (CreateUserReply) {
    option (google.api.http) = {
      post: "/admin/v1/users"
      body: "data"
    };
  }
  // 获取用户
  rpc GetUser (GetUserReq) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/{id}"
    };
  }
  // 修改用户
  rpc UpdateUser (UpdateUserReq) returns (UpdateUserReply) {
    option (google.api.http) = {
      put: "/admin/v1/users/{id}"
      body: "data"
    };
  }
  // 删除用户
  rpc DeleteUser (DeleteUserReq) returns (DeleteUserReply) {
    option (google.api.http) = {
      delete: "/admin/v1/users/{id}"
    };
  }

  // 领域模块
  // 列表领域
  rpc ListDomain (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/domains"
    };
  }
  // 创建领域
  rpc CreateDomain (CreateDomainReq) returns (CreateDomainReply) {
    option (google.api.http) = {
      post: "/admin/v1/domains"
      body: "data"
    };
  }
  // 获取领域
  rpc GetDomain (GetDomainReq) returns (Domain) {
    option (google.api.http) = {
      get: "/admin/v1/domains/{id}"
    };
  }
  // 修改领域
  rpc UpdateDomain (UpdateDomainReq) returns (UpdateDomainReply) {
    option (google.api.http) = {
      put: "/admin/v1/domains/{id}"
      body: "data"
    };
  }
  // 删除领域
  rpc DeleteDomain (DeleteDomainReq) returns (DeleteDomainReply) {
    option (google.api.http) = {
      delete: "/admin/v1/domains/{id}"
    };
  }

  // 授权模块
  // 列表授权
  rpc ListAuthority (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/authorities"
    };
  }
  // 创建授权
  rpc CreateAuthority (CreateAuthorityReq) returns (CreateAuthorityReply) {
    option (google.api.http) = {
      post: "/admin/v1/authorities"
      body: "data"
    };
  }
  // 获取授权
  rpc GetAuthority (GetAuthorityReq) returns (Authority) {
    option (google.api.http) = {
      get: "/admin/v1/authorities/{id}"
    };
  }
  // 修改授权
  rpc UpdateAuthority (UpdateAuthorityReq) returns (UpdateAuthorityReply) {
    option (google.api.http) = {
      put: "/admin/v1/authorities/{id}"
      body: "data"
    };
  }
  // 删除授权
  rpc DeleteAuthority (DeleteAuthorityReq) returns (DeleteAuthorityReply) {
    option (google.api.http) = {
      delete: "/admin/v1/authorities/{id}"
    };
  }

  // 接口模块
  // 列表接口
  rpc ListApi (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/apis"
    };
  }
  // 创建接口
  rpc CreateApi (CreateApiReq) returns (CreateApiReply) {
    option (google.api.http) = {
      post: "/admin/v1/apis"
      body: "*"
    };
  }
  // 获取接口
  rpc GetApi (GetApiReq) returns (Api) {
    option (google.api.http) = {
      get: "/admin/v1/apis/{id}"
    };
  }
  // 修改接口
  rpc UpdateApi (UpdateApiReq) returns (UpdateApiReply) {
    option (google.api.http) = {
      put: "/admin/v1/apis/{id}"
      body: "data"
    };
  }
  // 删除接口
  rpc DeleteApi (DeleteApiReq) returns (DeleteApiReply) {
    option (google.api.http) = {
      delete: "/admin/v1/apis/{id}"
    };
  }
  // 菜单模块
  // 列表菜单
  rpc ListMenu (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/menus"
    };
  }
  // 创建菜单
  rpc CreateMenu (CreateMenuReq) returns (CreateMenuReply) {
    option (google.api.http) = {
      post: "/admin/v1/menus"
      body: "data"
    };
  }
  // 获取树形菜单
  rpc GetMenuTree (GetMenuTreeReq) returns (Menu) {
    option (google.api.http) = {
      get: "/admin/v1/menus/tree/{id}"
    };
  }
  // 获取菜单
  rpc GetMenu (GetMenuReq) returns (Menu) {
    option (google.api.http) = {
      get: "/admin/v1/menus/{id}"
    };
  }
  // 修改菜单
  rpc UpdateMenu (UpdateMenuReq) returns (UpdateMenuReply) {
    option (google.api.http) = {
      put: "/admin/v1/menus/{id}"
      body: "data"
    };
  }
  // 删除菜单
  rpc DeleteMenu (DeleteMenuReq) returns (DeleteMenuReply) {
    option (google.api.http) = {
      delete: "/admin/v1/menus/{id}"
    };
  }
}

message Auth {
  // 用户名
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  // 密码
  string password = 2 [(validate.rules).string = {min_len: 6, max_len: 25}];
}

// 请求 - 登录
message LoginReq {
  // 领域
  string domain = 1;
  // 请求体
  Auth auth = 2 [(validate.rules).message = {required: true}];
}

// 回应 - 登录
message LoginReply {
  // 登录token
  string token = 1;
  // 过期时间
  google.protobuf.Timestamp expire_time = 2;
}

// 请求 - 注册
message RegisterReq {
  // 领域
  string domain = 1;
  // 请求体
  Auth auth = 2 [(validate.rules).message = {required: true}];
}

// 回应 - 注册
message RegisterReply {
  bool success = 1;
  string message = 2;
}

// 回应 - 退出登录
message LogoutReply {
  bool success = 1;
  string message = 2;
}

// 用户模块
message User {
  uint64 id = 1;
  string name = 2;
  string nick_name = 4;
  string real_name = 5;
  google.protobuf.Timestamp birthday = 6;
  api.protobuf.UserGender gender = 7;
  string mobile = 8;
  string email = 9;
  api.protobuf.UserState state = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  optional string authoritys = 13;
}

// 回应 - 列表用户 - 未使用
message ListUserReply {
  repeated User items = 1;
  int32 total = 2;
}

// 请求 - 创建用户
message CreateUserReq {
  uint64 id = 1;
  message Data {
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string password = 3;
    optional string nick_name = 4;
    optional string real_name = 5;
    optional google.protobuf.Timestamp birthday = 6;
    optional api.protobuf.UserGender gender = 7;
    string mobile = 8 [(validate.rules).string = {
      pattern:   "^1[0-9]{10}$",
      max_bytes: 15,
   }];
    optional string email = 9 [(validate.rules).string.email = true];
    api.protobuf.UserState state = 10 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    repeated uint64 domain_ids = 11 [(validate.rules).repeated = {min_items: 1, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 2;
}

// 回应 - 创建用户
message CreateUserReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 获取用户
message GetUserReq {
  uint64 id = 1;
}

// 请求 - 删除用户
message DeleteUserReq {
  uint64 id = 1;
}

// 回应 - 删除用户
message DeleteUserReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 修改用户
message UpdateUserReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional string name = 2;
    optional string password = 3;
    optional string nick_name = 4;
    optional string real_name = 5;
    optional google.protobuf.Timestamp birthday = 6;
    optional api.protobuf.UserGender gender = 7;
    optional string mobile = 8;
    optional string email = 9;
    optional api.protobuf.UserState state = 10;
  }
  Data data = 2;
}

// 回应 - 修改用户
message UpdateUserReply {
  bool success = 1;
  string message = 2;
}

// 回应 - 获取用户菜单
message GetUserMenuReply {
  string name = 1;
  string path = 2;
  string component = 3;
  repeated GetUserMenuReply childrens = 4;
}


// 领域模块
message Domain {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  optional uint64 id = 3;
  optional string name = 4;
  optional api.protobuf.DomainState state = 5;
}

// 请求 - 创建领域
message CreateDomainReq {
  Domain data = 1;
}

// 回应 - 创建领域
message CreateDomainReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 修改领域
message UpdateDomainReq {
  uint64 id = 1;
  message Data {
  }
  Data data = 2;
}

// 回应 - 创建领域
message UpdateDomainReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 获取领域
message GetDomainReq {
  uint64 id = 1;
}

// 请求 - 删除领域
message DeleteDomainReq {
  uint64 id = 1;
}

// 回应 - 删除领域
message DeleteDomainReply {
  bool success = 1;
  string message = 2;
}

// 权限模块
message Authority {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  optional uint64 id = 3;
  optional string name = 4;
  optional api.protobuf.AuthorityState state = 5;
}

// 请求 - 创建权限
message CreateAuthorityReq {
  Authority data = 1;
}

// 回应 - 创建权限
message CreateAuthorityReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 修改权限
message UpdateAuthorityReq {
  uint64 id = 1;
  message Data {
  }
  Data data = 2;
}

// 回应 - 创建权限
message UpdateAuthorityReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 获取权限
message GetAuthorityReq {
  uint64 id = 1;
}

// 请求 - 删除权限
message DeleteAuthorityReq {
  uint64 id = 1;
}

// 回应 - 删除权限
message DeleteAuthorityReply {
  bool success = 1;
  string message = 2;
}

// 接口模块
message Api {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  string path = 5;
  string method = 6;
  string group = 7;
  string description = 8;
}

// 请求 - 创建接口
message CreateApiReq {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  string path = 2 [(validate.rules).string = {min_len: 1, max_len: 100}];
  string method = 3 [(validate.rules).string = {min_len: 1, max_len: 10}];
  string group = 4;
  string description = 5;
}

// 回应 - 创建接口
message CreateApiReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 修改接口
message UpdateApiReq {
  uint64 id = 1;
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    string path = 2 [(validate.rules).string = {min_len: 1, max_len: 100}];
    string method = 3 [(validate.rules).string = {min_len: 1, max_len: 10}];
    string group = 4;
    string description = 5;
  }
  Data data = 2;
}

// 回应 - 创建接口
message UpdateApiReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 获取接口
message GetApiReq {
  uint64 id = 1;
}

// 请求 - 删除接口
message DeleteApiReq {
  uint64 id = 1;
}

// 回应 - 删除接口
message DeleteApiReply {
  bool success = 1;
  string message = 2;
}

// 菜单模块
message Menu {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  optional uint64 id = 3;
  optional string name = 4;
  optional uint64 parent_id = 5;
  optional string path = 6;
  optional api.protobuf.MenuHidden hidden = 7;
  optional string component = 8;
  optional int64 sort = 9;
  optional string icon = 10;
  optional string title = 11;
  optional api.protobuf.MenuKeepAlive keep_alive = 12;
  optional api.protobuf.MenuBaseMenu base_menu = 13;
  optional api.protobuf.MenuCloseTab close_tab = 14;
  repeated Menu childrens = 15;
}

// 请求 - 创建菜单
message CreateMenuReq {
  Menu data = 1;
}

// 回应 - 创建菜单
message CreateMenuReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 修改菜单
message UpdateMenuReq {
  uint64 id = 1;
  message Data {
  }
  Data data = 2;
}

// 回应 - 创建菜单
message UpdateMenuReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 获取菜单
message GetMenuReq {
  uint64 id = 1;
}

// 请求 - 删除菜单
message DeleteMenuReq {
  uint64 id = 1;
}

// 回应 - 删除菜单
message DeleteMenuReply {
  bool success = 1;
  string message = 2;
}

// 回应 - 获取树形菜单
message GetMenuTreeReq {
  uint64 id = 1;
}
