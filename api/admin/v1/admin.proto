syntax = "proto3";

package api.admin.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protobuf/enum.proto";
import "protobuf/struct.proto";

option go_package = "github.com/beiduoke/go-scaffold/api/admin/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.admin.v1";
option java_outer_classname = "adminProtoV1";

// The greeting service definition.
service Admin {
  // 登出
  rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/admin/v1/auth/logout"
      body: "*"
    };
  }
  // 登陆
  rpc Login (LoginReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/login"
      body: "auth"
    };
  }
  // 注册
  rpc Register (RegisterReq) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/register"
      body: "auth"
    };
  }

  // User 用户模块
  // 用户概述
  rpc ProfileUser (google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/profiles"
    };
  }
  
  // 用户列表
  rpc ListUser (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/users"
    };
  }
  
  // 用户列表
  rpc GetUser (GetUserReq) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/{id}"
    };
  }
  
  // 用户删除
  rpc DeleteUser (DeleteUserReq) returns (DeleteUserReply) {
    option (google.api.http) = {
      delete: "/admin/v1/users/{id}"
    };
  }
  
  // 用户修改
  rpc UpdateUser (UpdateUserReq) returns (UpdateUserReply) {
    option (google.api.http) = {
      put: "/admin/v1/users/{id}"
      body: "data"
    };
  }
}


message User {
  optional uint64 id = 1;
  optional string name = 2;
  optional string password = 3;
  optional string nick_name = 4;
  optional string real_name = 5;
  optional google.protobuf.Timestamp birthday = 6;
  optional int32 gender = 7;
  optional string mobile = 8;
  optional string email = 9;
  optional api.protobuf.UserState state = 10;
  optional google.protobuf.Timestamp created_at = 11;
  optional google.protobuf.Timestamp updated_at = 12;
  optional string authoritys = 13;
}


message Auth {
  // 用户名
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  // 密码
  string password = 2 [(validate.rules).string = {min_len: 6, max_len: 25}];
}

// 请求 - 登录
message LoginReq {
  // 领域
  string domain = 1;
  // 请求体
  Auth auth = 2 [(validate.rules).message = {required: true}];
}

// 回应 - 登录
message LoginReply {
  // 登录token
  string token = 1;
  // 过期时间
  google.protobuf.Timestamp expire_time = 2;
}

// 请求 - 注册
message RegisterReq {
  // 领域
  string domain = 1;
  // 请求体
  Auth auth = 2 [(validate.rules).message = {required: true}];
}

// 回应 - 注册
message RegisterReply {
  bool success = 1;
  string message = 2;
}

message LogoutReply {
  bool success = 1;
  string message = 2;
}

// 回应 - 用户列表
message ListUserReply {
  repeated User items = 1;
  int32 total = 2;
}

// 请求 - 获取用户
message GetUserReq {
  uint64 id = 1;
}

// 请求 - 删除用户
message DeleteUserReq {
  uint64 id = 1;
}

// 回应 - 删除用户
message DeleteUserReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 用户修改
message UpdateUserReq {
  uint64 id = 1;
  message Data {
    optional string name = 2;
    optional string password = 3;
    optional string nick_name = 4;
    optional string real_name = 5;
    optional google.protobuf.Timestamp birthday = 6;
    optional int32 gender = 7;
    optional string mobile = 8;
    optional string email = 9;
    optional api.protobuf.UserState state = 10;
  }
  Data data = 2;
}

// 回应 - 用户修改
message UpdateUserReply {
  bool success = 1;
  string message = 2;
}