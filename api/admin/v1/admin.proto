syntax = "proto3";

package api.admin.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";
import "protobuf/enum.proto";
import "protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/beiduoke/go-scaffold/api/admin/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.admin.v1";
option java_outer_classname = "adminProtoV1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "apiKey";
      value: {
        name: "Authorization";
        description: "jwt 无状态";
        type: 2;
        in: 2;
        flow: 2;
      }
    }
  };
	info: {
		title: "Scaffold API";
		version: "1.0";
		contact: {
			name: "基础架构";
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			email: "none@example.com";
		};
		license: {
			name: "BSD 3-Clause License";
			url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
		};
		extensions: {
			key: "x-something-something";
			value: {
				string_value: "yadda";
			}
		};
  };
};

// The greeting service definition.
service Admin {
  // 登出
  rpc Logout (google.protobuf.Empty) returns (LogoutReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/logout"
      body: "*"
      additional_bindings {
        get: "/admin/v1/auth/logout"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      external_docs: {
        url: "https://github.com/grpc-ecosystem/grpc-gateway";
        description: "SayHello Query";
      }
      security: {
          security_requirement: {
              key: "ApiKeyAuth";
              value: {}
          }
          security_requirement: {
              key: "OAuth2";
              value: {
                  scope: "read";
                  scope: "write";
              }
          }
      }
      extensions: {
          key: "x-irreversible";
          value: {
              bool_value: true;
          }
      }
    };
  }
  // 密码登陆
  rpc PassLogin (PassLoginReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/passLogin"
      body: "auth"
    };
  }
  // 短信登陆
  rpc SmsLogin (SmsLoginReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/smsLogin"
      body: "auth"
    };
  }
  // 邮件登陆
  rpc EmailLogin (EmailLoginReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/emailLogin"
      body: "auth"
    };
  }
  // 注册
  rpc Register (RegisterReq) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/admin/v1/auth/register"
      body: "auth"
    };
  }

  // User 用户模块
  // 当前登录用户概述
  rpc GetUserInfo (google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/info"
    };
  }
  // 当前登录用户概述
  rpc GetUserProfile (google.protobuf.Empty) returns (GetUserProfileReply) {
    option (google.api.http) = {
      get: "/admin/v1/users/profiles"
    };
  }
  // 获取用户菜单
  rpc ListUserMenu (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/users/menus"
    };
  }
  // 获取用户菜单-树形
  rpc ListUserMenuTree (google.protobuf.Empty) returns (UserMenuTreeReply) {
    option (google.api.http) = {
      get: "/admin/v1/users/menus/trees"
    };
  }
  // 当前登录用户拥有领域
  rpc ListUserDomain (google.protobuf.Empty) returns (ListUserDomainReply) {
    option (google.api.http) = {
      get: "/admin/v1/users/domains"
    };
  }
  // 当前登录用户拥有角色
  rpc ListUserAuthority (google.protobuf.Empty) returns (ListUserAuthorityReply) {
    option (google.api.http) = {
      get: "/admin/v1/users/authorities"
    };
  }
  // 列表用户
  rpc ListUser (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/users"
    };
  }
  // 创建用户
  rpc CreateUser (CreateUserReq) returns (CreateUserReply) {
    option (google.api.http) = {
      post: "/admin/v1/users"
      body: "*"
    };
  }
  // 获取用户
  rpc GetUser (GetUserReq) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/{id}"
    };
  }
  // 修改用户
  rpc UpdateUser (UpdateUserReq) returns (UpdateUserReply) {
    option (google.api.http) = {
      put: "/admin/v1/users/{id}"
      body: "data"
    };
  }
  // 删除用户
  rpc DeleteUser (DeleteUserReq) returns (DeleteUserReply) {
    option (google.api.http) = {
      delete: "/admin/v1/users/{id}"
    };
  }
  // 绑定用户领域
  rpc HandleUserDomain (HandleUserDomainReq) returns (HandleUserDomainReply) {
    option (google.api.http) = {
      post: "/admin/v1/users/{id}/domains"
      body: "data"
    };
  }
  // 绑定用户领域权限
  rpc HandleUserDomainAuthority (HandleUserDomainAuthorityReq) returns (HandleUserDomainAuthorityReply) {
    option (google.api.http) = {
      post: "/admin/v1/users/{id}/domainAuthorities"
      body: "data"
    };
  }

  // 领域模块
  // 登陆领域/租户
  rpc LoginDomain (LoginDomainReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/admin/v1/domains/login"
      body: "auth"
      additional_bindings {
        patch: "/admin/v1/domains/login/{domain}"
        body: "auth"
      }
    };
  }
  // 注册领域/租户
  rpc RegisterDomain (RegisterDomainReq) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/admin/v1/domains/register"
      body: "auth"
    };
  }
  // 列表领域
  rpc ListDomain (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/domains"
    };
  }
  // 创建领域
  rpc CreateDomain (CreateDomainReq) returns (CreateDomainReply) {
    option (google.api.http) = {
      post: "/admin/v1/domains"
      body: "*"
    };
  }
  // 获取领域
  rpc GetDomain (GetDomainReq) returns (Domain) {
    option (google.api.http) = {
      get: "/admin/v1/domains/{id}"
    };
  }
  // 修改领域
  rpc UpdateDomain (UpdateDomainReq) returns (UpdateDomainReply) {
    option (google.api.http) = {
      put: "/admin/v1/domains/{id}"
      body: "data"
    };
  }
  // 删除领域
  rpc DeleteDomain (DeleteDomainReq) returns (DeleteDomainReply) {
    option (google.api.http) = {
      delete: "/admin/v1/domains/{id}"
    };
  }

  // 权限角色模块
  // 列表权限角色
  rpc ListAuthority (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/authorities"
    };
  }
  // 创建权限角色
  rpc CreateAuthority (CreateAuthorityReq) returns (CreateAuthorityReply) {
    option (google.api.http) = {
      post: "/admin/v1/authorities"
      body: "*"
    };
  }
  // 获取权限角色
  rpc GetAuthority (GetAuthorityReq) returns (Authority) {
    option (google.api.http) = {
      get: "/admin/v1/authorities/{id}"
    };
  }
  // 修改权限角色
  rpc UpdateAuthority (UpdateAuthorityReq) returns (UpdateAuthorityReply) {
    option (google.api.http) = {
      put: "/admin/v1/authorities/{id}"
      body: "data"
    };
  }
  // 删除权限角色
  rpc DeleteAuthority (DeleteAuthorityReq) returns (DeleteAuthorityReply) {
    option (google.api.http) = {
      delete: "/admin/v1/authorities/{id}"
    };
  }
  // 处理权限角色菜单
  rpc HandleAuthorityMenu (HandleAuthorityMenuReq) returns (HandleAuthorityMenuReply) {
    option (google.api.http) = {
      post: "/admin/v1/authorities/{id}/menus"
      body: "data"
    };
  }
  // 处理权限角色接口
  rpc HandleAuthorityApi (HandleAuthorityApiReq) returns (HandleAuthorityApiReply) {
    option (google.api.http) = {
      post: "/admin/v1/authorities/{id}/apis"
      body: "data"
    };
  }

  // 接口模块
  // 列表接口
  rpc ListApi (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/apis"
    };
  }
  // 创建接口
  rpc CreateApi (CreateApiReq) returns (CreateApiReply) {
    option (google.api.http) = {
      post: "/admin/v1/apis"
      body: "*"
    };
  }
  // 获取接口
  rpc GetApi (GetApiReq) returns (Api) {
    option (google.api.http) = {
      get: "/admin/v1/apis/{id}"
    };
  }
  // 修改接口
  rpc UpdateApi (UpdateApiReq) returns (UpdateApiReply) {
    option (google.api.http) = {
      put: "/admin/v1/apis/{id}"
      body: "data"
    };
  }
  // 删除接口
  rpc DeleteApi (DeleteApiReq) returns (DeleteApiReply) {
    option (google.api.http) = {
      delete: "/admin/v1/apis/{id}"
    };
  }
  // 菜单模块
  // 列表菜单
  rpc ListMenu (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/menus"
    };
  }
  // 创建菜单
  rpc CreateMenu (CreateMenuReq) returns (CreateMenuReply) {
    option (google.api.http) = {
      post: "/admin/v1/menus"
      body: "*"
    };
  }
  // 获取树形菜单
  rpc ListMenuTree (ListMenuTreeReq) returns (ListMenuTreeReply) {
    option (google.api.http) = {
      get: "/admin/v1/menus/{parentId}/trees"
    };
  }
  // 获取菜单
  rpc GetMenu (GetMenuReq) returns (Menu) {
    option (google.api.http) = {
      get: "/admin/v1/menus/{id}"
    };
  }
  // 修改菜单
  rpc UpdateMenu (UpdateMenuReq) returns (UpdateMenuReply) {
    option (google.api.http) = {
      put: "/admin/v1/menus/{id}"
      body: "data"
    };
  }
  // 删除菜单
  rpc DeleteMenu (DeleteMenuReq) returns (DeleteMenuReply) {
    option (google.api.http) = {
      delete: "/admin/v1/menus/{id}"
    };
  }

  // 列表部门
  rpc ListDepartment (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/departments"
    };
  }
  // 创建部门
  rpc CreateDepartment (CreateDepartmentReq) returns (CreateDepartmentReply) {
    option (google.api.http) = {
      post: "/admin/v1/departments"
      body: "*"
    };
  }
  // 获取部门
  rpc GetDepartment (GetDepartmentReq) returns (Department) {
    option (google.api.http) = {
      get: "/admin/v1/departments/{id}"
    };
  }
  // 修改部门
  rpc UpdateDepartment (UpdateDepartmentReq) returns (UpdateDepartmentReply) {
    option (google.api.http) = {
      put: "/admin/v1/departments/{id}"
      body: "data"
    };
  }
  // 删除部门
  rpc DeleteDepartment (DeleteDepartmentReq) returns (DeleteDepartmentReply) {
    option (google.api.http) = {
      delete: "/admin/v1/departments/{id}"
    };
  }
  // 获取树形部门
  rpc ListDepartmentTree (ListDepartmentTreeReq) returns (ListDepartmentTreeReply) {
    option (google.api.http) = {
      get: "/admin/v1/departments/{parentId}/trees"
    };
  }
}

message Auth {
  // 用户名
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  // 密码
  string password = 2 [(validate.rules).string = {min_len: 6, max_len: 25}];
}

// 回应 - 登录
message LoginReply {
  // 登录token
  string token = 1;
  // 过期时间
  google.protobuf.Timestamp expire_time = 2;
}

// 回应 - 注册
message RegisterReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 回应 - 退出登录
message LogoutReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 密码登录
message PassLoginReq {
  message PassField {
    string account = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 28}];
  }
  // 请求体
  PassField auth = 1 [(validate.rules).message = {required: true}];
}

// 请求 - 短信登录
message SmsLoginReq {
  message SmsField {
    string mobile = 1 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
    string code = 2 [(validate.rules).string.pattern = "^[0-9]{6}$"];
  }
  // 请求体
  SmsField auth = 1 [(validate.rules).message = {required: true}];
}

// 请求 - 邮件登录
message EmailLoginReq {
  message EmailField {
    string email = 1 [(validate.rules).string.email = true];
    string code = 2 [(validate.rules).string.pattern = "^[0-9]{6}$"];
  }
  // 请求体
  EmailField auth = 1 [(validate.rules).message = {required: true}];
}

// 请求 - 注册
message RegisterReq {
  // 请求体
  Auth auth = 1 [(validate.rules).message = {required: true}];
}

// 用户模块
message User {
  uint64 id = 1;
  string name = 2;
  string nick_name = 4;
  string real_name = 5;
  string birthday = 6;
  api.protobuf.UserGender gender = 7; 
  string mobile = 8;
  string email = 9;
  string avatar = 10;
  api.protobuf.UserState state = 11;
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
}

// 回应 - 用户概况详情
message GetUserProfileReply {
  User user = 1;
  repeated Authority authorities = 2;
}

// 回应 - 用户领域
message ListUserDomainReply {
  repeated Domain items = 1;
  int32 total = 2;
}

// 回应 - 用户权限角色
message ListUserAuthorityReply {
  repeated Authority items = 1;
  int32 total = 2;
}

// 回应 - 列表用户 - 未使用
message ListUserReply {
  repeated User items = 1;
  int32 total = 2;
}

// 请求 - 创建用户
message CreateUserReq {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional string avatar = 2;
  optional string password = 3 [(validate.rules).string = {min_len: 6, max_len: 28}];
  optional string nick_name = 4 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional string real_name = 5 [(validate.rules).string = {min_len: 2, max_len: 10}];
  optional string birthday = 6 [(validate.rules).string.pattern = "^[1-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$"];
  optional api.protobuf.UserGender gender = 7 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  string mobile = 8 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
  optional string email = 9 [(validate.rules).string.email = true];
  api.protobuf.UserState state = 10 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
}

// 回应 - 创建用户
message CreateUserReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 绑定用户领域
message HandleUserDomainReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    repeated uint64 domain_ids = 11 [(validate.rules).repeated = {min_items: 1, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 2;
}

// 回应 - 绑定用户领域
message HandleUserDomainReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 绑定用户领域权限
message HandleUserDomainAuthorityReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    uint64 domain_id = 2 [(validate.rules).uint64 = {gt: 0}]; 
    repeated uint64 authority_ids = 11 [(validate.rules).repeated = {min_items: 1, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 3;
}

// 回应 - 绑定用户领域权限
message HandleUserDomainAuthorityReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 获取用户
message GetUserReq {
  uint64 id = 1  [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除用户
message DeleteUserReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除用户
message DeleteUserReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 修改用户
message UpdateUserReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string password = 3 [(validate.rules).string = {min_len: 6, max_len: 28}];
    optional string nick_name = 4 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string real_name = 5 [(validate.rules).string = {min_len: 2, max_len: 10}];
    // x must be less than the Unix Epoch
    optional string birthday = 6 [(validate.rules).string.pattern = "^[1-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$"];
    optional api.protobuf.UserGender gender = 7 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    string mobile = 8 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
    optional string email = 9 [(validate.rules).string.email = true];
    api.protobuf.UserState state = 10 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    optional string avatar = 11;
  }
  Data data = 2;
}

// 回应 - 修改用户
message UpdateUserReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 回应 - 获取用户菜单
message UserMenuTreeReply {
  int32 total = 1;
  repeated Menu items = 2;
}


// 领域模块
message Domain {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  uint64 parent_id = 5;
  int32 sort = 6;
  api.protobuf.DomainState state = 7;
  uint64 default_authority_id = 8;
}

// 请求 - 领域登录
message LoginDomainReq {
  // 领域
  string domain = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
  // 请求体
  Auth auth = 2 [(validate.rules).message = {required: true}];
}

// 请求 - 领域注册
message RegisterDomainReq {
  // 领域
  string domain = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
  // 请求体
  Auth auth = 2 [(validate.rules).message = {required: true}];
}

// 请求 - 创建领域
message CreateDomainReq {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
  optional int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
  optional api.protobuf.DomainState state = 4 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  optional uint64 default_authority_id = 5 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 创建领域
message CreateDomainReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 修改领域
message UpdateDomainReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
    optional int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
    optional api.protobuf.DomainState state = 4 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    optional uint64 default_authority_id = 5 [(validate.rules).uint64 = {gt: 0}];
  }
  Data data = 2;
}

// 回应 - 创建领域
message UpdateDomainReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 获取领域
message GetDomainReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除领域
message DeleteDomainReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除领域
message DeleteDomainReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 权限角色模块
message Authority {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  uint64 parent_id = 5;
  string default_router = 6;
  int32 sort = 7;
  api.protobuf.AuthorityState state = 8;
  string remarks = 9;
}

// 请求 - 创建权限角色
message CreateAuthorityReq {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
  optional string default_router = 3 [(validate.rules).string = {min_len: 1, max_len: 100}];
  optional int32 sort = 4 [(validate.rules).int32 = {gte: 0}];
  api.protobuf.AuthorityState state = 5 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  optional string remarks = 6 [(validate.rules).string = {min_len: 1, max_len: 1000}];
}

// 回应 - 创建权限角色
message CreateAuthorityReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 修改权限角色
message UpdateAuthorityReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
    optional string default_router = 3 [(validate.rules).string = {min_len: 1, max_len: 100}];
    optional int32 sort = 4 [(validate.rules).int32 = {gte: 0}];
    api.protobuf.AuthorityState state = 5 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    optional string remarks = 6 [(validate.rules).string = {min_len: 1, max_len: 1000}];
  }
  Data data = 2;
}

// 回应 - 创建权限角色
message UpdateAuthorityReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 获取权限角色
message GetAuthorityReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除权限角色
message DeleteAuthorityReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除权限角色
message DeleteAuthorityReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 处理权限角色菜单
message HandleAuthorityMenuReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Menu {
    uint64 menu_id = 1 [(validate.rules).uint64 = {gt: 0}];
    repeated uint64 menu_parameter_ids = 2 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
    repeated uint64 menu_button_ids = 3 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  }
  message Data {
    repeated Menu menus = 1;
  }
  Data data = 2;
}

// 回应 - 处理权限角色菜单
message HandleAuthorityMenuReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 处理权限角色接口
message HandleAuthorityApiReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    repeated uint64 api_ids = 1;
  }
  Data data = 2;
}

// 回应 - 处理权限角色接口
message HandleAuthorityApiReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 接口模块
message Api {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  string path = 5;
  string method = 6;
  string group = 7;
  string description = 8;
  string operation = 9;
}

// 请求 - 创建接口
message CreateApiReq {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  string path = 2 [(validate.rules).string = {min_len: 1, max_len: 100}];
  string method = 3 [(validate.rules).string = {in: ["*", "GET", "POST", "Head", "PUT", "PATCH", "DELETE", "OPTIONS", "CONNECT", "TRACE"]}];
  optional string group = 4 [(validate.rules).string = {min_len: 1, max_len: 100}];
  optional string description = 5 [(validate.rules).string = {min_len: 1, max_len: 1000}];
  optional string operation = 6 [(validate.rules).string = {min_len: 1, max_len: 100}];
}

// 回应 - 创建接口
message CreateApiReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 修改接口
message UpdateApiReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    string path = 2 [(validate.rules).string = {min_len: 1, max_len: 100}];
    string method = 3 [(validate.rules).string = {in: ["*", "GET", "POST", "Head", "PUT", "PATCH", "DELETE", "OPTIONS", "CONNECT", "TRACE"]}];
    optional string group = 4 [(validate.rules).string = {min_len: 1, max_len: 100}];
    optional string description = 5 [(validate.rules).string = {min_len: 1, max_len: 1000}];
    optional string operation = 6 [(validate.rules).string = {min_len: 1, max_len: 100}];
  }
  Data data = 2;
}

// 回应 - 创建接口
message UpdateApiReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 获取接口
message GetApiReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除接口
message DeleteApiReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除接口
message DeleteApiReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 菜单模块
message Menu {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  uint64 parent_id = 5;
  string path = 6;
  api.protobuf.MenuHidden hidden = 7;
  string component = 8;
  int32 sort = 9;
  string icon = 10;
  string title = 11;
  api.protobuf.MenuKeepAlive keep_alive = 12;
  api.protobuf.MenuBaseMenu base_menu = 13;
  api.protobuf.MenuCloseTab close_tab = 14;
  repeated Menu children = 15;
  repeated MenuParameter parameters = 16;
  repeated MenuButton buttons = 17;
}

message MenuButton {
  string name = 1;
  string remarks = 2;
}

message MenuParameter {
  api.protobuf.MenuParameterType type = 1;
  string name = 2;
  string value = 3;
}

// 请求 - 创建菜单
message CreateMenuReq {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
  uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
  string path = 3 [(validate.rules).string = {min_len: 1, max_len: 100}];
  api.protobuf.MenuHidden hidden = 4 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  string component = 5 [(validate.rules).string = {min_len: 1, max_len: 100}];
  int32 sort = 6 [(validate.rules).int32 = {gte: 0}];
  string icon = 7 [(validate.rules).string = {min_len: 1, max_len: 100}];
  string title = 8 [(validate.rules).string = {min_len: 1, max_len: 100}];
  api.protobuf.MenuKeepAlive keep_alive = 9 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  api.protobuf.MenuBaseMenu base_menu = 10 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  api.protobuf.MenuCloseTab close_tab = 11 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  repeated MenuParameter parameters = 12;
  repeated MenuButton buttons = 13;
}

// 回应 - 创建菜单
message CreateMenuReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 修改菜单
message UpdateMenuReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
    uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
    string path = 3 [(validate.rules).string = {min_len: 1, max_len: 100}];
    api.protobuf.MenuHidden hidden = 4 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    string component = 5 [(validate.rules).string = {min_len: 1, max_len: 100}];
    int32 sort = 6 [(validate.rules).int32 = {gte: 0}];
    string icon = 7 [(validate.rules).string = {min_len: 1, max_len: 100}];
    string title = 8 [(validate.rules).string = {min_len: 1, max_len: 100}];
    api.protobuf.MenuKeepAlive keep_alive = 9 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    api.protobuf.MenuBaseMenu base_menu = 10 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    api.protobuf.MenuCloseTab close_tab = 11 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    repeated MenuParameter parameters = 12;
    repeated MenuButton buttons = 13;
  }
  Data data = 2;
}

// 回应 - 创建菜单
message UpdateMenuReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 获取菜单
message GetMenuReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除菜单
message DeleteMenuReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除菜单
message DeleteMenuReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 获取树形菜单
message ListMenuTreeReq {
  uint64 parentId = 1 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取树形菜单
message ListMenuTreeReply {
  int32 total = 1;
  repeated Menu items = 2;
}

// 部门模块
message Department {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  uint64 parent_id = 5;
  int32 sort = 6;
  string remarks = 7;
  api.protobuf.DepartmentState state = 8;
  repeated Department children = 9;
}

// 请求 - 创建部门
message CreateDepartmentReq {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
  int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
  api.protobuf.DepartmentState state = 4 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
  optional string remarks = 5 [(validate.rules).string = {min_len: 1, max_len: 1000}];
}

// 回应 - 创建部门
message CreateDepartmentReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 修改部门
message UpdateDepartmentReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
    int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
    api.protobuf.DepartmentState state = 4 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
    optional string remarks = 5 [(validate.rules).string = {min_len: 1, max_len: 1000}];
  }
  Data data = 2;
}

// 回应 - 创建部门
message UpdateDepartmentReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 获取部门
message GetDepartmentReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除部门
message DeleteDepartmentReq {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除部门
message DeleteDepartmentReply {
  bool success = 1;
  string message = 2;
  google.protobuf.Any data = 3;
}

// 请求 - 获取树形部门
message ListDepartmentTreeReq {
  uint64 parentId = 1 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取树形部门
message ListDepartmentTreeReply {
  int32 total = 1;
  repeated Department items = 2;
}