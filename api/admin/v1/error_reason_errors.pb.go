// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 400
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsSystemNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_NOT_FOUND.String() && e.Code == 400
}

func ErrorSystemNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_SYSTEM_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 400
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserLoginFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_LOGIN_FAIL.String() && e.Code == 400
}

func ErrorUserLoginFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_LOGIN_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserRegisterFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_REGISTER_FAIL.String() && e.Code == 400
}

func ErrorUserRegisterFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_REGISTER_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_CREATE_FAIL.String() && e.Code == 400
}

func ErrorUserCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserIdNull(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ID_NULL.String() && e.Code == 400
}

func ErrorUserIdNull(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_ID_NULL.String(), fmt.Sprintf(format, args...))
}

func IsUserUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorUserUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DELETE_FAIL.String() && e.Code == 400
}

func ErrorUserDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserHandleDomainFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_HANDLE_DOMAIN_FAIL.String() && e.Code == 400
}

func ErrorUserHandleDomainFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_HANDLE_DOMAIN_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserHandleDomainAuthorityFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_HANDLE_DOMAIN_AUTHORITY_FAIL.String() && e.Code == 400
}

func ErrorUserHandleDomainAuthorityFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_HANDLE_DOMAIN_AUTHORITY_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserDomainFindFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DOMAIN_FIND_FAIL.String() && e.Code == 400
}

func ErrorUserDomainFindFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_DOMAIN_FIND_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserAuthorityFindFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_AUTHORITY_FIND_FAIL.String() && e.Code == 400
}

func ErrorUserAuthorityFindFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_AUTHORITY_FIND_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDomainNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_NOT_FOUND.String() && e.Code == 400
}

func ErrorDomainNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDomainCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_CREATE_FAIL.String() && e.Code == 400
}

func ErrorDomainCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDomainUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorDomainUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDomainDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_DELETE_FAIL.String() && e.Code == 400
}

func ErrorDomainDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsAuthorityNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTHORITY_NOT_FOUND.String() && e.Code == 400
}

func ErrorAuthorityNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTHORITY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAuthorityCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTHORITY_CREATE_FAIL.String() && e.Code == 400
}

func ErrorAuthorityCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTHORITY_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsAuthorityUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTHORITY_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorAuthorityUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTHORITY_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsAuthorityDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTHORITY_DELETE_FAIL.String() && e.Code == 400
}

func ErrorAuthorityDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTHORITY_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsAuthorityHandleMenuFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTHORITY_HANDLE_MENU_FAIL.String() && e.Code == 400
}

func ErrorAuthorityHandleMenuFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTHORITY_HANDLE_MENU_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsAuthorityHandleApiFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTHORITY_HANDLE_API_FAIL.String() && e.Code == 400
}

func ErrorAuthorityHandleApiFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTHORITY_HANDLE_API_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsMenuNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_NOT_FOUND.String() && e.Code == 400
}

func ErrorMenuNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsMenuCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_CREATE_FAIL.String() && e.Code == 400
}

func ErrorMenuCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsMenuUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorMenuUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsMenuDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_DELETE_FAIL.String() && e.Code == 400
}

func ErrorMenuDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsApiNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_API_NOT_FOUND.String() && e.Code == 400
}

func ErrorApiNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_API_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsApiCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_API_CREATE_FAIL.String() && e.Code == 400
}

func ErrorApiCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_API_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsApiUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_API_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorApiUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_API_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsApiDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_API_DELETE_FAIL.String() && e.Code == 400
}

func ErrorApiDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_API_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDepartmentNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPARTMENT_NOT_FOUND.String() && e.Code == 400
}

func ErrorDepartmentNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPARTMENT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDepartmentCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPARTMENT_CREATE_FAIL.String() && e.Code == 400
}

func ErrorDepartmentCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPARTMENT_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDepartmentUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPARTMENT_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorDepartmentUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPARTMENT_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDepartmentDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPARTMENT_DELETE_FAIL.String() && e.Code == 400
}

func ErrorDepartmentDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPARTMENT_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}
