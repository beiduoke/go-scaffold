// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.21.5
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminCreateApi = "/api.admin.v1.Admin/CreateApi"
const OperationAdminCreateAuthority = "/api.admin.v1.Admin/CreateAuthority"
const OperationAdminCreateDepartment = "/api.admin.v1.Admin/CreateDepartment"
const OperationAdminCreateDomain = "/api.admin.v1.Admin/CreateDomain"
const OperationAdminCreateMenu = "/api.admin.v1.Admin/CreateMenu"
const OperationAdminCreateUser = "/api.admin.v1.Admin/CreateUser"
const OperationAdminDeleteApi = "/api.admin.v1.Admin/DeleteApi"
const OperationAdminDeleteAuthority = "/api.admin.v1.Admin/DeleteAuthority"
const OperationAdminDeleteDepartment = "/api.admin.v1.Admin/DeleteDepartment"
const OperationAdminDeleteDomain = "/api.admin.v1.Admin/DeleteDomain"
const OperationAdminDeleteMenu = "/api.admin.v1.Admin/DeleteMenu"
const OperationAdminDeleteUser = "/api.admin.v1.Admin/DeleteUser"
const OperationAdminEmailLogin = "/api.admin.v1.Admin/EmailLogin"
const OperationAdminGetApi = "/api.admin.v1.Admin/GetApi"
const OperationAdminGetAuthority = "/api.admin.v1.Admin/GetAuthority"
const OperationAdminGetDepartment = "/api.admin.v1.Admin/GetDepartment"
const OperationAdminGetDomain = "/api.admin.v1.Admin/GetDomain"
const OperationAdminGetMenu = "/api.admin.v1.Admin/GetMenu"
const OperationAdminGetUser = "/api.admin.v1.Admin/GetUser"
const OperationAdminGetUserInfo = "/api.admin.v1.Admin/GetUserInfo"
const OperationAdminGetUserProfile = "/api.admin.v1.Admin/GetUserProfile"
const OperationAdminHandleAuthorityApi = "/api.admin.v1.Admin/HandleAuthorityApi"
const OperationAdminHandleAuthorityMenu = "/api.admin.v1.Admin/HandleAuthorityMenu"
const OperationAdminHandleUserDomain = "/api.admin.v1.Admin/HandleUserDomain"
const OperationAdminHandleUserDomainAuthority = "/api.admin.v1.Admin/HandleUserDomainAuthority"
const OperationAdminListApi = "/api.admin.v1.Admin/ListApi"
const OperationAdminListAuthority = "/api.admin.v1.Admin/ListAuthority"
const OperationAdminListAuthorityMenu = "/api.admin.v1.Admin/ListAuthorityMenu"
const OperationAdminListDepartment = "/api.admin.v1.Admin/ListDepartment"
const OperationAdminListDepartmentTree = "/api.admin.v1.Admin/ListDepartmentTree"
const OperationAdminListDomain = "/api.admin.v1.Admin/ListDomain"
const OperationAdminListMenu = "/api.admin.v1.Admin/ListMenu"
const OperationAdminListMenuTree = "/api.admin.v1.Admin/ListMenuTree"
const OperationAdminListUser = "/api.admin.v1.Admin/ListUser"
const OperationAdminListUserAuthority = "/api.admin.v1.Admin/ListUserAuthority"
const OperationAdminListUserAuthorityMenuTree = "/api.admin.v1.Admin/ListUserAuthorityMenuTree"
const OperationAdminListUserAuthorityPermission = "/api.admin.v1.Admin/ListUserAuthorityPermission"
const OperationAdminListUserDomain = "/api.admin.v1.Admin/ListUserDomain"
const OperationAdminLoginDomain = "/api.admin.v1.Admin/LoginDomain"
const OperationAdminLogout = "/api.admin.v1.Admin/Logout"
const OperationAdminMiddlePassLogin = "/api.admin.v1.Admin/MiddlePassLogin"
const OperationAdminPassLogin = "/api.admin.v1.Admin/PassLogin"
const OperationAdminRegister = "/api.admin.v1.Admin/Register"
const OperationAdminRegisterDomain = "/api.admin.v1.Admin/RegisterDomain"
const OperationAdminSmsLogin = "/api.admin.v1.Admin/SmsLogin"
const OperationAdminUpdateApi = "/api.admin.v1.Admin/UpdateApi"
const OperationAdminUpdateAuthority = "/api.admin.v1.Admin/UpdateAuthority"
const OperationAdminUpdateDepartment = "/api.admin.v1.Admin/UpdateDepartment"
const OperationAdminUpdateDomain = "/api.admin.v1.Admin/UpdateDomain"
const OperationAdminUpdateMenu = "/api.admin.v1.Admin/UpdateMenu"
const OperationAdminUpdateUser = "/api.admin.v1.Admin/UpdateUser"

type AdminHTTPServer interface {
	CreateApi(context.Context, *CreateApiReq) (*CreateApiReply, error)
	CreateAuthority(context.Context, *CreateAuthorityReq) (*CreateAuthorityReply, error)
	CreateDepartment(context.Context, *CreateDepartmentReq) (*CreateDepartmentReply, error)
	CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error)
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	DeleteApi(context.Context, *DeleteApiReq) (*DeleteApiReply, error)
	DeleteAuthority(context.Context, *DeleteAuthorityReq) (*DeleteAuthorityReply, error)
	DeleteDepartment(context.Context, *DeleteDepartmentReq) (*DeleteDepartmentReply, error)
	DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error)
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error)
	GetApi(context.Context, *GetApiReq) (*Api, error)
	GetAuthority(context.Context, *GetAuthorityReq) (*Authority, error)
	GetDepartment(context.Context, *GetDepartmentReq) (*Department, error)
	GetDomain(context.Context, *GetDomainReq) (*Domain, error)
	GetMenu(context.Context, *GetMenuReq) (*Menu, error)
	GetUser(context.Context, *GetUserReq) (*User, error)
	GetUserInfo(context.Context, *emptypb.Empty) (*User, error)
	GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error)
	HandleAuthorityApi(context.Context, *HandleAuthorityApiReq) (*HandleAuthorityApiReply, error)
	HandleAuthorityMenu(context.Context, *HandleAuthorityMenuReq) (*HandleAuthorityMenuReply, error)
	HandleUserDomain(context.Context, *HandleUserDomainReq) (*HandleUserDomainReply, error)
	HandleUserDomainAuthority(context.Context, *HandleUserDomainAuthorityReq) (*HandleUserDomainAuthorityReply, error)
	ListApi(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListAuthority(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListAuthorityMenu(context.Context, *ListAuthorityMenuReq) (*ListAuthorityMenuReply, error)
	ListDepartment(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListDepartmentTree(context.Context, *ListDepartmentTreeReq) (*ListDepartmentTreeReply, error)
	ListDomain(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error)
	ListUser(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListUserAuthority(context.Context, *emptypb.Empty) (*ListUserAuthorityReply, error)
	ListUserAuthorityMenuTree(context.Context, *ListUserAuthorityMenuTreeReq) (*ListUserAuthorityMenuTreeReply, error)
	ListUserAuthorityPermission(context.Context, *ListUserAuthorityPermissionReq) (*ListUserAuthorityPermissionReply, error)
	ListUserDomain(context.Context, *emptypb.Empty) (*ListUserDomainReply, error)
	LoginDomain(context.Context, *LoginDomainReq) (*LoginReply, error)
	Logout(context.Context, *emptypb.Empty) (*LogoutReply, error)
	MiddlePassLogin(context.Context, *PassLoginReq) (*LoginReply, error)
	PassLogin(context.Context, *PassLoginReq) (*LoginReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	RegisterDomain(context.Context, *RegisterDomainReq) (*RegisterReply, error)
	SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error)
	UpdateApi(context.Context, *UpdateApiReq) (*UpdateApiReply, error)
	UpdateAuthority(context.Context, *UpdateAuthorityReq) (*UpdateAuthorityReply, error)
	UpdateDepartment(context.Context, *UpdateDepartmentReq) (*UpdateDepartmentReply, error)
	UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/auth/logout", _Admin_Logout0_HTTP_Handler(srv))
	r.POST("/admin/v1/auth/logout", _Admin_Logout1_HTTP_Handler(srv))
	r.POST("/admin/v1/auth/middlePassLogin", _Admin_MiddlePassLogin0_HTTP_Handler(srv))
	r.POST("/admin/v1/auth/passLogin", _Admin_PassLogin0_HTTP_Handler(srv))
	r.POST("/admin/v1/auth/smsLogin", _Admin_SmsLogin0_HTTP_Handler(srv))
	r.POST("/admin/v1/auth/emailLogin", _Admin_EmailLogin0_HTTP_Handler(srv))
	r.POST("/admin/v1/auth/register", _Admin_Register0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/info", _Admin_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/profiles", _Admin_GetUserProfile0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/domains", _Admin_ListUserDomain0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/authorities", _Admin_ListUserAuthority0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/menus/trees", _Admin_ListUserAuthorityMenuTree0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/authorities/{authority_id}/menus/trees", _Admin_ListUserAuthorityMenuTree1_HTTP_Handler(srv))
	r.GET("/admin/v1/users/permissions", _Admin_ListUserAuthorityPermission0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/authorities/{authority_id}/permissions", _Admin_ListUserAuthorityPermission1_HTTP_Handler(srv))
	r.GET("/admin/v1/users", _Admin_ListUser0_HTTP_Handler(srv))
	r.POST("/admin/v1/users", _Admin_CreateUser0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/{id}", _Admin_GetUser0_HTTP_Handler(srv))
	r.PUT("/admin/v1/users/{id}", _Admin_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/users/{id}", _Admin_DeleteUser0_HTTP_Handler(srv))
	r.POST("/admin/v1/users/{id}/domains", _Admin_HandleUserDomain0_HTTP_Handler(srv))
	r.POST("/admin/v1/users/{id}/domainAuthorities", _Admin_HandleUserDomainAuthority0_HTTP_Handler(srv))
	r.PATCH("/admin/v1/domains/login/{domain}", _Admin_LoginDomain0_HTTP_Handler(srv))
	r.POST("/admin/v1/domains/login", _Admin_LoginDomain1_HTTP_Handler(srv))
	r.POST("/admin/v1/domains/register", _Admin_RegisterDomain0_HTTP_Handler(srv))
	r.GET("/admin/v1/domains", _Admin_ListDomain0_HTTP_Handler(srv))
	r.POST("/admin/v1/domains", _Admin_CreateDomain0_HTTP_Handler(srv))
	r.GET("/admin/v1/domains/{id}", _Admin_GetDomain0_HTTP_Handler(srv))
	r.PUT("/admin/v1/domains/{id}", _Admin_UpdateDomain0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/domains/{id}", _Admin_DeleteDomain0_HTTP_Handler(srv))
	r.GET("/admin/v1/authorities", _Admin_ListAuthority0_HTTP_Handler(srv))
	r.POST("/admin/v1/authorities", _Admin_CreateAuthority0_HTTP_Handler(srv))
	r.GET("/admin/v1/authorities/{id}", _Admin_GetAuthority0_HTTP_Handler(srv))
	r.PUT("/admin/v1/authorities/{id}", _Admin_UpdateAuthority0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/authorities/{id}", _Admin_DeleteAuthority0_HTTP_Handler(srv))
	r.GET("/admin/v1/authorities/{id}/menus", _Admin_ListAuthorityMenu0_HTTP_Handler(srv))
	r.POST("/admin/v1/authorities/{id}/menus", _Admin_HandleAuthorityMenu0_HTTP_Handler(srv))
	r.POST("/admin/v1/authorities/{id}/apis", _Admin_HandleAuthorityApi0_HTTP_Handler(srv))
	r.GET("/admin/v1/apis", _Admin_ListApi0_HTTP_Handler(srv))
	r.POST("/admin/v1/apis", _Admin_CreateApi0_HTTP_Handler(srv))
	r.GET("/admin/v1/apis/{id}", _Admin_GetApi0_HTTP_Handler(srv))
	r.PUT("/admin/v1/apis/{id}", _Admin_UpdateApi0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/apis/{id}", _Admin_DeleteApi0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus", _Admin_ListMenu0_HTTP_Handler(srv))
	r.POST("/admin/v1/menus", _Admin_CreateMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/{parentId}/trees", _Admin_ListMenuTree0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/{id}", _Admin_GetMenu0_HTTP_Handler(srv))
	r.PUT("/admin/v1/menus/{id}", _Admin_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/menus/{id}", _Admin_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/departments", _Admin_ListDepartment0_HTTP_Handler(srv))
	r.POST("/admin/v1/departments", _Admin_CreateDepartment0_HTTP_Handler(srv))
	r.GET("/admin/v1/departments/{id}", _Admin_GetDepartment0_HTTP_Handler(srv))
	r.PUT("/admin/v1/departments/{id}", _Admin_UpdateDepartment0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/departments/{id}", _Admin_DeleteDepartment0_HTTP_Handler(srv))
	r.GET("/admin/v1/departments/{parentId}/trees", _Admin_ListDepartmentTree0_HTTP_Handler(srv))
}

func _Admin_Logout0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_Logout1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_MiddlePassLogin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PassLoginReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminMiddlePassLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MiddlePassLogin(ctx, req.(*PassLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_PassLogin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PassLoginReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminPassLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PassLogin(ctx, req.(*PassLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_SmsLogin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SmsLoginReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSmsLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SmsLogin(ctx, req.(*SmsLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_EmailLogin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmailLoginReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminEmailLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EmailLogin(ctx, req.(*EmailLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_Register0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetUserInfo0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetUserProfile0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUserDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUserDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserDomain(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUserAuthority0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUserAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserAuthority(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserAuthorityReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUserAuthorityMenuTree0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserAuthorityMenuTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUserAuthorityMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserAuthorityMenuTree(ctx, req.(*ListUserAuthorityMenuTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserAuthorityMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUserAuthorityMenuTree1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserAuthorityMenuTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUserAuthorityMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserAuthorityMenuTree(ctx, req.(*ListUserAuthorityMenuTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserAuthorityMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUserAuthorityPermission0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserAuthorityPermissionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUserAuthorityPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserAuthorityPermission(ctx, req.(*ListUserAuthorityPermissionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserAuthorityPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUserAuthorityPermission1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserAuthorityPermissionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUserAuthorityPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserAuthorityPermission(ctx, req.(*ListUserAuthorityPermissionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserAuthorityPermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_HandleUserDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleUserDomainReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminHandleUserDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleUserDomain(ctx, req.(*HandleUserDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleUserDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_HandleUserDomainAuthority0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleUserDomainAuthorityReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminHandleUserDomainAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleUserDomainAuthority(ctx, req.(*HandleUserDomainAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleUserDomainAuthorityReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_LoginDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginDomainReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminLoginDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginDomain(ctx, req.(*LoginDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_LoginDomain1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginDomainReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminLoginDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginDomain(ctx, req.(*LoginDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_RegisterDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterDomainReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminRegisterDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterDomain(ctx, req.(*RegisterDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomain(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDomainReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDomain(ctx, req.(*CreateDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomain(ctx, req.(*GetDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomain(ctx, req.(*UpdateDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteDomain0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDomainReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDomain(ctx, req.(*DeleteDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListAuthority0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuthority(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateAuthority0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAuthorityReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuthority(ctx, req.(*CreateAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthorityReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAuthority0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAuthorityReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAuthority(ctx, req.(*GetAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Authority)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateAuthority0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAuthorityReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAuthority(ctx, req.(*UpdateAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAuthorityReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteAuthority0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAuthorityReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteAuthority)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAuthority(ctx, req.(*DeleteAuthorityReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAuthorityReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListAuthorityMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAuthorityMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListAuthorityMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuthorityMenu(ctx, req.(*ListAuthorityMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAuthorityMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_HandleAuthorityMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleAuthorityMenuReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminHandleAuthorityMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleAuthorityMenu(ctx, req.(*HandleAuthorityMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleAuthorityMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_HandleAuthorityApi0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleAuthorityApiReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminHandleAuthorityApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleAuthorityApi(ctx, req.(*HandleAuthorityApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleAuthorityApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListApi0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListApi(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateApi0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApi(ctx, req.(*CreateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetApi0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApi(ctx, req.(*GetApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Api)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateApi0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApiReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApi(ctx, req.(*UpdateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteApi0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteApiReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApi(ctx, req.(*DeleteApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenu(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListMenuTree0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMenuTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenuTree(ctx, req.(*ListMenuTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*GetMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Menu)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListDepartment0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepartment(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateDepartment0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDepartmentReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDepartment(ctx, req.(*CreateDepartmentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDepartmentReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDepartment0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDepartmentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDepartment(ctx, req.(*GetDepartmentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Department)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateDepartment0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDepartmentReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDepartment(ctx, req.(*UpdateDepartmentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDepartmentReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteDepartment0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDepartmentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteDepartment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDepartment(ctx, req.(*DeleteDepartmentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDepartmentReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListDepartmentTree0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepartmentTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListDepartmentTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepartmentTree(ctx, req.(*ListDepartmentTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepartmentTreeReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateApi(ctx context.Context, req *CreateApiReq, opts ...http.CallOption) (rsp *CreateApiReply, err error)
	CreateAuthority(ctx context.Context, req *CreateAuthorityReq, opts ...http.CallOption) (rsp *CreateAuthorityReply, err error)
	CreateDepartment(ctx context.Context, req *CreateDepartmentReq, opts ...http.CallOption) (rsp *CreateDepartmentReply, err error)
	CreateDomain(ctx context.Context, req *CreateDomainReq, opts ...http.CallOption) (rsp *CreateDomainReply, err error)
	CreateMenu(ctx context.Context, req *CreateMenuReq, opts ...http.CallOption) (rsp *CreateMenuReply, err error)
	CreateUser(ctx context.Context, req *CreateUserReq, opts ...http.CallOption) (rsp *CreateUserReply, err error)
	DeleteApi(ctx context.Context, req *DeleteApiReq, opts ...http.CallOption) (rsp *DeleteApiReply, err error)
	DeleteAuthority(ctx context.Context, req *DeleteAuthorityReq, opts ...http.CallOption) (rsp *DeleteAuthorityReply, err error)
	DeleteDepartment(ctx context.Context, req *DeleteDepartmentReq, opts ...http.CallOption) (rsp *DeleteDepartmentReply, err error)
	DeleteDomain(ctx context.Context, req *DeleteDomainReq, opts ...http.CallOption) (rsp *DeleteDomainReply, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuReq, opts ...http.CallOption) (rsp *DeleteMenuReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserReq, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	EmailLogin(ctx context.Context, req *EmailLoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	GetApi(ctx context.Context, req *GetApiReq, opts ...http.CallOption) (rsp *Api, err error)
	GetAuthority(ctx context.Context, req *GetAuthorityReq, opts ...http.CallOption) (rsp *Authority, err error)
	GetDepartment(ctx context.Context, req *GetDepartmentReq, opts ...http.CallOption) (rsp *Department, err error)
	GetDomain(ctx context.Context, req *GetDomainReq, opts ...http.CallOption) (rsp *Domain, err error)
	GetMenu(ctx context.Context, req *GetMenuReq, opts ...http.CallOption) (rsp *Menu, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *User, err error)
	GetUserInfo(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *User, err error)
	GetUserProfile(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetUserProfileReply, err error)
	HandleAuthorityApi(ctx context.Context, req *HandleAuthorityApiReq, opts ...http.CallOption) (rsp *HandleAuthorityApiReply, err error)
	HandleAuthorityMenu(ctx context.Context, req *HandleAuthorityMenuReq, opts ...http.CallOption) (rsp *HandleAuthorityMenuReply, err error)
	HandleUserDomain(ctx context.Context, req *HandleUserDomainReq, opts ...http.CallOption) (rsp *HandleUserDomainReply, err error)
	HandleUserDomainAuthority(ctx context.Context, req *HandleUserDomainAuthorityReq, opts ...http.CallOption) (rsp *HandleUserDomainAuthorityReply, err error)
	ListApi(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListAuthority(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListAuthorityMenu(ctx context.Context, req *ListAuthorityMenuReq, opts ...http.CallOption) (rsp *ListAuthorityMenuReply, err error)
	ListDepartment(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListDepartmentTree(ctx context.Context, req *ListDepartmentTreeReq, opts ...http.CallOption) (rsp *ListDepartmentTreeReply, err error)
	ListDomain(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListMenu(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListMenuTree(ctx context.Context, req *ListMenuTreeReq, opts ...http.CallOption) (rsp *ListMenuTreeReply, err error)
	ListUser(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListUserAuthority(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListUserAuthorityReply, err error)
	ListUserAuthorityMenuTree(ctx context.Context, req *ListUserAuthorityMenuTreeReq, opts ...http.CallOption) (rsp *ListUserAuthorityMenuTreeReply, err error)
	ListUserAuthorityPermission(ctx context.Context, req *ListUserAuthorityPermissionReq, opts ...http.CallOption) (rsp *ListUserAuthorityPermissionReply, err error)
	ListUserDomain(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListUserDomainReply, err error)
	LoginDomain(ctx context.Context, req *LoginDomainReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *LogoutReply, err error)
	MiddlePassLogin(ctx context.Context, req *PassLoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	PassLogin(ctx context.Context, req *PassLoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
	RegisterDomain(ctx context.Context, req *RegisterDomainReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
	SmsLogin(ctx context.Context, req *SmsLoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	UpdateApi(ctx context.Context, req *UpdateApiReq, opts ...http.CallOption) (rsp *UpdateApiReply, err error)
	UpdateAuthority(ctx context.Context, req *UpdateAuthorityReq, opts ...http.CallOption) (rsp *UpdateAuthorityReply, err error)
	UpdateDepartment(ctx context.Context, req *UpdateDepartmentReq, opts ...http.CallOption) (rsp *UpdateDepartmentReply, err error)
	UpdateDomain(ctx context.Context, req *UpdateDomainReq, opts ...http.CallOption) (rsp *UpdateDomainReply, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuReq, opts ...http.CallOption) (rsp *UpdateMenuReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateApi(ctx context.Context, in *CreateApiReq, opts ...http.CallOption) (*CreateApiReply, error) {
	var out CreateApiReply
	pattern := "/admin/v1/apis"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...http.CallOption) (*CreateAuthorityReply, error) {
	var out CreateAuthorityReply
	pattern := "/admin/v1/authorities"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateDepartment(ctx context.Context, in *CreateDepartmentReq, opts ...http.CallOption) (*CreateDepartmentReply, error) {
	var out CreateDepartmentReply
	pattern := "/admin/v1/departments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...http.CallOption) (*CreateDomainReply, error) {
	var out CreateDomainReply
	pattern := "/admin/v1/domains"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...http.CallOption) (*CreateMenuReply, error) {
	var out CreateMenuReply
	pattern := "/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserReq, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/admin/v1/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteApi(ctx context.Context, in *DeleteApiReq, opts ...http.CallOption) (*DeleteApiReply, error) {
	var out DeleteApiReply
	pattern := "/admin/v1/apis/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteAuthority(ctx context.Context, in *DeleteAuthorityReq, opts ...http.CallOption) (*DeleteAuthorityReply, error) {
	var out DeleteAuthorityReply
	pattern := "/admin/v1/authorities/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteDepartment(ctx context.Context, in *DeleteDepartmentReq, opts ...http.CallOption) (*DeleteDepartmentReply, error) {
	var out DeleteDepartmentReply
	pattern := "/admin/v1/departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...http.CallOption) (*DeleteDomainReply, error) {
	var out DeleteDomainReply
	pattern := "/admin/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...http.CallOption) (*DeleteMenuReply, error) {
	var out DeleteMenuReply
	pattern := "/admin/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/admin/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/v1/auth/emailLogin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminEmailLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetApi(ctx context.Context, in *GetApiReq, opts ...http.CallOption) (*Api, error) {
	var out Api
	pattern := "/admin/v1/apis/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetAuthority(ctx context.Context, in *GetAuthorityReq, opts ...http.CallOption) (*Authority, error) {
	var out Authority
	pattern := "/admin/v1/authorities/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDepartment(ctx context.Context, in *GetDepartmentReq, opts ...http.CallOption) (*Department, error) {
	var out Department
	pattern := "/admin/v1/departments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDomain(ctx context.Context, in *GetDomainReq, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/admin/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMenu(ctx context.Context, in *GetMenuReq, opts ...http.CallOption) (*Menu, error) {
	var out Menu
	pattern := "/admin/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/admin/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/admin/v1/users/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetUserProfileReply, error) {
	var out GetUserProfileReply
	pattern := "/admin/v1/users/profiles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) HandleAuthorityApi(ctx context.Context, in *HandleAuthorityApiReq, opts ...http.CallOption) (*HandleAuthorityApiReply, error) {
	var out HandleAuthorityApiReply
	pattern := "/admin/v1/authorities/{id}/apis"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminHandleAuthorityApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) HandleAuthorityMenu(ctx context.Context, in *HandleAuthorityMenuReq, opts ...http.CallOption) (*HandleAuthorityMenuReply, error) {
	var out HandleAuthorityMenuReply
	pattern := "/admin/v1/authorities/{id}/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminHandleAuthorityMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) HandleUserDomain(ctx context.Context, in *HandleUserDomainReq, opts ...http.CallOption) (*HandleUserDomainReply, error) {
	var out HandleUserDomainReply
	pattern := "/admin/v1/users/{id}/domains"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminHandleUserDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) HandleUserDomainAuthority(ctx context.Context, in *HandleUserDomainAuthorityReq, opts ...http.CallOption) (*HandleUserDomainAuthorityReply, error) {
	var out HandleUserDomainAuthorityReply
	pattern := "/admin/v1/users/{id}/domainAuthorities"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminHandleUserDomainAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListApi(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/apis"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListAuthority(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/authorities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListAuthorityMenu(ctx context.Context, in *ListAuthorityMenuReq, opts ...http.CallOption) (*ListAuthorityMenuReply, error) {
	var out ListAuthorityMenuReply
	pattern := "/admin/v1/authorities/{id}/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListAuthorityMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListDepartment(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/departments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListDepartmentTree(ctx context.Context, in *ListDepartmentTreeReq, opts ...http.CallOption) (*ListDepartmentTreeReply, error) {
	var out ListDepartmentTreeReply
	pattern := "/admin/v1/departments/{parentId}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListDepartmentTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListDomain(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/domains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListMenu(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...http.CallOption) (*ListMenuTreeReply, error) {
	var out ListMenuTreeReply
	pattern := "/admin/v1/menus/{parentId}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListUser(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/admin/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListUserAuthority(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListUserAuthorityReply, error) {
	var out ListUserAuthorityReply
	pattern := "/admin/v1/users/authorities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListUserAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListUserAuthorityMenuTree(ctx context.Context, in *ListUserAuthorityMenuTreeReq, opts ...http.CallOption) (*ListUserAuthorityMenuTreeReply, error) {
	var out ListUserAuthorityMenuTreeReply
	pattern := "/admin/v1/users/authorities/{authority_id}/menus/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListUserAuthorityMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListUserAuthorityPermission(ctx context.Context, in *ListUserAuthorityPermissionReq, opts ...http.CallOption) (*ListUserAuthorityPermissionReply, error) {
	var out ListUserAuthorityPermissionReply
	pattern := "/admin/v1/users/authorities/{authority_id}/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListUserAuthorityPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListUserDomain(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListUserDomainReply, error) {
	var out ListUserDomainReply
	pattern := "/admin/v1/users/domains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListUserDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) LoginDomain(ctx context.Context, in *LoginDomainReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/v1/domains/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminLoginDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) Logout(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/admin/v1/auth/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) MiddlePassLogin(ctx context.Context, in *PassLoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/v1/auth/middlePassLogin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminMiddlePassLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) PassLogin(ctx context.Context, in *PassLoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/v1/auth/passLogin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminPassLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/admin/v1/auth/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) RegisterDomain(ctx context.Context, in *RegisterDomainReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/admin/v1/domains/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminRegisterDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/v1/auth/smsLogin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSmsLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...http.CallOption) (*UpdateApiReply, error) {
	var out UpdateApiReply
	pattern := "/admin/v1/apis/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateAuthority(ctx context.Context, in *UpdateAuthorityReq, opts ...http.CallOption) (*UpdateAuthorityReply, error) {
	var out UpdateAuthorityReply
	pattern := "/admin/v1/authorities/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateAuthority))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateDepartment(ctx context.Context, in *UpdateDepartmentReq, opts ...http.CallOption) (*UpdateDepartmentReply, error) {
	var out UpdateDepartmentReply
	pattern := "/admin/v1/departments/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateDepartment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...http.CallOption) (*UpdateDomainReply, error) {
	var out UpdateDomainReply
	pattern := "/admin/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...http.CallOption) (*UpdateMenuReply, error) {
	var out UpdateMenuReply
	pattern := "/admin/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/admin/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
