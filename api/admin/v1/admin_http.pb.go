// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminServiceCreateDept = "/admin.v1.AdminService/CreateDept"
const OperationAdminServiceCreateDict = "/admin.v1.AdminService/CreateDict"
const OperationAdminServiceCreateDictData = "/admin.v1.AdminService/CreateDictData"
const OperationAdminServiceCreateDomain = "/admin.v1.AdminService/CreateDomain"
const OperationAdminServiceCreateDomainPackage = "/admin.v1.AdminService/CreateDomainPackage"
const OperationAdminServiceCreateMenu = "/admin.v1.AdminService/CreateMenu"
const OperationAdminServiceCreatePost = "/admin.v1.AdminService/CreatePost"
const OperationAdminServiceCreateRole = "/admin.v1.AdminService/CreateRole"
const OperationAdminServiceCreateUser = "/admin.v1.AdminService/CreateUser"
const OperationAdminServiceDeleteDept = "/admin.v1.AdminService/DeleteDept"
const OperationAdminServiceDeleteDict = "/admin.v1.AdminService/DeleteDict"
const OperationAdminServiceDeleteDictData = "/admin.v1.AdminService/DeleteDictData"
const OperationAdminServiceDeleteDomain = "/admin.v1.AdminService/DeleteDomain"
const OperationAdminServiceDeleteDomainPackage = "/admin.v1.AdminService/DeleteDomainPackage"
const OperationAdminServiceDeleteMenu = "/admin.v1.AdminService/DeleteMenu"
const OperationAdminServiceDeletePost = "/admin.v1.AdminService/DeletePost"
const OperationAdminServiceDeleteRole = "/admin.v1.AdminService/DeleteRole"
const OperationAdminServiceDeleteUser = "/admin.v1.AdminService/DeleteUser"
const OperationAdminServiceEmailLogin = "/admin.v1.AdminService/EmailLogin"
const OperationAdminServiceExistUserName = "/admin.v1.AdminService/ExistUserName"
const OperationAdminServiceGetDept = "/admin.v1.AdminService/GetDept"
const OperationAdminServiceGetDict = "/admin.v1.AdminService/GetDict"
const OperationAdminServiceGetDictData = "/admin.v1.AdminService/GetDictData"
const OperationAdminServiceGetDomain = "/admin.v1.AdminService/GetDomain"
const OperationAdminServiceGetDomainCode = "/admin.v1.AdminService/GetDomainCode"
const OperationAdminServiceGetDomainName = "/admin.v1.AdminService/GetDomainName"
const OperationAdminServiceGetDomainPackage = "/admin.v1.AdminService/GetDomainPackage"
const OperationAdminServiceGetMenu = "/admin.v1.AdminService/GetMenu"
const OperationAdminServiceGetPost = "/admin.v1.AdminService/GetPost"
const OperationAdminServiceGetRole = "/admin.v1.AdminService/GetRole"
const OperationAdminServiceGetRoleDataScope = "/admin.v1.AdminService/GetRoleDataScope"
const OperationAdminServiceGetUser = "/admin.v1.AdminService/GetUser"
const OperationAdminServiceGetUserInfo = "/admin.v1.AdminService/GetUserInfo"
const OperationAdminServiceGetUserProfile = "/admin.v1.AdminService/GetUserProfile"
const OperationAdminServiceHandleDomainMenu = "/admin.v1.AdminService/HandleDomainMenu"
const OperationAdminServiceHandleRoleDataScope = "/admin.v1.AdminService/HandleRoleDataScope"
const OperationAdminServiceHandleRoleMenu = "/admin.v1.AdminService/HandleRoleMenu"
const OperationAdminServiceListDept = "/admin.v1.AdminService/ListDept"
const OperationAdminServiceListDeptTree = "/admin.v1.AdminService/ListDeptTree"
const OperationAdminServiceListDict = "/admin.v1.AdminService/ListDict"
const OperationAdminServiceListDictData = "/admin.v1.AdminService/ListDictData"
const OperationAdminServiceListDomain = "/admin.v1.AdminService/ListDomain"
const OperationAdminServiceListDomainMenu = "/admin.v1.AdminService/ListDomainMenu"
const OperationAdminServiceListDomainPackage = "/admin.v1.AdminService/ListDomainPackage"
const OperationAdminServiceListDomainTree = "/admin.v1.AdminService/ListDomainTree"
const OperationAdminServiceListMenu = "/admin.v1.AdminService/ListMenu"
const OperationAdminServiceListMenuTree = "/admin.v1.AdminService/ListMenuTree"
const OperationAdminServiceListPost = "/admin.v1.AdminService/ListPost"
const OperationAdminServiceListRole = "/admin.v1.AdminService/ListRole"
const OperationAdminServiceListRoleDept = "/admin.v1.AdminService/ListRoleDept"
const OperationAdminServiceListRoleMenu = "/admin.v1.AdminService/ListRoleMenu"
const OperationAdminServiceListUser = "/admin.v1.AdminService/ListUser"
const OperationAdminServiceListUserRole = "/admin.v1.AdminService/ListUserRole"
const OperationAdminServiceListUserRoleMenuRouterTree = "/admin.v1.AdminService/ListUserRoleMenuRouterTree"
const OperationAdminServiceListUserRoleMenuTree = "/admin.v1.AdminService/ListUserRoleMenuTree"
const OperationAdminServiceListUserRolePermission = "/admin.v1.AdminService/ListUserRolePermission"
const OperationAdminServiceLogin = "/admin.v1.AdminService/Login"
const OperationAdminServiceLogout = "/admin.v1.AdminService/Logout"
const OperationAdminServiceRegister = "/admin.v1.AdminService/Register"
const OperationAdminServiceSmsLogin = "/admin.v1.AdminService/SmsLogin"
const OperationAdminServiceUpdateDept = "/admin.v1.AdminService/UpdateDept"
const OperationAdminServiceUpdateDeptState = "/admin.v1.AdminService/UpdateDeptState"
const OperationAdminServiceUpdateDict = "/admin.v1.AdminService/UpdateDict"
const OperationAdminServiceUpdateDictData = "/admin.v1.AdminService/UpdateDictData"
const OperationAdminServiceUpdateDictDataState = "/admin.v1.AdminService/UpdateDictDataState"
const OperationAdminServiceUpdateDictState = "/admin.v1.AdminService/UpdateDictState"
const OperationAdminServiceUpdateDomain = "/admin.v1.AdminService/UpdateDomain"
const OperationAdminServiceUpdateDomainPackage = "/admin.v1.AdminService/UpdateDomainPackage"
const OperationAdminServiceUpdateDomainPackageState = "/admin.v1.AdminService/UpdateDomainPackageState"
const OperationAdminServiceUpdateDomainState = "/admin.v1.AdminService/UpdateDomainState"
const OperationAdminServiceUpdateMenu = "/admin.v1.AdminService/UpdateMenu"
const OperationAdminServiceUpdatePost = "/admin.v1.AdminService/UpdatePost"
const OperationAdminServiceUpdatePostState = "/admin.v1.AdminService/UpdatePostState"
const OperationAdminServiceUpdateRole = "/admin.v1.AdminService/UpdateRole"
const OperationAdminServiceUpdateRoleState = "/admin.v1.AdminService/UpdateRoleState"
const OperationAdminServiceUpdateUser = "/admin.v1.AdminService/UpdateUser"

type AdminServiceHTTPServer interface {
	// CreateDept 创建部门
	CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptResponse, error)
	// CreateDict 创建字典
	CreateDict(context.Context, *CreateDictRequest) (*CreateDictResponse, error)
	// CreateDictData 创建字典数据
	CreateDictData(context.Context, *CreateDictDataRequest) (*CreateDictDataResponse, error)
	// CreateDomain 创建租户
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	// CreateDomainPackage 创建租户套餐
	CreateDomainPackage(context.Context, *CreateDomainPackageRequest) (*CreateDomainPackageResponse, error)
	// CreateMenu 创建菜单
	CreateMenu(context.Context, *CreateMenuRequest) (*CreateMenuResponse, error)
	// CreatePost 创建岗位
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	// CreateRole 创建角色
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// CreateUser 创建用户
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// DeleteDept 删除部门
	DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptResponse, error)
	// DeleteDict 删除字典
	DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictResponse, error)
	// DeleteDictData 删除字典数据
	DeleteDictData(context.Context, *DeleteDictDataRequest) (*DeleteDictDataResponse, error)
	// DeleteDomain 删除租户
	DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error)
	// DeleteDomainPackage 删除租户套餐
	DeleteDomainPackage(context.Context, *DeleteDomainPackageRequest) (*DeleteDomainPackageResponse, error)
	// DeleteMenu 删除菜单
	DeleteMenu(context.Context, *DeleteMenuRequest) (*DeleteMenuResponse, error)
	// DeletePost 删除岗位
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	// DeleteRole 删除指定ID角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// DeleteUser 删除用户
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// EmailLogin 邮件登陆
	EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginResponse, error)
	// ExistUserName 验证用户名是否存在
	ExistUserName(context.Context, *ExistUserNameRequest) (*ExistUserNameResponse, error)
	// GetDept 获取部门
	GetDept(context.Context, *GetDeptRequest) (*Dept, error)
	// GetDict 获取字典
	GetDict(context.Context, *GetDictRequest) (*Dict, error)
	// GetDictData 获取字典数据
	GetDictData(context.Context, *GetDictDataRequest) (*DictData, error)
	// GetDomain 获取租户
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// GetDomainCode 获取租户
	GetDomainCode(context.Context, *GetDomainCodeRequest) (*Domain, error)
	// GetDomainName 获取租户
	GetDomainName(context.Context, *GetDomainNameRequest) (*Domain, error)
	// GetDomainPackage 获取租户套餐
	GetDomainPackage(context.Context, *GetDomainPackageRequest) (*DomainPackage, error)
	// GetMenu 获取菜单
	GetMenu(context.Context, *GetMenuRequest) (*Menu, error)
	// GetPost 获取岗位
	GetPost(context.Context, *GetPostRequest) (*Post, error)
	// GetRole 获取指定ID角色
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	// GetRoleDataScope 获取指定ID角色数据范围
	GetRoleDataScope(context.Context, *GetRoleDataScopeRequest) (*GetRoleDataScopeResponse, error)
	// GetUser 获取用户
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// GetUserInfo User 用户模块
	// 当前登录用户概述
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// GetUserProfile 当前登录用户概述
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// HandleDomainMenu 处理角色菜单
	HandleDomainMenu(context.Context, *HandleDomainMenuRequest) (*HandleDomainMenuResponse, error)
	// HandleRoleDataScope 处理指定ID角色数据范围
	HandleRoleDataScope(context.Context, *HandleRoleDataScopeRequest) (*HandleRoleDataScopeResponse, error)
	// HandleRoleMenu 处理指定ID角色菜单
	HandleRoleMenu(context.Context, *HandleRoleMenuRequest) (*HandleRoleMenuResponse, error)
	// ListDept 列表部门
	ListDept(context.Context, *ListDeptRequest) (*ListDeptResponse, error)
	// ListDeptTree 获取全部部门树形
	ListDeptTree(context.Context, *ListDeptTreeRequest) (*ListDeptTreeResponse, error)
	// ListDict 列表字典
	ListDict(context.Context, *ListDictRequest) (*ListDictResponse, error)
	// ListDictData 列表字典数据
	ListDictData(context.Context, *ListDictDataRequest) (*ListDictDataResponse, error)
	// ListDomain 列表租户
	ListDomain(context.Context, *ListDomainRequest) (*ListDomainResponse, error)
	// ListDomainMenu 获取角色菜单
	ListDomainMenu(context.Context, *ListDomainMenuRequest) (*ListDomainMenuResponse, error)
	// ListDomainPackage 列表租户套餐
	ListDomainPackage(context.Context, *ListDomainPackageRequest) (*ListDomainPackageResponse, error)
	// ListDomainTree 获取租户树形列表
	ListDomainTree(context.Context, *ListDomainTreeRequest) (*ListDomainTreeResponse, error)
	// ListMenu 菜单模块
	// 列表菜单
	ListMenu(context.Context, *ListMenuRequest) (*ListMenuResponse, error)
	// ListMenuTree 获取树形菜单
	ListMenuTree(context.Context, *ListMenuTreeRequest) (*ListMenuTreeResponse, error)
	// ListPost 列表岗位
	ListPost(context.Context, *ListPostRequest) (*ListPostResponse, error)
	// ListRole 角色模块
	// 列表角色
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	// ListRoleDept 获取指定ID角色部门
	ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptResponse, error)
	// ListRoleMenu 获取指定ID角色菜单
	ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ListRoleMenuResponse, error)
	// ListUser 列表用户
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	// ListUserRole 当前登录用户拥有角色
	ListUserRole(context.Context, *ListUserRoleRequest) (*ListUserRoleResponse, error)
	// ListUserRoleMenuRouterTree 获取角色菜单路由树形列表
	ListUserRoleMenuRouterTree(context.Context, *ListUserRoleMenuRouterTreeRequest) (*ListUserRoleMenuRouterTreeResponse, error)
	// ListUserRoleMenuTree 获取角色菜单路由树形列表
	ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeRequest) (*ListUserRoleMenuTreeResponse, error)
	// ListUserRolePermission 获取角色权限列表
	ListUserRolePermission(context.Context, *ListUserRolePermissionRequest) (*ListUserRolePermissionResponse, error)
	// Login 密码登陆
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Logout 登出
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// Register 注册
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// SmsLogin 短信登陆
	SmsLogin(context.Context, *SmsLoginRequest) (*SmsLoginResponse, error)
	// UpdateDept 修改部门
	UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptResponse, error)
	// UpdateDeptState 更新指定ID角色状态
	UpdateDeptState(context.Context, *UpdateDeptStateRequest) (*UpdateDeptStateResponse, error)
	// UpdateDict 修改字典
	UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictResponse, error)
	// UpdateDictData 修改字典数据
	UpdateDictData(context.Context, *UpdateDictDataRequest) (*UpdateDictDataResponse, error)
	// UpdateDictDataState 设置字典数据状态
	UpdateDictDataState(context.Context, *UpdateDictDataStateRequest) (*UpdateDictDataStateResponse, error)
	// UpdateDictState 设置字典状态
	UpdateDictState(context.Context, *UpdateDictStateRequest) (*UpdateDictStateResponse, error)
	// UpdateDomain 修改租户
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	// UpdateDomainPackage 修改租户套餐
	UpdateDomainPackage(context.Context, *UpdateDomainPackageRequest) (*UpdateDomainPackageResponse, error)
	// UpdateDomainPackageState 更新指定ID套餐状态
	UpdateDomainPackageState(context.Context, *UpdateDomainPackageStateRequest) (*UpdateDomainPackageStateResponse, error)
	// UpdateDomainState 设置租户状态
	UpdateDomainState(context.Context, *UpdateDomainStateRequest) (*UpdateDomainStateResponse, error)
	// UpdateMenu 修改菜单
	UpdateMenu(context.Context, *UpdateMenuRequest) (*UpdateMenuResponse, error)
	// UpdatePost 修改岗位
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	// UpdatePostState 设置岗位状态
	UpdatePostState(context.Context, *UpdatePostStateRequest) (*UpdatePostStateResponse, error)
	// UpdateRole 修改指定ID角色
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// UpdateRoleState 更新指定ID角色状态
	UpdateRoleState(context.Context, *UpdateRoleStateRequest) (*UpdateRoleStateResponse, error)
	// UpdateUser 修改用户
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
}

func RegisterAdminServiceHTTPServer(s *http.Server, srv AdminServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/auth/logout", _AdminService_Logout0_HTTP_Handler(srv))
	r.POST("/v1/auth/logout", _AdminService_Logout1_HTTP_Handler(srv))
	r.POST("/v1/auth/login/{domain}", _AdminService_Login0_HTTP_Handler(srv))
	r.POST("/v1/auth/register/{domain}", _AdminService_Register0_HTTP_Handler(srv))
	r.POST("/v1/auth/smsLogin/{domain}", _AdminService_SmsLogin0_HTTP_Handler(srv))
	r.POST("/v1/auth/emailLogin/{domain}", _AdminService_EmailLogin0_HTTP_Handler(srv))
	r.GET("/v1/users/info", _AdminService_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/v1/users/profiles", _AdminService_GetUserProfile0_HTTP_Handler(srv))
	r.GET("/v1/users/roles", _AdminService_ListUserRole0_HTTP_Handler(srv))
	r.GET("/v1/users/roles/{role_id}/routers/trees", _AdminService_ListUserRoleMenuRouterTree0_HTTP_Handler(srv))
	r.GET("/v1/users/routers/trees", _AdminService_ListUserRoleMenuRouterTree1_HTTP_Handler(srv))
	r.GET("/v1/users/roles/{role_id}/menus/trees", _AdminService_ListUserRoleMenuTree0_HTTP_Handler(srv))
	r.GET("/v1/users/menus/trees", _AdminService_ListUserRoleMenuTree1_HTTP_Handler(srv))
	r.GET("/v1/users/roles/{role_id}/permissions", _AdminService_ListUserRolePermission0_HTTP_Handler(srv))
	r.GET("/v1/users/permissions", _AdminService_ListUserRolePermission1_HTTP_Handler(srv))
	r.GET("/v1/users", _AdminService_ListUser0_HTTP_Handler(srv))
	r.POST("/v1/users", _AdminService_CreateUser0_HTTP_Handler(srv))
	r.GET("/v1/users/{id}", _AdminService_GetUser0_HTTP_Handler(srv))
	r.PUT("/v1/users/{id}", _AdminService_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/v1/users/{id}", _AdminService_DeleteUser0_HTTP_Handler(srv))
	r.POST("/v1/users/existName", _AdminService_ExistUserName0_HTTP_Handler(srv))
	r.GET("/v1/domains", _AdminService_ListDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/trees", _AdminService_ListDomainTree0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}/trees", _AdminService_ListDomainTree1_HTTP_Handler(srv))
	r.POST("/v1/domains", _AdminService_CreateDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}", _AdminService_GetDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/{code}/code", _AdminService_GetDomainCode0_HTTP_Handler(srv))
	r.GET("/v1/domains/{name}/name", _AdminService_GetDomainName0_HTTP_Handler(srv))
	r.PUT("/v1/domains/{id}", _AdminService_UpdateDomain0_HTTP_Handler(srv))
	r.DELETE("/v1/domains/{id}", _AdminService_DeleteDomain0_HTTP_Handler(srv))
	r.PUT("/v1/domains/{id}/state", _AdminService_UpdateDomainState0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}/menus", _AdminService_ListDomainMenu0_HTTP_Handler(srv))
	r.POST("/v1/domains/{id}/menus", _AdminService_HandleDomainMenu0_HTTP_Handler(srv))
	r.GET("/v1/roles", _AdminService_ListRole0_HTTP_Handler(srv))
	r.POST("/v1/roles", _AdminService_CreateRole0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}", _AdminService_GetRole0_HTTP_Handler(srv))
	r.PUT("/v1/roles/{id}", _AdminService_UpdateRole0_HTTP_Handler(srv))
	r.PUT("/v1/roles/{id}/state", _AdminService_UpdateRoleState0_HTTP_Handler(srv))
	r.DELETE("/v1/roles/{id}", _AdminService_DeleteRole0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/menus", _AdminService_ListRoleMenu0_HTTP_Handler(srv))
	r.POST("/v1/roles/{id}/menus", _AdminService_HandleRoleMenu0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/depts", _AdminService_ListRoleDept0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/dataScopes", _AdminService_GetRoleDataScope0_HTTP_Handler(srv))
	r.POST("/v1/roles/{id}/dataScopes", _AdminService_HandleRoleDataScope0_HTTP_Handler(srv))
	r.GET("/v1/menus", _AdminService_ListMenu0_HTTP_Handler(srv))
	r.POST("/v1/menus", _AdminService_CreateMenu0_HTTP_Handler(srv))
	r.GET("/v1/menus/{id}/trees", _AdminService_ListMenuTree0_HTTP_Handler(srv))
	r.GET("/v1/menus/{id}", _AdminService_GetMenu0_HTTP_Handler(srv))
	r.PUT("/v1/menus/{id}", _AdminService_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/v1/menus/{id}", _AdminService_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/v1/depts", _AdminService_ListDept0_HTTP_Handler(srv))
	r.POST("/v1/depts", _AdminService_CreateDept0_HTTP_Handler(srv))
	r.GET("/v1/depts/{id}", _AdminService_GetDept0_HTTP_Handler(srv))
	r.PUT("/v1/depts/{id}", _AdminService_UpdateDept0_HTTP_Handler(srv))
	r.PUT("/v1/depts/{id}/state", _AdminService_UpdateDeptState0_HTTP_Handler(srv))
	r.DELETE("/v1/depts/{id}", _AdminService_DeleteDept0_HTTP_Handler(srv))
	r.GET("/v1/depts/{id}/trees", _AdminService_ListDeptTree0_HTTP_Handler(srv))
	r.GET("/v1/posts", _AdminService_ListPost0_HTTP_Handler(srv))
	r.POST("/v1/posts", _AdminService_CreatePost0_HTTP_Handler(srv))
	r.GET("/v1/posts/{id}", _AdminService_GetPost0_HTTP_Handler(srv))
	r.PUT("/v1/posts/{id}", _AdminService_UpdatePost0_HTTP_Handler(srv))
	r.DELETE("/v1/posts/{id}", _AdminService_DeletePost0_HTTP_Handler(srv))
	r.PUT("/v1/posts/{id}/state", _AdminService_UpdatePostState0_HTTP_Handler(srv))
	r.GET("/v1/dicts", _AdminService_ListDict0_HTTP_Handler(srv))
	r.POST("/v1/dicts", _AdminService_CreateDict0_HTTP_Handler(srv))
	r.GET("/v1/dicts/{id}", _AdminService_GetDict0_HTTP_Handler(srv))
	r.PUT("/v1/dicts/{id}", _AdminService_UpdateDict0_HTTP_Handler(srv))
	r.DELETE("/v1/dicts/{id}", _AdminService_DeleteDict0_HTTP_Handler(srv))
	r.PUT("/v1/dicts/{id}/state", _AdminService_UpdateDictState0_HTTP_Handler(srv))
	r.GET("/v1/dictData", _AdminService_ListDictData0_HTTP_Handler(srv))
	r.POST("/v1/dictData", _AdminService_CreateDictData0_HTTP_Handler(srv))
	r.GET("/v1/dictData/{id}", _AdminService_GetDictData0_HTTP_Handler(srv))
	r.PUT("/v1/dictData/{id}", _AdminService_UpdateDictData0_HTTP_Handler(srv))
	r.DELETE("/v1/dictData/{id}", _AdminService_DeleteDictData0_HTTP_Handler(srv))
	r.PUT("/v1/dictData/{id}/state", _AdminService_UpdateDictDataState0_HTTP_Handler(srv))
	r.GET("/v1/depts", _AdminService_ListDomainPackage0_HTTP_Handler(srv))
	r.POST("/v1/domainPackage", _AdminService_CreateDomainPackage0_HTTP_Handler(srv))
	r.GET("/v1/domainPackage/{id}", _AdminService_GetDomainPackage0_HTTP_Handler(srv))
	r.PUT("/v1/domainPackage/{id}", _AdminService_UpdateDomainPackage0_HTTP_Handler(srv))
	r.PUT("/v1/domainPackage/{id}/state", _AdminService_UpdateDomainPackageState0_HTTP_Handler(srv))
	r.DELETE("/v1/domainPackage/{id}", _AdminService_DeleteDomainPackage0_HTTP_Handler(srv))
}

func _AdminService_Logout0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_Logout1_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_Login0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_Register0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_SmsLogin0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SmsLoginRequest
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceSmsLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SmsLogin(ctx, req.(*SmsLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SmsLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_EmailLogin0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmailLoginRequest
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceEmailLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EmailLogin(ctx, req.(*EmailLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmailLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetUserInfo0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetUserProfile0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*GetUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUserRole0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUserRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRole(ctx, req.(*ListUserRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUserRoleMenuRouterTree0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuRouterTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUserRoleMenuRouterTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuRouterTree(ctx, req.(*ListUserRoleMenuRouterTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuRouterTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUserRoleMenuRouterTree1_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuRouterTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUserRoleMenuRouterTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuRouterTree(ctx, req.(*ListUserRoleMenuRouterTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuRouterTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUserRoleMenuTree0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUserRoleMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuTree(ctx, req.(*ListUserRoleMenuTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUserRoleMenuTree1_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUserRoleMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuTree(ctx, req.(*ListUserRoleMenuTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUserRolePermission0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRolePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUserRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRolePermission(ctx, req.(*ListUserRolePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRolePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUserRolePermission1_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRolePermissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUserRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRolePermission(ctx, req.(*ListUserRolePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRolePermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListUser0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateUser0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetUser0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateUser0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteUser0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ExistUserName0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExistUserNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceExistUserName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistUserName(ctx, req.(*ExistUserNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExistUserNameResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDomain0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomain(ctx, req.(*ListDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDomainTree0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDomainTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainTree(ctx, req.(*ListDomainTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDomainTree1_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDomainTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainTree(ctx, req.(*ListDomainTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateDomain0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDomain(ctx, req.(*CreateDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetDomain0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomain(ctx, req.(*GetDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetDomainCode0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainCodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetDomainCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainCode(ctx, req.(*GetDomainCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetDomainName0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainNameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetDomainName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainName(ctx, req.(*GetDomainNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDomain0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomain(ctx, req.(*UpdateDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteDomain0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDomainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDomain(ctx, req.(*DeleteDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDomainState0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDomainState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomainState(ctx, req.(*UpdateDomainStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainStateResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDomainMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDomainMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainMenu(ctx, req.(*ListDomainMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_HandleDomainMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleDomainMenuRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceHandleDomainMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleDomainMenu(ctx, req.(*HandleDomainMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleDomainMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListRole0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*ListRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateRole0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetRole0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateRole0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateRoleState0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateRoleState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoleState(ctx, req.(*UpdateRoleStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleStateResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteRole0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListRoleMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleMenu(ctx, req.(*ListRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_HandleRoleMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRoleMenuRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceHandleRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRoleMenu(ctx, req.(*HandleRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRoleMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListRoleDept0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListRoleDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleDept(ctx, req.(*ListRoleDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetRoleDataScope0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleDataScopeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetRoleDataScope)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleDataScope(ctx, req.(*GetRoleDataScopeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleDataScopeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_HandleRoleDataScope0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRoleDataScopeRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceHandleRoleDataScope)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRoleDataScope(ctx, req.(*HandleRoleDataScopeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRoleDataScopeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenu(ctx, req.(*ListMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListMenuTree0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMenuTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenuTree(ctx, req.(*ListMenuTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMenuTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*GetMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Menu)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteMenu0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDept0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDept(ctx, req.(*ListDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateDept0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDept(ctx, req.(*CreateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetDept0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDept(ctx, req.(*GetDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Dept)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDept0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeptRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDept(ctx, req.(*UpdateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDeptState0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeptStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDeptState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDeptState(ctx, req.(*UpdateDeptStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeptStateResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteDept0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDept(ctx, req.(*DeleteDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDeptTree0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeptTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDeptTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDeptTree(ctx, req.(*ListDeptTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeptTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListPost0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListPost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPost(ctx, req.(*ListPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPostResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreatePost0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*CreatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePostResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetPost0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetPost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPost(ctx, req.(*GetPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Post)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdatePost0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePostRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePost(ctx, req.(*UpdatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePostResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeletePost0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeletePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePost(ctx, req.(*DeletePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePostResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdatePostState0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePostStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdatePostState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePostState(ctx, req.(*UpdatePostStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePostStateResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDict0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDict(ctx, req.(*ListDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateDict0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDict(ctx, req.(*CreateDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDictResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetDict0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDict(ctx, req.(*GetDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Dict)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDict0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDict(ctx, req.(*UpdateDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteDict0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDict(ctx, req.(*DeleteDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDictResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDictState0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDictState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictState(ctx, req.(*UpdateDictStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictStateResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDictData0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDictData(ctx, req.(*ListDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictDataResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateDictData0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDictData(ctx, req.(*CreateDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDictDataResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetDictData0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictData(ctx, req.(*GetDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DictData)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDictData0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictDataRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictData(ctx, req.(*UpdateDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictDataResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteDictData0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictData(ctx, req.(*DeleteDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDictDataResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDictDataState0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictDataStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDictDataState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictDataState(ctx, req.(*UpdateDictDataStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictDataStateResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListDomainPackage0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainPackageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainPackage(ctx, req.(*ListDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_CreateDomainPackage0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDomainPackageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceCreateDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDomainPackage(ctx, req.(*CreateDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_GetDomainPackage0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainPackageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceGetDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainPackage(ctx, req.(*GetDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DomainPackage)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDomainPackage0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainPackageRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomainPackage(ctx, req.(*UpdateDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_UpdateDomainPackageState0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainPackageStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceUpdateDomainPackageState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomainPackageState(ctx, req.(*UpdateDomainPackageStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainPackageStateResponse)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteDomainPackage0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDomainPackageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDomainPackage(ctx, req.(*DeleteDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

type AdminServiceHTTPClient interface {
	CreateDept(ctx context.Context, req *CreateDeptRequest, opts ...http.CallOption) (rsp *CreateDeptResponse, err error)
	CreateDict(ctx context.Context, req *CreateDictRequest, opts ...http.CallOption) (rsp *CreateDictResponse, err error)
	CreateDictData(ctx context.Context, req *CreateDictDataRequest, opts ...http.CallOption) (rsp *CreateDictDataResponse, err error)
	CreateDomain(ctx context.Context, req *CreateDomainRequest, opts ...http.CallOption) (rsp *CreateDomainResponse, err error)
	CreateDomainPackage(ctx context.Context, req *CreateDomainPackageRequest, opts ...http.CallOption) (rsp *CreateDomainPackageResponse, err error)
	CreateMenu(ctx context.Context, req *CreateMenuRequest, opts ...http.CallOption) (rsp *CreateMenuResponse, err error)
	CreatePost(ctx context.Context, req *CreatePostRequest, opts ...http.CallOption) (rsp *CreatePostResponse, err error)
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleResponse, err error)
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *CreateUserResponse, err error)
	DeleteDept(ctx context.Context, req *DeleteDeptRequest, opts ...http.CallOption) (rsp *DeleteDeptResponse, err error)
	DeleteDict(ctx context.Context, req *DeleteDictRequest, opts ...http.CallOption) (rsp *DeleteDictResponse, err error)
	DeleteDictData(ctx context.Context, req *DeleteDictDataRequest, opts ...http.CallOption) (rsp *DeleteDictDataResponse, err error)
	DeleteDomain(ctx context.Context, req *DeleteDomainRequest, opts ...http.CallOption) (rsp *DeleteDomainResponse, err error)
	DeleteDomainPackage(ctx context.Context, req *DeleteDomainPackageRequest, opts ...http.CallOption) (rsp *DeleteDomainPackageResponse, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuRequest, opts ...http.CallOption) (rsp *DeleteMenuResponse, err error)
	DeletePost(ctx context.Context, req *DeletePostRequest, opts ...http.CallOption) (rsp *DeletePostResponse, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleResponse, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *DeleteUserResponse, err error)
	EmailLogin(ctx context.Context, req *EmailLoginRequest, opts ...http.CallOption) (rsp *EmailLoginResponse, err error)
	ExistUserName(ctx context.Context, req *ExistUserNameRequest, opts ...http.CallOption) (rsp *ExistUserNameResponse, err error)
	GetDept(ctx context.Context, req *GetDeptRequest, opts ...http.CallOption) (rsp *Dept, err error)
	GetDict(ctx context.Context, req *GetDictRequest, opts ...http.CallOption) (rsp *Dict, err error)
	GetDictData(ctx context.Context, req *GetDictDataRequest, opts ...http.CallOption) (rsp *DictData, err error)
	GetDomain(ctx context.Context, req *GetDomainRequest, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainCode(ctx context.Context, req *GetDomainCodeRequest, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainName(ctx context.Context, req *GetDomainNameRequest, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainPackage(ctx context.Context, req *GetDomainPackageRequest, opts ...http.CallOption) (rsp *DomainPackage, err error)
	GetMenu(ctx context.Context, req *GetMenuRequest, opts ...http.CallOption) (rsp *Menu, err error)
	GetPost(ctx context.Context, req *GetPostRequest, opts ...http.CallOption) (rsp *Post, err error)
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...http.CallOption) (rsp *Role, err error)
	GetRoleDataScope(ctx context.Context, req *GetRoleDataScopeRequest, opts ...http.CallOption) (rsp *GetRoleDataScopeResponse, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *User, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoRequest, opts ...http.CallOption) (rsp *GetUserInfoResponse, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...http.CallOption) (rsp *GetUserProfileResponse, err error)
	HandleDomainMenu(ctx context.Context, req *HandleDomainMenuRequest, opts ...http.CallOption) (rsp *HandleDomainMenuResponse, err error)
	HandleRoleDataScope(ctx context.Context, req *HandleRoleDataScopeRequest, opts ...http.CallOption) (rsp *HandleRoleDataScopeResponse, err error)
	HandleRoleMenu(ctx context.Context, req *HandleRoleMenuRequest, opts ...http.CallOption) (rsp *HandleRoleMenuResponse, err error)
	ListDept(ctx context.Context, req *ListDeptRequest, opts ...http.CallOption) (rsp *ListDeptResponse, err error)
	ListDeptTree(ctx context.Context, req *ListDeptTreeRequest, opts ...http.CallOption) (rsp *ListDeptTreeResponse, err error)
	ListDict(ctx context.Context, req *ListDictRequest, opts ...http.CallOption) (rsp *ListDictResponse, err error)
	ListDictData(ctx context.Context, req *ListDictDataRequest, opts ...http.CallOption) (rsp *ListDictDataResponse, err error)
	ListDomain(ctx context.Context, req *ListDomainRequest, opts ...http.CallOption) (rsp *ListDomainResponse, err error)
	ListDomainMenu(ctx context.Context, req *ListDomainMenuRequest, opts ...http.CallOption) (rsp *ListDomainMenuResponse, err error)
	ListDomainPackage(ctx context.Context, req *ListDomainPackageRequest, opts ...http.CallOption) (rsp *ListDomainPackageResponse, err error)
	ListDomainTree(ctx context.Context, req *ListDomainTreeRequest, opts ...http.CallOption) (rsp *ListDomainTreeResponse, err error)
	ListMenu(ctx context.Context, req *ListMenuRequest, opts ...http.CallOption) (rsp *ListMenuResponse, err error)
	ListMenuTree(ctx context.Context, req *ListMenuTreeRequest, opts ...http.CallOption) (rsp *ListMenuTreeResponse, err error)
	ListPost(ctx context.Context, req *ListPostRequest, opts ...http.CallOption) (rsp *ListPostResponse, err error)
	ListRole(ctx context.Context, req *ListRoleRequest, opts ...http.CallOption) (rsp *ListRoleResponse, err error)
	ListRoleDept(ctx context.Context, req *ListRoleDeptRequest, opts ...http.CallOption) (rsp *ListRoleDeptResponse, err error)
	ListRoleMenu(ctx context.Context, req *ListRoleMenuRequest, opts ...http.CallOption) (rsp *ListRoleMenuResponse, err error)
	ListUser(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUserResponse, err error)
	ListUserRole(ctx context.Context, req *ListUserRoleRequest, opts ...http.CallOption) (rsp *ListUserRoleResponse, err error)
	ListUserRoleMenuRouterTree(ctx context.Context, req *ListUserRoleMenuRouterTreeRequest, opts ...http.CallOption) (rsp *ListUserRoleMenuRouterTreeResponse, err error)
	ListUserRoleMenuTree(ctx context.Context, req *ListUserRoleMenuTreeRequest, opts ...http.CallOption) (rsp *ListUserRoleMenuTreeResponse, err error)
	ListUserRolePermission(ctx context.Context, req *ListUserRolePermissionRequest, opts ...http.CallOption) (rsp *ListUserRolePermissionResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutResponse, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterResponse, err error)
	SmsLogin(ctx context.Context, req *SmsLoginRequest, opts ...http.CallOption) (rsp *SmsLoginResponse, err error)
	UpdateDept(ctx context.Context, req *UpdateDeptRequest, opts ...http.CallOption) (rsp *UpdateDeptResponse, err error)
	UpdateDeptState(ctx context.Context, req *UpdateDeptStateRequest, opts ...http.CallOption) (rsp *UpdateDeptStateResponse, err error)
	UpdateDict(ctx context.Context, req *UpdateDictRequest, opts ...http.CallOption) (rsp *UpdateDictResponse, err error)
	UpdateDictData(ctx context.Context, req *UpdateDictDataRequest, opts ...http.CallOption) (rsp *UpdateDictDataResponse, err error)
	UpdateDictDataState(ctx context.Context, req *UpdateDictDataStateRequest, opts ...http.CallOption) (rsp *UpdateDictDataStateResponse, err error)
	UpdateDictState(ctx context.Context, req *UpdateDictStateRequest, opts ...http.CallOption) (rsp *UpdateDictStateResponse, err error)
	UpdateDomain(ctx context.Context, req *UpdateDomainRequest, opts ...http.CallOption) (rsp *UpdateDomainResponse, err error)
	UpdateDomainPackage(ctx context.Context, req *UpdateDomainPackageRequest, opts ...http.CallOption) (rsp *UpdateDomainPackageResponse, err error)
	UpdateDomainPackageState(ctx context.Context, req *UpdateDomainPackageStateRequest, opts ...http.CallOption) (rsp *UpdateDomainPackageStateResponse, err error)
	UpdateDomainState(ctx context.Context, req *UpdateDomainStateRequest, opts ...http.CallOption) (rsp *UpdateDomainStateResponse, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuRequest, opts ...http.CallOption) (rsp *UpdateMenuResponse, err error)
	UpdatePost(ctx context.Context, req *UpdatePostRequest, opts ...http.CallOption) (rsp *UpdatePostResponse, err error)
	UpdatePostState(ctx context.Context, req *UpdatePostStateRequest, opts ...http.CallOption) (rsp *UpdatePostStateResponse, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *UpdateRoleResponse, err error)
	UpdateRoleState(ctx context.Context, req *UpdateRoleStateRequest, opts ...http.CallOption) (rsp *UpdateRoleStateResponse, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UpdateUserResponse, err error)
}

type AdminServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminServiceHTTPClient(client *http.Client) AdminServiceHTTPClient {
	return &AdminServiceHTTPClientImpl{client}
}

func (c *AdminServiceHTTPClientImpl) CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...http.CallOption) (*CreateDeptResponse, error) {
	var out CreateDeptResponse
	pattern := "/v1/depts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreateDict(ctx context.Context, in *CreateDictRequest, opts ...http.CallOption) (*CreateDictResponse, error) {
	var out CreateDictResponse
	pattern := "/v1/dicts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreateDictData(ctx context.Context, in *CreateDictDataRequest, opts ...http.CallOption) (*CreateDictDataResponse, error) {
	var out CreateDictDataResponse
	pattern := "/v1/dictData"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...http.CallOption) (*CreateDomainResponse, error) {
	var out CreateDomainResponse
	pattern := "/v1/domains"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreateDomainPackage(ctx context.Context, in *CreateDomainPackageRequest, opts ...http.CallOption) (*CreateDomainPackageResponse, error) {
	var out CreateDomainPackageResponse
	pattern := "/v1/domainPackage"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...http.CallOption) (*CreateMenuResponse, error) {
	var out CreateMenuResponse
	pattern := "/v1/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...http.CallOption) (*CreatePostResponse, error) {
	var out CreatePostResponse
	pattern := "/v1/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleResponse, error) {
	var out CreateRoleResponse
	pattern := "/v1/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*CreateUserResponse, error) {
	var out CreateUserResponse
	pattern := "/v1/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...http.CallOption) (*DeleteDeptResponse, error) {
	var out DeleteDeptResponse
	pattern := "/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...http.CallOption) (*DeleteDictResponse, error) {
	var out DeleteDictResponse
	pattern := "/v1/dicts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...http.CallOption) (*DeleteDictDataResponse, error) {
	var out DeleteDictDataResponse
	pattern := "/v1/dictData/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...http.CallOption) (*DeleteDomainResponse, error) {
	var out DeleteDomainResponse
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteDomainPackage(ctx context.Context, in *DeleteDomainPackageRequest, opts ...http.CallOption) (*DeleteDomainPackageResponse, error) {
	var out DeleteDomainPackageResponse
	pattern := "/v1/domainPackage/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...http.CallOption) (*DeleteMenuResponse, error) {
	var out DeleteMenuResponse
	pattern := "/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...http.CallOption) (*DeletePostResponse, error) {
	var out DeletePostResponse
	pattern := "/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeletePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleResponse, error) {
	var out DeleteRoleResponse
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*DeleteUserResponse, error) {
	var out DeleteUserResponse
	pattern := "/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...http.CallOption) (*EmailLoginResponse, error) {
	var out EmailLoginResponse
	pattern := "/v1/auth/emailLogin/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceEmailLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ExistUserName(ctx context.Context, in *ExistUserNameRequest, opts ...http.CallOption) (*ExistUserNameResponse, error) {
	var out ExistUserNameResponse
	pattern := "/v1/users/existName"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceExistUserName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetDept(ctx context.Context, in *GetDeptRequest, opts ...http.CallOption) (*Dept, error) {
	var out Dept
	pattern := "/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetDict(ctx context.Context, in *GetDictRequest, opts ...http.CallOption) (*Dict, error) {
	var out Dict
	pattern := "/v1/dicts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...http.CallOption) (*DictData, error) {
	var out DictData
	pattern := "/v1/dictData/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetDomainCode(ctx context.Context, in *GetDomainCodeRequest, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{code}/code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetDomainCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetDomainName(ctx context.Context, in *GetDomainNameRequest, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{name}/name"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetDomainName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetDomainPackage(ctx context.Context, in *GetDomainPackageRequest, opts ...http.CallOption) (*DomainPackage, error) {
	var out DomainPackage
	pattern := "/v1/domainPackage/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...http.CallOption) (*Menu, error) {
	var out Menu
	pattern := "/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetPost(ctx context.Context, in *GetPostRequest, opts ...http.CallOption) (*Post, error) {
	var out Post
	pattern := "/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetPost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeRequest, opts ...http.CallOption) (*GetRoleDataScopeResponse, error) {
	var out GetRoleDataScopeResponse
	pattern := "/v1/roles/{id}/dataScopes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetRoleDataScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...http.CallOption) (*GetUserInfoResponse, error) {
	var out GetUserInfoResponse
	pattern := "/v1/users/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...http.CallOption) (*GetUserProfileResponse, error) {
	var out GetUserProfileResponse
	pattern := "/v1/users/profiles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) HandleDomainMenu(ctx context.Context, in *HandleDomainMenuRequest, opts ...http.CallOption) (*HandleDomainMenuResponse, error) {
	var out HandleDomainMenuResponse
	pattern := "/v1/domains/{id}/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceHandleDomainMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeRequest, opts ...http.CallOption) (*HandleRoleDataScopeResponse, error) {
	var out HandleRoleDataScopeResponse
	pattern := "/v1/roles/{id}/dataScopes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceHandleRoleDataScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) HandleRoleMenu(ctx context.Context, in *HandleRoleMenuRequest, opts ...http.CallOption) (*HandleRoleMenuResponse, error) {
	var out HandleRoleMenuResponse
	pattern := "/v1/roles/{id}/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceHandleRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDept(ctx context.Context, in *ListDeptRequest, opts ...http.CallOption) (*ListDeptResponse, error) {
	var out ListDeptResponse
	pattern := "/v1/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDeptTree(ctx context.Context, in *ListDeptTreeRequest, opts ...http.CallOption) (*ListDeptTreeResponse, error) {
	var out ListDeptTreeResponse
	pattern := "/v1/depts/{id}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDeptTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDict(ctx context.Context, in *ListDictRequest, opts ...http.CallOption) (*ListDictResponse, error) {
	var out ListDictResponse
	pattern := "/v1/dicts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDictData(ctx context.Context, in *ListDictDataRequest, opts ...http.CallOption) (*ListDictDataResponse, error) {
	var out ListDictDataResponse
	pattern := "/v1/dictData"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDomain(ctx context.Context, in *ListDomainRequest, opts ...http.CallOption) (*ListDomainResponse, error) {
	var out ListDomainResponse
	pattern := "/v1/domains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDomainMenu(ctx context.Context, in *ListDomainMenuRequest, opts ...http.CallOption) (*ListDomainMenuResponse, error) {
	var out ListDomainMenuResponse
	pattern := "/v1/domains/{id}/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDomainMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDomainPackage(ctx context.Context, in *ListDomainPackageRequest, opts ...http.CallOption) (*ListDomainPackageResponse, error) {
	var out ListDomainPackageResponse
	pattern := "/v1/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListDomainTree(ctx context.Context, in *ListDomainTreeRequest, opts ...http.CallOption) (*ListDomainTreeResponse, error) {
	var out ListDomainTreeResponse
	pattern := "/v1/domains/{id}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListDomainTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListMenu(ctx context.Context, in *ListMenuRequest, opts ...http.CallOption) (*ListMenuResponse, error) {
	var out ListMenuResponse
	pattern := "/v1/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListMenuTree(ctx context.Context, in *ListMenuTreeRequest, opts ...http.CallOption) (*ListMenuTreeResponse, error) {
	var out ListMenuTreeResponse
	pattern := "/v1/menus/{id}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListPost(ctx context.Context, in *ListPostRequest, opts ...http.CallOption) (*ListPostResponse, error) {
	var out ListPostResponse
	pattern := "/v1/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListPost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListRole(ctx context.Context, in *ListRoleRequest, opts ...http.CallOption) (*ListRoleResponse, error) {
	var out ListRoleResponse
	pattern := "/v1/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...http.CallOption) (*ListRoleDeptResponse, error) {
	var out ListRoleDeptResponse
	pattern := "/v1/roles/{id}/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListRoleDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...http.CallOption) (*ListRoleMenuResponse, error) {
	var out ListRoleMenuResponse
	pattern := "/v1/roles/{id}/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUserResponse, error) {
	var out ListUserResponse
	pattern := "/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListUserRole(ctx context.Context, in *ListUserRoleRequest, opts ...http.CallOption) (*ListUserRoleResponse, error) {
	var out ListUserRoleResponse
	pattern := "/v1/users/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListUserRoleMenuRouterTree(ctx context.Context, in *ListUserRoleMenuRouterTreeRequest, opts ...http.CallOption) (*ListUserRoleMenuRouterTreeResponse, error) {
	var out ListUserRoleMenuRouterTreeResponse
	pattern := "/v1/users/routers/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListUserRoleMenuRouterTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeRequest, opts ...http.CallOption) (*ListUserRoleMenuTreeResponse, error) {
	var out ListUserRoleMenuTreeResponse
	pattern := "/v1/users/menus/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListUserRoleMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionRequest, opts ...http.CallOption) (*ListUserRolePermissionResponse, error) {
	var out ListUserRolePermissionResponse
	pattern := "/v1/users/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListUserRolePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/auth/login/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutResponse, error) {
	var out LogoutResponse
	pattern := "/v1/auth/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterResponse, error) {
	var out RegisterResponse
	pattern := "/v1/auth/register/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) SmsLogin(ctx context.Context, in *SmsLoginRequest, opts ...http.CallOption) (*SmsLoginResponse, error) {
	var out SmsLoginResponse
	pattern := "/v1/auth/smsLogin/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceSmsLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...http.CallOption) (*UpdateDeptResponse, error) {
	var out UpdateDeptResponse
	pattern := "/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDeptState(ctx context.Context, in *UpdateDeptStateRequest, opts ...http.CallOption) (*UpdateDeptStateResponse, error) {
	var out UpdateDeptStateResponse
	pattern := "/v1/depts/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDeptState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...http.CallOption) (*UpdateDictResponse, error) {
	var out UpdateDictResponse
	pattern := "/v1/dicts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDictData(ctx context.Context, in *UpdateDictDataRequest, opts ...http.CallOption) (*UpdateDictDataResponse, error) {
	var out UpdateDictDataResponse
	pattern := "/v1/dictData/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDictDataState(ctx context.Context, in *UpdateDictDataStateRequest, opts ...http.CallOption) (*UpdateDictDataStateResponse, error) {
	var out UpdateDictDataStateResponse
	pattern := "/v1/dictData/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDictDataState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDictState(ctx context.Context, in *UpdateDictStateRequest, opts ...http.CallOption) (*UpdateDictStateResponse, error) {
	var out UpdateDictStateResponse
	pattern := "/v1/dicts/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDictState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...http.CallOption) (*UpdateDomainResponse, error) {
	var out UpdateDomainResponse
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDomainPackage(ctx context.Context, in *UpdateDomainPackageRequest, opts ...http.CallOption) (*UpdateDomainPackageResponse, error) {
	var out UpdateDomainPackageResponse
	pattern := "/v1/domainPackage/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDomainPackageState(ctx context.Context, in *UpdateDomainPackageStateRequest, opts ...http.CallOption) (*UpdateDomainPackageStateResponse, error) {
	var out UpdateDomainPackageStateResponse
	pattern := "/v1/domainPackage/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDomainPackageState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateDomainState(ctx context.Context, in *UpdateDomainStateRequest, opts ...http.CallOption) (*UpdateDomainStateResponse, error) {
	var out UpdateDomainStateResponse
	pattern := "/v1/domains/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateDomainState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...http.CallOption) (*UpdateMenuResponse, error) {
	var out UpdateMenuResponse
	pattern := "/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...http.CallOption) (*UpdatePostResponse, error) {
	var out UpdatePostResponse
	pattern := "/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdatePostState(ctx context.Context, in *UpdatePostStateRequest, opts ...http.CallOption) (*UpdatePostStateResponse, error) {
	var out UpdatePostStateResponse
	pattern := "/v1/posts/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdatePostState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*UpdateRoleResponse, error) {
	var out UpdateRoleResponse
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateRoleState(ctx context.Context, in *UpdateRoleStateRequest, opts ...http.CallOption) (*UpdateRoleStateResponse, error) {
	var out UpdateRoleStateResponse
	pattern := "/v1/roles/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateRoleState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UpdateUserResponse, error) {
	var out UpdateUserResponse
	pattern := "/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminServiceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
