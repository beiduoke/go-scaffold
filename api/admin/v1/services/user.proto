syntax = "proto3";

package api.admin.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protobuf/enum.proto";
import "protobuf/struct.proto";

option go_package = "github.com/beiduoke/go-scaffold/api/admin/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.admin.v1";
option java_outer_classname = "adminProtoV1";

// The greeting service definition.
service UserService {
  // User 用户模块
  // 当前登录用户概述
  rpc GetUserProfile (google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/profiles"
    };
  }
  
  // 获取用户菜单
  rpc GetUserMenu (google.protobuf.Empty) returns (GetUserMenuReply) {
    option (google.api.http) = {
      get: "/admin/v1/users/menus"
    };
  }
  
  // 列表用户
  rpc ListUser (api.protobuf.PagingReq) returns (api.protobuf.PagingReply) {
    option (google.api.http) = {
      get: "/admin/v1/users"
    };
  }
  
  // 创建用户
  rpc CreateUser (CreateUserReq) returns (CreateUserReply) {
    option (google.api.http) = {
      post: "/admin/v1/users"
      body: "data"
    };
  }
  
  // 列表用户
  rpc GetUser (GetUserReq) returns (User) {
    option (google.api.http) = {
      get: "/admin/v1/users/{id}"
    };
  }
  
  // 修改用户
  rpc UpdateUser (UpdateUserReq) returns (UpdateUserReply) {
    option (google.api.http) = {
      put: "/admin/v1/users/{id}"
      body: "data"
    };
  }
  
  // 删除用户
  rpc DeleteUser (DeleteUserReq) returns (DeleteUserReply) {
    option (google.api.http) = {
      delete: "/admin/v1/users/{id}"
    };
  }
}


message User {
  optional uint64 id = 1;
  optional string name = 2;
  optional string password = 3;
  optional string nick_name = 4;
  optional string real_name = 5;
  optional google.protobuf.Timestamp birthday = 6;
  optional int32 gender = 7;
  optional string mobile = 8;
  optional string email = 9;
  optional api.protobuf.UserState state = 10;
  optional google.protobuf.Timestamp created_at = 11;
  optional google.protobuf.Timestamp updated_at = 12;
  optional string authoritys = 13;
}

// 回应 - 列表用户 - 未使用
message ListUserReply {
  repeated User items = 1;
  int32 total = 2;
}

// 请求 - 获取用户
message GetUserReq {
  uint64 id = 1;
}

// 请求 - 删除用户
message DeleteUserReq {
  uint64 id = 1;
}

// 回应 - 删除用户
message DeleteUserReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 创建用户
message CreateUserReq {
  uint64 id = 1;
  message Data {
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
    string password = 3 [(validate.rules).string = {min_len: 6, max_len: 28}];
    string nick_name = 4;
    string real_name = 5;
    google.protobuf.Timestamp birthday = 6;
    int32 gender = 7;
    string mobile = 8;
    string email = 9;
    api.protobuf.UserState state = 10;
  }
  Data data = 2;
}

// 回应 - 创建用户
message CreateUserReply {
  bool success = 1;
  string message = 2;
}

// 请求 - 修改用户
message UpdateUserReq {
  uint64 id = 1;
  message Data {
    optional string name = 2;
    optional string password = 3;
    optional string nick_name = 4;
    optional string real_name = 5;
    optional google.protobuf.Timestamp birthday = 6;
    optional int32 gender = 7;
    optional string mobile = 8;
    optional string email = 9;
    optional api.protobuf.UserState state = 10;
  }
  Data data = 2;
}

// 回应 - 修改用户
message UpdateUserReply {
  bool success = 1;
  string message = 2;
}

// 回应 - 获取用户菜单
message GetUserMenuReply {
  string name = 1;
  string path = 2;
  string component = 3;
  repeated GetUserMenuReply childrens = 4;
}
