// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 400
func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BAD_REQUEST.String() && e.Code == 400
}

// 400
func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

// 401
func IsNotLoggedIn(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_LOGGED_IN.String() && e.Code == 401
}

// 401
func ErrorNotLoggedIn(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_NOT_LOGGED_IN.String(), fmt.Sprintf(format, args...))
}

// 403
func IsAccessForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCESS_FORBIDDEN.String() && e.Code == 403
}

// 403
func ErrorAccessForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ACCESS_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// 404
func IsResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_NOT_FOUND.String() && e.Code == 404
}

// 404
func ErrorResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_RESOURCE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 405
func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

// 405
func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

// 408
func IsRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_TIMEOUT.String() && e.Code == 408
}

// 408
func ErrorRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ErrorReason_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 500
func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

// 500
func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

// 501
func IsNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_IMPLEMENTED.String() && e.Code == 501
}

// 501
func ErrorNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorReason_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

// 502
func IsNetworkError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NETWORK_ERROR.String() && e.Code == 502
}

// 502
func ErrorNetworkError(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorReason_NETWORK_ERROR.String(), fmt.Sprintf(format, args...))
}

// 503
func IsServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

// 503
func ErrorServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

// 504
func IsNetworkTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NETWORK_TIMEOUT.String() && e.Code == 504
}

// 504
func ErrorNetworkTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorReason_NETWORK_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 505
func IsRequestNotSupport(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_NOT_SUPPORT.String() && e.Code == 505
}

// 505
func ErrorRequestNotSupport(format string, args ...interface{}) *errors.Error {
	return errors.New(505, ErrorReason_REQUEST_NOT_SUPPORT.String(), fmt.Sprintf(format, args...))
}

// 认证相关
func IsAuthTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_TOKEN_EXPIRED.String() && e.Code == 103
}

// 认证相关
func ErrorAuthTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(103, ErrorReason_AUTH_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// token无效
func IsAuthInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_INVALID_TOKEN.String() && e.Code == 104
}

// token无效
func ErrorAuthInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(104, ErrorReason_AUTH_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}

// token不存在
func IsAuthTokenNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_TOKEN_NOT_EXIST.String() && e.Code == 105
}

// token不存在
func ErrorAuthTokenNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(105, ErrorReason_AUTH_TOKEN_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

// 用户相关错误
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 110
}

// 用户相关错误
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(110, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 用户不存在
func IsUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_EXIST.String() && e.Code == 112
}

// 用户不存在
func ErrorUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(112, ErrorReason_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

// 密码错误
func IsUserIncorrectPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INCORRECT_PASSWORD.String() && e.Code == 113
}

// 密码错误
func ErrorUserIncorrectPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(113, ErrorReason_USER_INCORRECT_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 用户冻结
func IsUserFreeze(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_FREEZE.String() && e.Code == 114
}

// 用户冻结
func ErrorUserFreeze(format string, args ...interface{}) *errors.Error {
	return errors.New(114, ErrorReason_USER_FREEZE.String(), fmt.Sprintf(format, args...))
}

// 用户ID无效
func IsUserInvalidId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INVALID_ID.String() && e.Code == 115
}

// 用户ID无效
func ErrorUserInvalidId(format string, args ...interface{}) *errors.Error {
	return errors.New(115, ErrorReason_USER_INVALID_ID.String(), fmt.Sprintf(format, args...))
}

// 密码无效
func IsUserInvalidPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INVALID_PASSWORD.String() && e.Code == 116
}

// 密码无效
func ErrorUserInvalidPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(116, ErrorReason_USER_INVALID_PASSWORD.String(), fmt.Sprintf(format, args...))
}
