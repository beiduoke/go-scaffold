// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: admin/interface/v1/i_dept.proto

package v1

import (
	context "context"
	pagination "github.com/beiduoke/go-scaffold/api/common/pagination"
	v1 "github.com/beiduoke/go-scaffold/api/core/service/v1"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeptServiceCreateDept = "/admin.interface.v1.DeptService/CreateDept"
const OperationDeptServiceDeleteDept = "/admin.interface.v1.DeptService/DeleteDept"
const OperationDeptServiceGetDept = "/admin.interface.v1.DeptService/GetDept"
const OperationDeptServiceListDept = "/admin.interface.v1.DeptService/ListDept"
const OperationDeptServiceUpdateDept = "/admin.interface.v1.DeptService/UpdateDept"

type DeptServiceHTTPServer interface {
	// CreateDept 创建部门
	CreateDept(context.Context, *v1.CreateDeptRequest) (*v1.CreateDeptResponse, error)
	// DeleteDept 删除部门
	DeleteDept(context.Context, *v1.DeleteDeptRequest) (*v1.DeleteDeptResponse, error)
	// GetDept 获取部门数据
	GetDept(context.Context, *v1.GetDeptRequest) (*v1.Dept, error)
	// ListDept 获取部门列表
	ListDept(context.Context, *pagination.PagingRequest) (*v1.ListDeptResponse, error)
	// UpdateDept 更新部门
	UpdateDept(context.Context, *v1.UpdateDeptRequest) (*v1.UpdateDeptResponse, error)
}

func RegisterDeptServiceHTTPServer(s *http.Server, srv DeptServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/depts", _DeptService_ListDept0_HTTP_Handler(srv))
	r.GET("/admin/v1/depts/{id}", _DeptService_GetDept0_HTTP_Handler(srv))
	r.POST("/admin/v1/depts", _DeptService_CreateDept0_HTTP_Handler(srv))
	r.PUT("/admin/v1/depts/{id}", _DeptService_UpdateDept0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/depts/{id}", _DeptService_DeleteDept0_HTTP_Handler(srv))
}

func _DeptService_ListDept0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in pagination.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptServiceListDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDept(ctx, req.(*pagination.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _DeptService_GetDept0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptServiceGetDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDept(ctx, req.(*v1.GetDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.Dept)
		return ctx.Result(200, reply)
	}
}

func _DeptService_CreateDept0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreateDeptRequest
		if err := ctx.Bind(&in.User); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptServiceCreateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDept(ctx, req.(*v1.CreateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _DeptService_UpdateDept0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateDeptRequest
		if err := ctx.Bind(&in.User); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptServiceUpdateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDept(ctx, req.(*v1.UpdateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _DeptService_DeleteDept0_HTTP_Handler(srv DeptServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptServiceDeleteDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDept(ctx, req.(*v1.DeleteDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteDeptResponse)
		return ctx.Result(200, reply)
	}
}

type DeptServiceHTTPClient interface {
	CreateDept(ctx context.Context, req *v1.CreateDeptRequest, opts ...http.CallOption) (rsp *v1.CreateDeptResponse, err error)
	DeleteDept(ctx context.Context, req *v1.DeleteDeptRequest, opts ...http.CallOption) (rsp *v1.DeleteDeptResponse, err error)
	GetDept(ctx context.Context, req *v1.GetDeptRequest, opts ...http.CallOption) (rsp *v1.Dept, err error)
	ListDept(ctx context.Context, req *pagination.PagingRequest, opts ...http.CallOption) (rsp *v1.ListDeptResponse, err error)
	UpdateDept(ctx context.Context, req *v1.UpdateDeptRequest, opts ...http.CallOption) (rsp *v1.UpdateDeptResponse, err error)
}

type DeptServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDeptServiceHTTPClient(client *http.Client) DeptServiceHTTPClient {
	return &DeptServiceHTTPClientImpl{client}
}

func (c *DeptServiceHTTPClientImpl) CreateDept(ctx context.Context, in *v1.CreateDeptRequest, opts ...http.CallOption) (*v1.CreateDeptResponse, error) {
	var out v1.CreateDeptResponse
	pattern := "/admin/v1/depts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptServiceCreateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.User, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) DeleteDept(ctx context.Context, in *v1.DeleteDeptRequest, opts ...http.CallOption) (*v1.DeleteDeptResponse, error) {
	var out v1.DeleteDeptResponse
	pattern := "/admin/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptServiceDeleteDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) GetDept(ctx context.Context, in *v1.GetDeptRequest, opts ...http.CallOption) (*v1.Dept, error) {
	var out v1.Dept
	pattern := "/admin/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptServiceGetDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) ListDept(ctx context.Context, in *pagination.PagingRequest, opts ...http.CallOption) (*v1.ListDeptResponse, error) {
	var out v1.ListDeptResponse
	pattern := "/admin/v1/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptServiceListDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptServiceHTTPClientImpl) UpdateDept(ctx context.Context, in *v1.UpdateDeptRequest, opts ...http.CallOption) (*v1.UpdateDeptResponse, error) {
	var out v1.UpdateDeptResponse
	pattern := "/admin/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptServiceUpdateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.User, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
