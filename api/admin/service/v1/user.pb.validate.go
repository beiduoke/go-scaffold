// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.NickName != nil {
		// no validation rules for NickName
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Birthday != nil {
		// no validation rules for Birthday
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.State != nil {
		// no validation rules for State
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeptId != nil {
		// no validation rules for DeptId
	}

	if m.Dept != nil {

		if all {
			switch v := interface{}(m.GetDept()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Dept",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Dept",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDept()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "Dept",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on GetUserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoRequestMultiError, or nil if none found.
func (m *GetUserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserInfoRequestMultiError(errors)
	}

	return nil
}

// GetUserInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoRequestMultiError) AllErrors() []error { return m }

// GetUserInfoRequestValidationError is the validation error returned by
// GetUserInfoRequest.Validate if the designated constraints aren't met.
type GetUserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoRequestValidationError) ErrorName() string {
	return "GetUserInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoRequestValidationError{}

// Validate checks the field values on GetUserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoResponseMultiError, or nil if none found.
func (m *GetUserInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserInfoResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserInfoResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserInfoResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	// no validation rules for NickName

	// no validation rules for RealName

	// no validation rules for Birthday

	// no validation rules for Gender

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Avatar

	// no validation rules for State

	if len(errors) > 0 {
		return GetUserInfoResponseMultiError(errors)
	}

	return nil
}

// GetUserInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoResponseMultiError) AllErrors() []error { return m }

// GetUserInfoResponseValidationError is the validation error returned by
// GetUserInfoResponse.Validate if the designated constraints aren't met.
type GetUserInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoResponseValidationError) ErrorName() string {
	return "GetUserInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoResponseValidationError{}

// Validate checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileRequestMultiError, or nil if none found.
func (m *GetUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserProfileRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileRequestMultiError) AllErrors() []error { return m }

// GetUserProfileRequestValidationError is the validation error returned by
// GetUserProfileRequest.Validate if the designated constraints aren't met.
type GetUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileRequestValidationError) ErrorName() string {
	return "GetUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileRequestValidationError{}

// Validate checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileResponseMultiError, or nil if none found.
func (m *GetUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProfileResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponseMultiError) AllErrors() []error { return m }

// GetUserProfileResponseValidationError is the validation error returned by
// GetUserProfileResponse.Validate if the designated constraints aren't met.
type GetUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponseValidationError) ErrorName() string {
	return "GetUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponseValidationError{}

// Validate checks the field values on ListUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRoleRequestMultiError, or nil if none found.
func (m *ListUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserRoleRequestMultiError(errors)
	}

	return nil
}

// ListUserRoleRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleRequestMultiError) AllErrors() []error { return m }

// ListUserRoleRequestValidationError is the validation error returned by
// ListUserRoleRequest.Validate if the designated constraints aren't met.
type ListUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleRequestValidationError) ErrorName() string {
	return "ListUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleRequestValidationError{}

// Validate checks the field values on ListUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRoleResponseMultiError, or nil if none found.
func (m *ListUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRoleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRoleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRoleResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return ListUserRoleResponseMultiError(errors)
	}

	return nil
}

// ListUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleResponseMultiError) AllErrors() []error { return m }

// ListUserRoleResponseValidationError is the validation error returned by
// ListUserRoleResponse.Validate if the designated constraints aren't met.
type ListUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleResponseValidationError) ErrorName() string {
	return "ListUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleResponseValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Nopaging != nil {
		// no validation rules for Nopaging
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.DeptId != nil {
		// no validation rules for DeptId
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.NickName != nil {
		// no validation rules for NickName
	}

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserResponseMultiError, or nil if none found.
func (m *ListUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserResponseMultiError(errors)
	}

	return nil
}

// ListUserResponseMultiError is an error wrapping multiple validation errors
// returned by ListUserResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserResponseMultiError) AllErrors() []error { return m }

// ListUserResponseValidationError is the validation error returned by
// ListUserResponse.Validate if the designated constraints aren't met.
type ListUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserResponseValidationError) ErrorName() string { return "ListUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserResponseValidationError{}

// Validate checks the field values on ListUserRoleMenuRouterTreeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserRoleMenuRouterTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRoleMenuRouterTreeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUserRoleMenuRouterTreeRequestMultiError, or nil if none found.
func (m *ListUserRoleMenuRouterTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleMenuRouterTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 0 {
		err := ListUserRoleMenuRouterTreeRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.MenuParentId != nil {

		if m.GetMenuParentId() < 0 {
			err := ListUserRoleMenuRouterTreeRequestValidationError{
				field:  "MenuParentId",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListUserRoleMenuRouterTreeRequestMultiError(errors)
	}

	return nil
}

// ListUserRoleMenuRouterTreeRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListUserRoleMenuRouterTreeRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserRoleMenuRouterTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleMenuRouterTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleMenuRouterTreeRequestMultiError) AllErrors() []error { return m }

// ListUserRoleMenuRouterTreeRequestValidationError is the validation error
// returned by ListUserRoleMenuRouterTreeRequest.Validate if the designated
// constraints aren't met.
type ListUserRoleMenuRouterTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleMenuRouterTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleMenuRouterTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleMenuRouterTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleMenuRouterTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleMenuRouterTreeRequestValidationError) ErrorName() string {
	return "ListUserRoleMenuRouterTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleMenuRouterTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleMenuRouterTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleMenuRouterTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleMenuRouterTreeRequestValidationError{}

// Validate checks the field values on ListUserRoleMenuTreeResponseDeprecated
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListUserRoleMenuTreeResponseDeprecated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserRoleMenuTreeResponseDeprecated with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListUserRoleMenuTreeResponseDeprecatedMultiError, or nil if none found.
func (m *ListUserRoleMenuTreeResponseDeprecated) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleMenuTreeResponseDeprecated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRoleMenuTreeResponseDeprecatedValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRoleMenuTreeResponseDeprecatedValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRoleMenuTreeResponseDeprecatedValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return ListUserRoleMenuTreeResponseDeprecatedMultiError(errors)
	}

	return nil
}

// ListUserRoleMenuTreeResponseDeprecatedMultiError is an error wrapping
// multiple validation errors returned by
// ListUserRoleMenuTreeResponseDeprecated.ValidateAll() if the designated
// constraints aren't met.
type ListUserRoleMenuTreeResponseDeprecatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleMenuTreeResponseDeprecatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleMenuTreeResponseDeprecatedMultiError) AllErrors() []error { return m }

// ListUserRoleMenuTreeResponseDeprecatedValidationError is the validation
// error returned by ListUserRoleMenuTreeResponseDeprecated.Validate if the
// designated constraints aren't met.
type ListUserRoleMenuTreeResponseDeprecatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleMenuTreeResponseDeprecatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleMenuTreeResponseDeprecatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleMenuTreeResponseDeprecatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleMenuTreeResponseDeprecatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleMenuTreeResponseDeprecatedValidationError) ErrorName() string {
	return "ListUserRoleMenuTreeResponseDeprecatedValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleMenuTreeResponseDeprecatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleMenuTreeResponseDeprecated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleMenuTreeResponseDeprecatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleMenuTreeResponseDeprecatedValidationError{}

// Validate checks the field values on MenuRouter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuRouter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuRouter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuRouterMultiError, or
// nil if none found.
func (m *MenuRouter) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuRouter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Path

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MenuRouterValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MenuRouterValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MenuRouterValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuRouterValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuRouterValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuRouterValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Component != nil {
		// no validation rules for Component
	}

	if m.Redirect != nil {
		// no validation rules for Redirect
	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if len(errors) > 0 {
		return MenuRouterMultiError(errors)
	}

	return nil
}

// MenuRouterMultiError is an error wrapping multiple validation errors
// returned by MenuRouter.ValidateAll() if the designated constraints aren't met.
type MenuRouterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuRouterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuRouterMultiError) AllErrors() []error { return m }

// MenuRouterValidationError is the validation error returned by
// MenuRouter.Validate if the designated constraints aren't met.
type MenuRouterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuRouterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuRouterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuRouterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuRouterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuRouterValidationError) ErrorName() string { return "MenuRouterValidationError" }

// Error satisfies the builtin error interface
func (e MenuRouterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuRouter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuRouterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuRouterValidationError{}

// Validate checks the field values on ListUserRoleMenuRouterTreeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserRoleMenuRouterTreeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRoleMenuRouterTreeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUserRoleMenuRouterTreeResponseMultiError, or nil if none found.
func (m *ListUserRoleMenuRouterTreeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleMenuRouterTreeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRoleMenuRouterTreeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRoleMenuRouterTreeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRoleMenuRouterTreeResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return ListUserRoleMenuRouterTreeResponseMultiError(errors)
	}

	return nil
}

// ListUserRoleMenuRouterTreeResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListUserRoleMenuRouterTreeResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserRoleMenuRouterTreeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleMenuRouterTreeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleMenuRouterTreeResponseMultiError) AllErrors() []error { return m }

// ListUserRoleMenuRouterTreeResponseValidationError is the validation error
// returned by ListUserRoleMenuRouterTreeResponse.Validate if the designated
// constraints aren't met.
type ListUserRoleMenuRouterTreeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleMenuRouterTreeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleMenuRouterTreeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleMenuRouterTreeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleMenuRouterTreeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleMenuRouterTreeResponseValidationError) ErrorName() string {
	return "ListUserRoleMenuRouterTreeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleMenuRouterTreeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleMenuRouterTreeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleMenuRouterTreeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleMenuRouterTreeResponseValidationError{}

// Validate checks the field values on ListUserRoleMenuTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRoleMenuTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRoleMenuTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRoleMenuTreeRequestMultiError, or nil if none found.
func (m *ListUserRoleMenuTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleMenuTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 0 {
		err := ListUserRoleMenuTreeRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.MenuParentId != nil {

		if m.GetMenuParentId() < 0 {
			err := ListUserRoleMenuTreeRequestValidationError{
				field:  "MenuParentId",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListUserRoleMenuTreeRequestMultiError(errors)
	}

	return nil
}

// ListUserRoleMenuTreeRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserRoleMenuTreeRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserRoleMenuTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleMenuTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleMenuTreeRequestMultiError) AllErrors() []error { return m }

// ListUserRoleMenuTreeRequestValidationError is the validation error returned
// by ListUserRoleMenuTreeRequest.Validate if the designated constraints
// aren't met.
type ListUserRoleMenuTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleMenuTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleMenuTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleMenuTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleMenuTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleMenuTreeRequestValidationError) ErrorName() string {
	return "ListUserRoleMenuTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleMenuTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleMenuTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleMenuTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleMenuTreeRequestValidationError{}

// Validate checks the field values on ListUserRoleMenuTreeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRoleMenuTreeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRoleMenuTreeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRoleMenuTreeResponseMultiError, or nil if none found.
func (m *ListUserRoleMenuTreeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleMenuTreeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRoleMenuTreeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRoleMenuTreeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRoleMenuTreeResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return ListUserRoleMenuTreeResponseMultiError(errors)
	}

	return nil
}

// ListUserRoleMenuTreeResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserRoleMenuTreeResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserRoleMenuTreeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleMenuTreeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleMenuTreeResponseMultiError) AllErrors() []error { return m }

// ListUserRoleMenuTreeResponseValidationError is the validation error returned
// by ListUserRoleMenuTreeResponse.Validate if the designated constraints
// aren't met.
type ListUserRoleMenuTreeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleMenuTreeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleMenuTreeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleMenuTreeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleMenuTreeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleMenuTreeResponseValidationError) ErrorName() string {
	return "ListUserRoleMenuTreeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleMenuTreeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleMenuTreeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleMenuTreeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleMenuTreeResponseValidationError{}

// Validate checks the field values on ListUserRolePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRolePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRolePermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserRolePermissionRequestMultiError, or nil if none found.
func (m *ListUserRolePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRolePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() < 0 {
		err := ListUserRolePermissionRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserRolePermissionRequestMultiError(errors)
	}

	return nil
}

// ListUserRolePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserRolePermissionRequest.ValidateAll()
// if the designated constraints aren't met.
type ListUserRolePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRolePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRolePermissionRequestMultiError) AllErrors() []error { return m }

// ListUserRolePermissionRequestValidationError is the validation error
// returned by ListUserRolePermissionRequest.Validate if the designated
// constraints aren't met.
type ListUserRolePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRolePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRolePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRolePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRolePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRolePermissionRequestValidationError) ErrorName() string {
	return "ListUserRolePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRolePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRolePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRolePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRolePermissionRequestValidationError{}

// Validate checks the field values on ListUserRolePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRolePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRolePermissionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserRolePermissionResponseMultiError, or nil if none found.
func (m *ListUserRolePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRolePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return ListUserRolePermissionResponseMultiError(errors)
	}

	return nil
}

// ListUserRolePermissionResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserRolePermissionResponse.ValidateAll()
// if the designated constraints aren't met.
type ListUserRolePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRolePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRolePermissionResponseMultiError) AllErrors() []error { return m }

// ListUserRolePermissionResponseValidationError is the validation error
// returned by ListUserRolePermissionResponse.Validate if the designated
// constraints aren't met.
type ListUserRolePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRolePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRolePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRolePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRolePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRolePermissionResponseValidationError) ErrorName() string {
	return "ListUserRolePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRolePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRolePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRolePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRolePermissionResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := CreateUserRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateUserRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := CreateUserRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := CreateUserRequestValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeptId() <= 0 {
		err := CreateUserRequestValidationError{
			field:  "DeptId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateUserRequest_PostIds_Unique := make(map[uint64]struct{}, len(m.GetPostIds()))

	for idx, item := range m.GetPostIds() {
		_, _ = idx, item

		if _, exists := _CreateUserRequest_PostIds_Unique[item]; exists {
			err := CreateUserRequestValidationError{
				field:  fmt.Sprintf("PostIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateUserRequest_PostIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := CreateUserRequestValidationError{
				field:  fmt.Sprintf("PostIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetRoleIds()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateUserRequest_RoleIds_Unique := make(map[uint64]struct{}, len(m.GetRoleIds()))

	for idx, item := range m.GetRoleIds() {
		_, _ = idx, item

		if _, exists := _CreateUserRequest_RoleIds_Unique[item]; exists {
			err := CreateUserRequestValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateUserRequest_RoleIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := CreateUserRequestValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.Password != nil {

		if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 28 {
			err := CreateUserRequestValidationError{
				field:  "Password",
				reason: "value length must be between 6 and 28 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.NickName != nil {

		if l := utf8.RuneCountInString(m.GetNickName()); l < 1 || l > 10 {
			err := CreateUserRequestValidationError{
				field:  "NickName",
				reason: "value length must be between 1 and 10 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.RealName != nil {

		if l := utf8.RuneCountInString(m.GetRealName()); l < 2 || l > 10 {
			err := CreateUserRequestValidationError{
				field:  "RealName",
				reason: "value length must be between 2 and 10 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Birthday != nil {

		if !_CreateUserRequest_Birthday_Pattern.MatchString(m.GetBirthday()) {
			err := CreateUserRequestValidationError{
				field:  "Birthday",
				reason: "value does not match regex pattern \"^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Gender != nil {

		if m.GetGender() < 0 {
			err := CreateUserRequestValidationError{
				field:  "Gender",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Email != nil {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = CreateUserRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Remarks != nil {
		// no validation rules for Remarks
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

var _CreateUserRequest_Birthday_Pattern = regexp.MustCompile("^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$")

var _CreateUserRequest_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on HandleUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleUserRoleRequestMultiError, or nil if none found.
func (m *HandleUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := HandleUserRoleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleUserRoleRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleUserRoleRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleUserRoleRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleUserRoleRequestMultiError(errors)
	}

	return nil
}

// HandleUserRoleRequestMultiError is an error wrapping multiple validation
// errors returned by HandleUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type HandleUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleUserRoleRequestMultiError) AllErrors() []error { return m }

// HandleUserRoleRequestValidationError is the validation error returned by
// HandleUserRoleRequest.Validate if the designated constraints aren't met.
type HandleUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleUserRoleRequestValidationError) ErrorName() string {
	return "HandleUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleUserRoleRequestValidationError{}

// Validate checks the field values on HandleUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleUserRoleResponseMultiError, or nil if none found.
func (m *HandleUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HandleUserRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HandleUserRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HandleUserRoleResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HandleUserRoleResponseMultiError(errors)
	}

	return nil
}

// HandleUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by HandleUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type HandleUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleUserRoleResponseMultiError) AllErrors() []error { return m }

// HandleUserRoleResponseValidationError is the validation error returned by
// HandleUserRoleResponse.Validate if the designated constraints aren't met.
type HandleUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleUserRoleResponseValidationError) ErrorName() string {
	return "HandleUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleUserRoleResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteUserResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteUserResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteUserResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on UserMenuTreeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserMenuTreeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserMenuTreeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserMenuTreeResponseMultiError, or nil if none found.
func (m *UserMenuTreeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserMenuTreeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserMenuTreeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserMenuTreeResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserMenuTreeResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return UserMenuTreeResponseMultiError(errors)
	}

	return nil
}

// UserMenuTreeResponseMultiError is an error wrapping multiple validation
// errors returned by UserMenuTreeResponse.ValidateAll() if the designated
// constraints aren't met.
type UserMenuTreeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMenuTreeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMenuTreeResponseMultiError) AllErrors() []error { return m }

// UserMenuTreeResponseValidationError is the validation error returned by
// UserMenuTreeResponse.Validate if the designated constraints aren't met.
type UserMenuTreeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserMenuTreeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserMenuTreeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserMenuTreeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserMenuTreeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserMenuTreeResponseValidationError) ErrorName() string {
	return "UserMenuTreeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserMenuTreeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserMenuTreeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserMenuTreeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserMenuTreeResponseValidationError{}

// Validate checks the field values on ExistUserNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistUserNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUserNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistUserNameRequestMultiError, or nil if none found.
func (m *ExistUserNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUserNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ExistUserNameRequestMultiError(errors)
	}

	return nil
}

// ExistUserNameRequestMultiError is an error wrapping multiple validation
// errors returned by ExistUserNameRequest.ValidateAll() if the designated
// constraints aren't met.
type ExistUserNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUserNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUserNameRequestMultiError) AllErrors() []error { return m }

// ExistUserNameRequestValidationError is the validation error returned by
// ExistUserNameRequest.Validate if the designated constraints aren't met.
type ExistUserNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUserNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUserNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUserNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistUserNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUserNameRequestValidationError) ErrorName() string {
	return "ExistUserNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistUserNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUserNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUserNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistUserNameRequestValidationError{}

// Validate checks the field values on ExistUserNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistUserNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUserNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistUserNameResponseMultiError, or nil if none found.
func (m *ExistUserNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUserNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExistUserNameResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExistUserNameResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExistUserNameResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExistUserNameResponseMultiError(errors)
	}

	return nil
}

// ExistUserNameResponseMultiError is an error wrapping multiple validation
// errors returned by ExistUserNameResponse.ValidateAll() if the designated
// constraints aren't met.
type ExistUserNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUserNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUserNameResponseMultiError) AllErrors() []error { return m }

// ExistUserNameResponseValidationError is the validation error returned by
// ExistUserNameResponse.Validate if the designated constraints aren't met.
type ExistUserNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUserNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUserNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUserNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistUserNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUserNameResponseValidationError) ErrorName() string {
	return "ExistUserNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistUserNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUserNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUserNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistUserNameResponseValidationError{}

// Validate checks the field values on
// ListUserRoleMenuTreeResponseDeprecated_MenuMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserRoleMenuTreeResponseDeprecated_MenuMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserRoleMenuTreeResponseDeprecated_MenuMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListUserRoleMenuTreeResponseDeprecated_MenuMetaMultiError, or nil if none found.
func (m *ListUserRoleMenuTreeResponseDeprecated_MenuMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleMenuTreeResponseDeprecated_MenuMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for DynamicLevel

	// no validation rules for RealPath

	// no validation rules for IgnoreKeepAlive

	// no validation rules for Affix

	// no validation rules for Icon

	// no validation rules for FrameSrc

	// no validation rules for TransitionName

	// no validation rules for HideBreadcrumb

	// no validation rules for CarryParam

	// no validation rules for HideChildrenInMenu

	// no validation rules for CurrentActiveMenu

	// no validation rules for HideTab

	// no validation rules for HideMenu

	// no validation rules for OrderNo

	// no validation rules for IgnoreRoute

	// no validation rules for HidePathforChildren

	if len(errors) > 0 {
		return ListUserRoleMenuTreeResponseDeprecated_MenuMetaMultiError(errors)
	}

	return nil
}

// ListUserRoleMenuTreeResponseDeprecated_MenuMetaMultiError is an error
// wrapping multiple validation errors returned by
// ListUserRoleMenuTreeResponseDeprecated_MenuMeta.ValidateAll() if the
// designated constraints aren't met.
type ListUserRoleMenuTreeResponseDeprecated_MenuMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleMenuTreeResponseDeprecated_MenuMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleMenuTreeResponseDeprecated_MenuMetaMultiError) AllErrors() []error { return m }

// ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError is the
// validation error returned by
// ListUserRoleMenuTreeResponseDeprecated_MenuMeta.Validate if the designated
// constraints aren't met.
type ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError) ErrorName() string {
	return "ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleMenuTreeResponseDeprecated_MenuMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleMenuTreeResponseDeprecated_MenuMetaValidationError{}

// Validate checks the field values on
// ListUserRoleMenuTreeResponseDeprecated_Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserRoleMenuTreeResponseDeprecated_Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserRoleMenuTreeResponseDeprecated_Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListUserRoleMenuTreeResponseDeprecated_MenuMultiError, or nil if none found.
func (m *ListUserRoleMenuTreeResponseDeprecated_Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRoleMenuTreeResponseDeprecated_Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for Redirect

	// no validation rules for FullPath

	// no validation rules for Alias

	// no validation rules for CaseSensitive

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserRoleMenuTreeResponseDeprecated_MenuMultiError(errors)
	}

	return nil
}

// ListUserRoleMenuTreeResponseDeprecated_MenuMultiError is an error wrapping
// multiple validation errors returned by
// ListUserRoleMenuTreeResponseDeprecated_Menu.ValidateAll() if the designated
// constraints aren't met.
type ListUserRoleMenuTreeResponseDeprecated_MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRoleMenuTreeResponseDeprecated_MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRoleMenuTreeResponseDeprecated_MenuMultiError) AllErrors() []error { return m }

// ListUserRoleMenuTreeResponseDeprecated_MenuValidationError is the validation
// error returned by ListUserRoleMenuTreeResponseDeprecated_Menu.Validate if
// the designated constraints aren't met.
type ListUserRoleMenuTreeResponseDeprecated_MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRoleMenuTreeResponseDeprecated_MenuValidationError) ErrorName() string {
	return "ListUserRoleMenuTreeResponseDeprecated_MenuValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRoleMenuTreeResponseDeprecated_MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRoleMenuTreeResponseDeprecated_Menu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRoleMenuTreeResponseDeprecated_MenuValidationError{}

// Validate checks the field values on MenuRouter_Meta with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MenuRouter_Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuRouter_Meta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuRouter_MetaMultiError, or nil if none found.
func (m *MenuRouter_Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuRouter_Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if m.IgnoreKeepAlive != nil {
		// no validation rules for IgnoreKeepAlive
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.FrameSrc != nil {
		// no validation rules for FrameSrc
	}

	if m.HideBreadcrumb != nil {
		// no validation rules for HideBreadcrumb
	}

	if m.HideMenu != nil {
		// no validation rules for HideMenu
	}

	if m.OrderNo != nil {
		// no validation rules for OrderNo
	}

	if m.CurrentActiveMenu != nil {
		// no validation rules for CurrentActiveMenu
	}

	if m.Affix != nil {
		// no validation rules for Affix
	}

	if len(errors) > 0 {
		return MenuRouter_MetaMultiError(errors)
	}

	return nil
}

// MenuRouter_MetaMultiError is an error wrapping multiple validation errors
// returned by MenuRouter_Meta.ValidateAll() if the designated constraints
// aren't met.
type MenuRouter_MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuRouter_MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuRouter_MetaMultiError) AllErrors() []error { return m }

// MenuRouter_MetaValidationError is the validation error returned by
// MenuRouter_Meta.Validate if the designated constraints aren't met.
type MenuRouter_MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuRouter_MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuRouter_MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuRouter_MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuRouter_MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuRouter_MetaValidationError) ErrorName() string { return "MenuRouter_MetaValidationError" }

// Error satisfies the builtin error interface
func (e MenuRouter_MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuRouter_Meta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuRouter_MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuRouter_MetaValidationError{}

// Validate checks the field values on HandleUserRoleRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleUserRoleRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleUserRoleRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleUserRoleRequest_DataMultiError, or nil if none found.
func (m *HandleUserRoleRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleUserRoleRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDomainId() <= 0 {
		err := HandleUserRoleRequest_DataValidationError{
			field:  "DomainId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIds()) < 1 {
		err := HandleUserRoleRequest_DataValidationError{
			field:  "RoleIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_HandleUserRoleRequest_Data_RoleIds_Unique := make(map[uint64]struct{}, len(m.GetRoleIds()))

	for idx, item := range m.GetRoleIds() {
		_, _ = idx, item

		if _, exists := _HandleUserRoleRequest_Data_RoleIds_Unique[item]; exists {
			err := HandleUserRoleRequest_DataValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_HandleUserRoleRequest_Data_RoleIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := HandleUserRoleRequest_DataValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return HandleUserRoleRequest_DataMultiError(errors)
	}

	return nil
}

// HandleUserRoleRequest_DataMultiError is an error wrapping multiple
// validation errors returned by HandleUserRoleRequest_Data.ValidateAll() if
// the designated constraints aren't met.
type HandleUserRoleRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleUserRoleRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleUserRoleRequest_DataMultiError) AllErrors() []error { return m }

// HandleUserRoleRequest_DataValidationError is the validation error returned
// by HandleUserRoleRequest_Data.Validate if the designated constraints aren't met.
type HandleUserRoleRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleUserRoleRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleUserRoleRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleUserRoleRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleUserRoleRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleUserRoleRequest_DataValidationError) ErrorName() string {
	return "HandleUserRoleRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e HandleUserRoleRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleUserRoleRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleUserRoleRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleUserRoleRequest_DataValidationError{}

// Validate checks the field values on UpdateUserRequest_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequest_DataMultiError, or nil if none found.
func (m *UpdateUserRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := UpdateUserRequest_DataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateUserRequest_Data_Phone_Pattern.MatchString(m.GetPhone()) {
		err := UpdateUserRequest_DataValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := UpdateUserRequest_DataValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateUserRequest_Data_RoleIds_Unique := make(map[uint64]struct{}, len(m.GetRoleIds()))

	for idx, item := range m.GetRoleIds() {
		_, _ = idx, item

		if _, exists := _UpdateUserRequest_Data_RoleIds_Unique[item]; exists {
			err := UpdateUserRequest_DataValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateUserRequest_Data_RoleIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := UpdateUserRequest_DataValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	_UpdateUserRequest_Data_PostIds_Unique := make(map[uint64]struct{}, len(m.GetPostIds()))

	for idx, item := range m.GetPostIds() {
		_, _ = idx, item

		if _, exists := _UpdateUserRequest_Data_PostIds_Unique[item]; exists {
			err := UpdateUserRequest_DataValidationError{
				field:  fmt.Sprintf("PostIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateUserRequest_Data_PostIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := UpdateUserRequest_DataValidationError{
				field:  fmt.Sprintf("PostIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDeptId() <= 0 {
		err := UpdateUserRequest_DataValidationError{
			field:  "DeptId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Password != nil {

		if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 28 {
			err := UpdateUserRequest_DataValidationError{
				field:  "Password",
				reason: "value length must be between 6 and 28 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.NickName != nil {

		if l := utf8.RuneCountInString(m.GetNickName()); l < 1 || l > 10 {
			err := UpdateUserRequest_DataValidationError{
				field:  "NickName",
				reason: "value length must be between 1 and 10 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.RealName != nil {

		if l := utf8.RuneCountInString(m.GetRealName()); l < 2 || l > 10 {
			err := UpdateUserRequest_DataValidationError{
				field:  "RealName",
				reason: "value length must be between 2 and 10 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Birthday != nil {

		if !_UpdateUserRequest_Data_Birthday_Pattern.MatchString(m.GetBirthday()) {
			err := UpdateUserRequest_DataValidationError{
				field:  "Birthday",
				reason: "value does not match regex pattern \"^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Gender != nil {

		if m.GetGender() < 0 {
			err := UpdateUserRequest_DataValidationError{
				field:  "Gender",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Email != nil {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = UpdateUserRequest_DataValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if len(errors) > 0 {
		return UpdateUserRequest_DataMultiError(errors)
	}

	return nil
}

func (m *UpdateUserRequest_Data) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateUserRequest_Data) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateUserRequest_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateUserRequest_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequest_DataMultiError) AllErrors() []error { return m }

// UpdateUserRequest_DataValidationError is the validation error returned by
// UpdateUserRequest_Data.Validate if the designated constraints aren't met.
type UpdateUserRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequest_DataValidationError) ErrorName() string {
	return "UpdateUserRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequest_DataValidationError{}

var _UpdateUserRequest_Data_Birthday_Pattern = regexp.MustCompile("^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$")

var _UpdateUserRequest_Data_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")
