// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: admin/service/v1/role.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoleServiceCreateRole = "/admin.service.v1.RoleService/CreateRole"
const OperationRoleServiceDeleteRole = "/admin.service.v1.RoleService/DeleteRole"
const OperationRoleServiceGetRole = "/admin.service.v1.RoleService/GetRole"
const OperationRoleServiceGetRoleDataScope = "/admin.service.v1.RoleService/GetRoleDataScope"
const OperationRoleServiceHandleRoleDataScope = "/admin.service.v1.RoleService/HandleRoleDataScope"
const OperationRoleServiceHandleRoleMenu = "/admin.service.v1.RoleService/HandleRoleMenu"
const OperationRoleServiceListRole = "/admin.service.v1.RoleService/ListRole"
const OperationRoleServiceListRoleDept = "/admin.service.v1.RoleService/ListRoleDept"
const OperationRoleServiceListRoleMenu = "/admin.service.v1.RoleService/ListRoleMenu"
const OperationRoleServiceUpdateRole = "/admin.service.v1.RoleService/UpdateRole"
const OperationRoleServiceUpdateRoleState = "/admin.service.v1.RoleService/UpdateRoleState"

type RoleServiceHTTPServer interface {
	// CreateRole 创建角色
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// DeleteRole 删除指定ID角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// GetRole 获取指定ID角色
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	// GetRoleDataScope 获取指定ID角色数据范围
	GetRoleDataScope(context.Context, *GetRoleDataScopeRequest) (*GetRoleDataScopeResponse, error)
	// HandleRoleDataScope 处理指定ID角色数据范围
	HandleRoleDataScope(context.Context, *HandleRoleDataScopeRequest) (*HandleRoleDataScopeResponse, error)
	// HandleRoleMenu 处理指定ID角色菜单
	HandleRoleMenu(context.Context, *HandleRoleMenuRequest) (*HandleRoleMenuResponse, error)
	// ListRole 角色模块
	// 列表角色
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	// ListRoleDept 获取指定ID角色部门
	ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptResponse, error)
	// ListRoleMenu 获取指定ID角色菜单
	ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ListRoleMenuResponse, error)
	// UpdateRole 修改指定ID角色
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// UpdateRoleState 更新指定ID角色状态
	UpdateRoleState(context.Context, *UpdateRoleStateRequest) (*UpdateRoleStateResponse, error)
}

func RegisterRoleServiceHTTPServer(s *http.Server, srv RoleServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/roles", _RoleService_ListRole0_HTTP_Handler(srv))
	r.POST("/v1/roles", _RoleService_CreateRole0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}", _RoleService_GetRole0_HTTP_Handler(srv))
	r.PUT("/v1/roles/{id}", _RoleService_UpdateRole0_HTTP_Handler(srv))
	r.PUT("/v1/roles/{id}/state", _RoleService_UpdateRoleState0_HTTP_Handler(srv))
	r.DELETE("/v1/roles/{id}", _RoleService_DeleteRole0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/menus", _RoleService_ListRoleMenu0_HTTP_Handler(srv))
	r.POST("/v1/roles/{id}/menus", _RoleService_HandleRoleMenu0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/depts", _RoleService_ListRoleDept0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/dataScopes", _RoleService_GetRoleDataScope0_HTTP_Handler(srv))
	r.POST("/v1/roles/{id}/dataScopes", _RoleService_HandleRoleDataScope0_HTTP_Handler(srv))
}

func _RoleService_ListRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceListRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*ListRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_CreateRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_GetRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _RoleService_UpdateRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_UpdateRoleState0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceUpdateRoleState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoleState(ctx, req.(*UpdateRoleStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleStateResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_DeleteRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_ListRoleMenu0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceListRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleMenu(ctx, req.(*ListRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_HandleRoleMenu0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRoleMenuRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceHandleRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRoleMenu(ctx, req.(*HandleRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRoleMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_ListRoleDept0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceListRoleDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleDept(ctx, req.(*ListRoleDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_GetRoleDataScope0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleDataScopeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceGetRoleDataScope)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleDataScope(ctx, req.(*GetRoleDataScopeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleDataScopeResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_HandleRoleDataScope0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRoleDataScopeRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceHandleRoleDataScope)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRoleDataScope(ctx, req.(*HandleRoleDataScopeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRoleDataScopeResponse)
		return ctx.Result(200, reply)
	}
}

type RoleServiceHTTPClient interface {
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleResponse, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleResponse, err error)
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...http.CallOption) (rsp *Role, err error)
	GetRoleDataScope(ctx context.Context, req *GetRoleDataScopeRequest, opts ...http.CallOption) (rsp *GetRoleDataScopeResponse, err error)
	HandleRoleDataScope(ctx context.Context, req *HandleRoleDataScopeRequest, opts ...http.CallOption) (rsp *HandleRoleDataScopeResponse, err error)
	HandleRoleMenu(ctx context.Context, req *HandleRoleMenuRequest, opts ...http.CallOption) (rsp *HandleRoleMenuResponse, err error)
	ListRole(ctx context.Context, req *ListRoleRequest, opts ...http.CallOption) (rsp *ListRoleResponse, err error)
	ListRoleDept(ctx context.Context, req *ListRoleDeptRequest, opts ...http.CallOption) (rsp *ListRoleDeptResponse, err error)
	ListRoleMenu(ctx context.Context, req *ListRoleMenuRequest, opts ...http.CallOption) (rsp *ListRoleMenuResponse, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *UpdateRoleResponse, err error)
	UpdateRoleState(ctx context.Context, req *UpdateRoleStateRequest, opts ...http.CallOption) (rsp *UpdateRoleStateResponse, err error)
}

type RoleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleServiceHTTPClient(client *http.Client) RoleServiceHTTPClient {
	return &RoleServiceHTTPClientImpl{client}
}

func (c *RoleServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleResponse, error) {
	var out CreateRoleResponse
	pattern := "/v1/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleResponse, error) {
	var out DeleteRoleResponse
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeRequest, opts ...http.CallOption) (*GetRoleDataScopeResponse, error) {
	var out GetRoleDataScopeResponse
	pattern := "/v1/roles/{id}/dataScopes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceGetRoleDataScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeRequest, opts ...http.CallOption) (*HandleRoleDataScopeResponse, error) {
	var out HandleRoleDataScopeResponse
	pattern := "/v1/roles/{id}/dataScopes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceHandleRoleDataScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) HandleRoleMenu(ctx context.Context, in *HandleRoleMenuRequest, opts ...http.CallOption) (*HandleRoleMenuResponse, error) {
	var out HandleRoleMenuResponse
	pattern := "/v1/roles/{id}/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceHandleRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) ListRole(ctx context.Context, in *ListRoleRequest, opts ...http.CallOption) (*ListRoleResponse, error) {
	var out ListRoleResponse
	pattern := "/v1/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...http.CallOption) (*ListRoleDeptResponse, error) {
	var out ListRoleDeptResponse
	pattern := "/v1/roles/{id}/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceListRoleDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...http.CallOption) (*ListRoleMenuResponse, error) {
	var out ListRoleMenuResponse
	pattern := "/v1/roles/{id}/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceListRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*UpdateRoleResponse, error) {
	var out UpdateRoleResponse
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleServiceHTTPClientImpl) UpdateRoleState(ctx context.Context, in *UpdateRoleStateRequest, opts ...http.CallOption) (*UpdateRoleStateResponse, error) {
	var out UpdateRoleStateResponse
	pattern := "/v1/roles/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceUpdateRoleState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
