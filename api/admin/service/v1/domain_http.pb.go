// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: admin/service/v1/domain.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDomainServiceCreateDomain = "/admin.service.v1.DomainService/CreateDomain"
const OperationDomainServiceCreateDomainPackage = "/admin.service.v1.DomainService/CreateDomainPackage"
const OperationDomainServiceDeleteDomain = "/admin.service.v1.DomainService/DeleteDomain"
const OperationDomainServiceDeleteDomainPackage = "/admin.service.v1.DomainService/DeleteDomainPackage"
const OperationDomainServiceGetDomain = "/admin.service.v1.DomainService/GetDomain"
const OperationDomainServiceGetDomainCode = "/admin.service.v1.DomainService/GetDomainCode"
const OperationDomainServiceGetDomainName = "/admin.service.v1.DomainService/GetDomainName"
const OperationDomainServiceGetDomainPackage = "/admin.service.v1.DomainService/GetDomainPackage"
const OperationDomainServiceHandleDomainMenu = "/admin.service.v1.DomainService/HandleDomainMenu"
const OperationDomainServiceListDomain = "/admin.service.v1.DomainService/ListDomain"
const OperationDomainServiceListDomainMenu = "/admin.service.v1.DomainService/ListDomainMenu"
const OperationDomainServiceListDomainPackage = "/admin.service.v1.DomainService/ListDomainPackage"
const OperationDomainServiceListDomainTree = "/admin.service.v1.DomainService/ListDomainTree"
const OperationDomainServiceUpdateDomain = "/admin.service.v1.DomainService/UpdateDomain"
const OperationDomainServiceUpdateDomainPackage = "/admin.service.v1.DomainService/UpdateDomainPackage"
const OperationDomainServiceUpdateDomainPackageState = "/admin.service.v1.DomainService/UpdateDomainPackageState"
const OperationDomainServiceUpdateDomainState = "/admin.service.v1.DomainService/UpdateDomainState"

type DomainServiceHTTPServer interface {
	// CreateDomain 创建租户
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	// CreateDomainPackage 创建租户套餐
	CreateDomainPackage(context.Context, *CreateDomainPackageRequest) (*CreateDomainPackageResponse, error)
	// DeleteDomain 删除租户
	DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error)
	// DeleteDomainPackage 删除租户套餐
	DeleteDomainPackage(context.Context, *DeleteDomainPackageRequest) (*DeleteDomainPackageResponse, error)
	// GetDomain 获取租户
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// GetDomainCode 获取租户
	GetDomainCode(context.Context, *GetDomainCodeRequest) (*Domain, error)
	// GetDomainName 获取租户
	GetDomainName(context.Context, *GetDomainNameRequest) (*Domain, error)
	// GetDomainPackage 获取租户套餐
	GetDomainPackage(context.Context, *GetDomainPackageRequest) (*DomainPackage, error)
	// HandleDomainMenu 处理角色菜单
	HandleDomainMenu(context.Context, *HandleDomainMenuRequest) (*HandleDomainMenuResponse, error)
	// ListDomain 列表租户
	ListDomain(context.Context, *ListDomainRequest) (*ListDomainResponse, error)
	// ListDomainMenu 获取角色菜单
	ListDomainMenu(context.Context, *ListDomainMenuRequest) (*ListDomainMenuResponse, error)
	// ListDomainPackage 列表租户套餐
	ListDomainPackage(context.Context, *ListDomainPackageRequest) (*ListDomainPackageResponse, error)
	// ListDomainTree 获取租户树形列表
	ListDomainTree(context.Context, *ListDomainTreeRequest) (*ListDomainTreeResponse, error)
	// UpdateDomain 修改租户
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	// UpdateDomainPackage 修改租户套餐
	UpdateDomainPackage(context.Context, *UpdateDomainPackageRequest) (*UpdateDomainPackageResponse, error)
	// UpdateDomainPackageState 更新指定ID套餐状态
	UpdateDomainPackageState(context.Context, *UpdateDomainPackageStateRequest) (*UpdateDomainPackageStateResponse, error)
	// UpdateDomainState 设置租户状态
	UpdateDomainState(context.Context, *UpdateDomainStateRequest) (*UpdateDomainStateResponse, error)
}

func RegisterDomainServiceHTTPServer(s *http.Server, srv DomainServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/domains", _DomainService_ListDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/trees", _DomainService_ListDomainTree0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}/trees", _DomainService_ListDomainTree1_HTTP_Handler(srv))
	r.POST("/v1/domains", _DomainService_CreateDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}", _DomainService_GetDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/{code}/code", _DomainService_GetDomainCode0_HTTP_Handler(srv))
	r.GET("/v1/domains/{name}/name", _DomainService_GetDomainName0_HTTP_Handler(srv))
	r.PUT("/v1/domains/{id}", _DomainService_UpdateDomain0_HTTP_Handler(srv))
	r.DELETE("/v1/domains/{id}", _DomainService_DeleteDomain0_HTTP_Handler(srv))
	r.PUT("/v1/domains/{id}/state", _DomainService_UpdateDomainState0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}/menus", _DomainService_ListDomainMenu0_HTTP_Handler(srv))
	r.POST("/v1/domains/{id}/menus", _DomainService_HandleDomainMenu0_HTTP_Handler(srv))
	r.GET("/v1/domainPackages", _DomainService_ListDomainPackage0_HTTP_Handler(srv))
	r.POST("/v1/domainPackages", _DomainService_CreateDomainPackage0_HTTP_Handler(srv))
	r.GET("/v1/domainPackages/{id}", _DomainService_GetDomainPackage0_HTTP_Handler(srv))
	r.PUT("/v1/domainPackages/{id}", _DomainService_UpdateDomainPackage0_HTTP_Handler(srv))
	r.PUT("/v1/domainPackages/{id}/state", _DomainService_UpdateDomainPackageState0_HTTP_Handler(srv))
	r.DELETE("/v1/domainPackages/{id}", _DomainService_DeleteDomainPackage0_HTTP_Handler(srv))
}

func _DomainService_ListDomain0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceListDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomain(ctx, req.(*ListDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_ListDomainTree0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceListDomainTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainTree(ctx, req.(*ListDomainTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_ListDomainTree1_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceListDomainTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainTree(ctx, req.(*ListDomainTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_CreateDomain0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceCreateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDomain(ctx, req.(*CreateDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_GetDomain0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceGetDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomain(ctx, req.(*GetDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _DomainService_GetDomainCode0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainCodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceGetDomainCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainCode(ctx, req.(*GetDomainCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _DomainService_GetDomainName0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainNameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceGetDomainName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainName(ctx, req.(*GetDomainNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _DomainService_UpdateDomain0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceUpdateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomain(ctx, req.(*UpdateDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_DeleteDomain0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDomainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceDeleteDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDomain(ctx, req.(*DeleteDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_UpdateDomainState0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceUpdateDomainState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomainState(ctx, req.(*UpdateDomainStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainStateResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_ListDomainMenu0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceListDomainMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainMenu(ctx, req.(*ListDomainMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_HandleDomainMenu0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleDomainMenuRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceHandleDomainMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleDomainMenu(ctx, req.(*HandleDomainMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleDomainMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_ListDomainPackage0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainPackageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceListDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainPackage(ctx, req.(*ListDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_CreateDomainPackage0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDomainPackageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceCreateDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDomainPackage(ctx, req.(*CreateDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_GetDomainPackage0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainPackageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceGetDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainPackage(ctx, req.(*GetDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DomainPackage)
		return ctx.Result(200, reply)
	}
}

func _DomainService_UpdateDomainPackage0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainPackageRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceUpdateDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomainPackage(ctx, req.(*UpdateDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_UpdateDomainPackageState0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainPackageStateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceUpdateDomainPackageState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomainPackageState(ctx, req.(*UpdateDomainPackageStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainPackageStateResponse)
		return ctx.Result(200, reply)
	}
}

func _DomainService_DeleteDomainPackage0_HTTP_Handler(srv DomainServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDomainPackageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDomainServiceDeleteDomainPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDomainPackage(ctx, req.(*DeleteDomainPackageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDomainPackageResponse)
		return ctx.Result(200, reply)
	}
}

type DomainServiceHTTPClient interface {
	CreateDomain(ctx context.Context, req *CreateDomainRequest, opts ...http.CallOption) (rsp *CreateDomainResponse, err error)
	CreateDomainPackage(ctx context.Context, req *CreateDomainPackageRequest, opts ...http.CallOption) (rsp *CreateDomainPackageResponse, err error)
	DeleteDomain(ctx context.Context, req *DeleteDomainRequest, opts ...http.CallOption) (rsp *DeleteDomainResponse, err error)
	DeleteDomainPackage(ctx context.Context, req *DeleteDomainPackageRequest, opts ...http.CallOption) (rsp *DeleteDomainPackageResponse, err error)
	GetDomain(ctx context.Context, req *GetDomainRequest, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainCode(ctx context.Context, req *GetDomainCodeRequest, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainName(ctx context.Context, req *GetDomainNameRequest, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainPackage(ctx context.Context, req *GetDomainPackageRequest, opts ...http.CallOption) (rsp *DomainPackage, err error)
	HandleDomainMenu(ctx context.Context, req *HandleDomainMenuRequest, opts ...http.CallOption) (rsp *HandleDomainMenuResponse, err error)
	ListDomain(ctx context.Context, req *ListDomainRequest, opts ...http.CallOption) (rsp *ListDomainResponse, err error)
	ListDomainMenu(ctx context.Context, req *ListDomainMenuRequest, opts ...http.CallOption) (rsp *ListDomainMenuResponse, err error)
	ListDomainPackage(ctx context.Context, req *ListDomainPackageRequest, opts ...http.CallOption) (rsp *ListDomainPackageResponse, err error)
	ListDomainTree(ctx context.Context, req *ListDomainTreeRequest, opts ...http.CallOption) (rsp *ListDomainTreeResponse, err error)
	UpdateDomain(ctx context.Context, req *UpdateDomainRequest, opts ...http.CallOption) (rsp *UpdateDomainResponse, err error)
	UpdateDomainPackage(ctx context.Context, req *UpdateDomainPackageRequest, opts ...http.CallOption) (rsp *UpdateDomainPackageResponse, err error)
	UpdateDomainPackageState(ctx context.Context, req *UpdateDomainPackageStateRequest, opts ...http.CallOption) (rsp *UpdateDomainPackageStateResponse, err error)
	UpdateDomainState(ctx context.Context, req *UpdateDomainStateRequest, opts ...http.CallOption) (rsp *UpdateDomainStateResponse, err error)
}

type DomainServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDomainServiceHTTPClient(client *http.Client) DomainServiceHTTPClient {
	return &DomainServiceHTTPClientImpl{client}
}

func (c *DomainServiceHTTPClientImpl) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...http.CallOption) (*CreateDomainResponse, error) {
	var out CreateDomainResponse
	pattern := "/v1/domains"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceCreateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) CreateDomainPackage(ctx context.Context, in *CreateDomainPackageRequest, opts ...http.CallOption) (*CreateDomainPackageResponse, error) {
	var out CreateDomainPackageResponse
	pattern := "/v1/domainPackages"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceCreateDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...http.CallOption) (*DeleteDomainResponse, error) {
	var out DeleteDomainResponse
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceDeleteDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) DeleteDomainPackage(ctx context.Context, in *DeleteDomainPackageRequest, opts ...http.CallOption) (*DeleteDomainPackageResponse, error) {
	var out DeleteDomainPackageResponse
	pattern := "/v1/domainPackages/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceDeleteDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceGetDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) GetDomainCode(ctx context.Context, in *GetDomainCodeRequest, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{code}/code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceGetDomainCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) GetDomainName(ctx context.Context, in *GetDomainNameRequest, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{name}/name"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceGetDomainName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) GetDomainPackage(ctx context.Context, in *GetDomainPackageRequest, opts ...http.CallOption) (*DomainPackage, error) {
	var out DomainPackage
	pattern := "/v1/domainPackages/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceGetDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) HandleDomainMenu(ctx context.Context, in *HandleDomainMenuRequest, opts ...http.CallOption) (*HandleDomainMenuResponse, error) {
	var out HandleDomainMenuResponse
	pattern := "/v1/domains/{id}/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceHandleDomainMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) ListDomain(ctx context.Context, in *ListDomainRequest, opts ...http.CallOption) (*ListDomainResponse, error) {
	var out ListDomainResponse
	pattern := "/v1/domains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceListDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) ListDomainMenu(ctx context.Context, in *ListDomainMenuRequest, opts ...http.CallOption) (*ListDomainMenuResponse, error) {
	var out ListDomainMenuResponse
	pattern := "/v1/domains/{id}/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceListDomainMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) ListDomainPackage(ctx context.Context, in *ListDomainPackageRequest, opts ...http.CallOption) (*ListDomainPackageResponse, error) {
	var out ListDomainPackageResponse
	pattern := "/v1/domainPackages"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceListDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) ListDomainTree(ctx context.Context, in *ListDomainTreeRequest, opts ...http.CallOption) (*ListDomainTreeResponse, error) {
	var out ListDomainTreeResponse
	pattern := "/v1/domains/{id}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDomainServiceListDomainTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...http.CallOption) (*UpdateDomainResponse, error) {
	var out UpdateDomainResponse
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceUpdateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) UpdateDomainPackage(ctx context.Context, in *UpdateDomainPackageRequest, opts ...http.CallOption) (*UpdateDomainPackageResponse, error) {
	var out UpdateDomainPackageResponse
	pattern := "/v1/domainPackages/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceUpdateDomainPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) UpdateDomainPackageState(ctx context.Context, in *UpdateDomainPackageStateRequest, opts ...http.CallOption) (*UpdateDomainPackageStateResponse, error) {
	var out UpdateDomainPackageStateResponse
	pattern := "/v1/domainPackages/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceUpdateDomainPackageState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DomainServiceHTTPClientImpl) UpdateDomainState(ctx context.Context, in *UpdateDomainStateRequest, opts ...http.CallOption) (*UpdateDomainStateResponse, error) {
	var out UpdateDomainStateResponse
	pattern := "/v1/domains/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDomainServiceUpdateDomainState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
