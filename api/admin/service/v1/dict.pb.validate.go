// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/service/v1/dict.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Dict with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Dict) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dict with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DictMultiError, or nil if none found.
func (m *Dict) ValidateAll() error {
	return m.validate(true)
}

func (m *Dict) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if m.Remarks != nil {
		// no validation rules for Remarks
	}

	if m.State != nil {
		// no validation rules for State
	}

	if len(errors) > 0 {
		return DictMultiError(errors)
	}

	return nil
}

// DictMultiError is an error wrapping multiple validation errors returned by
// Dict.ValidateAll() if the designated constraints aren't met.
type DictMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictMultiError) AllErrors() []error { return m }

// DictValidationError is the validation error returned by Dict.Validate if the
// designated constraints aren't met.
type DictValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictValidationError) ErrorName() string { return "DictValidationError" }

// Error satisfies the builtin error interface
func (e DictValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDict.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictValidationError{}

// Validate checks the field values on ListDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictRequestMultiError, or nil if none found.
func (m *ListDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Nopaging != nil {
		// no validation rules for Nopaging
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListDictRequestMultiError(errors)
	}

	return nil
}

// ListDictRequestMultiError is an error wrapping multiple validation errors
// returned by ListDictRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictRequestMultiError) AllErrors() []error { return m }

// ListDictRequestValidationError is the validation error returned by
// ListDictRequest.Validate if the designated constraints aren't met.
type ListDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictRequestValidationError) ErrorName() string { return "ListDictRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictRequestValidationError{}

// Validate checks the field values on ListDictResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictResponseMultiError, or nil if none found.
func (m *ListDictResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictResponseMultiError(errors)
	}

	return nil
}

// ListDictResponseMultiError is an error wrapping multiple validation errors
// returned by ListDictResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDictResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictResponseMultiError) AllErrors() []error { return m }

// ListDictResponseValidationError is the validation error returned by
// ListDictResponse.Validate if the designated constraints aren't met.
type ListDictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictResponseValidationError) ErrorName() string { return "ListDictResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListDictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictResponseValidationError{}

// Validate checks the field values on CreateDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictRequestMultiError, or nil if none found.
func (m *CreateDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := CreateDictRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 50 {
		err := CreateDictRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 0 {
		err := CreateDictRequestValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := CreateDictRequestValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Remarks != nil {

		if l := utf8.RuneCountInString(m.GetRemarks()); l < 0 || l > 1000 {
			err := CreateDictRequestValidationError{
				field:  "Remarks",
				reason: "value length must be between 0 and 1000 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateDictRequestMultiError(errors)
	}

	return nil
}

// CreateDictRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDictRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictRequestMultiError) AllErrors() []error { return m }

// CreateDictRequestValidationError is the validation error returned by
// CreateDictRequest.Validate if the designated constraints aren't met.
type CreateDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictRequestValidationError) ErrorName() string {
	return "CreateDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictRequestValidationError{}

// Validate checks the field values on CreateDictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictResponseMultiError, or nil if none found.
func (m *CreateDictResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDictResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDictResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDictResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDictResponseMultiError(errors)
	}

	return nil
}

// CreateDictResponseMultiError is an error wrapping multiple validation errors
// returned by CreateDictResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateDictResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictResponseMultiError) AllErrors() []error { return m }

// CreateDictResponseValidationError is the validation error returned by
// CreateDictResponse.Validate if the designated constraints aren't met.
type CreateDictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictResponseValidationError) ErrorName() string {
	return "CreateDictResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictResponseValidationError{}

// Validate checks the field values on UpdateDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictRequestMultiError, or nil if none found.
func (m *UpdateDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictRequestMultiError(errors)
	}

	return nil
}

// UpdateDictRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDictRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictRequestMultiError) AllErrors() []error { return m }

// UpdateDictRequestValidationError is the validation error returned by
// UpdateDictRequest.Validate if the designated constraints aren't met.
type UpdateDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictRequestValidationError) ErrorName() string {
	return "UpdateDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictRequestValidationError{}

// Validate checks the field values on UpdateDictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictResponseMultiError, or nil if none found.
func (m *UpdateDictResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDictResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDictResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDictResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDictResponseMultiError(errors)
	}

	return nil
}

// UpdateDictResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateDictResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictResponseMultiError) AllErrors() []error { return m }

// UpdateDictResponseValidationError is the validation error returned by
// UpdateDictResponse.Validate if the designated constraints aren't met.
type UpdateDictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictResponseValidationError) ErrorName() string {
	return "UpdateDictResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictResponseValidationError{}

// Validate checks the field values on GetDictRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDictRequestMultiError,
// or nil if none found.
func (m *GetDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDictRequestMultiError(errors)
	}

	return nil
}

// GetDictRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictRequestMultiError) AllErrors() []error { return m }

// GetDictRequestValidationError is the validation error returned by
// GetDictRequest.Validate if the designated constraints aren't met.
type GetDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictRequestValidationError) ErrorName() string { return "GetDictRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictRequestValidationError{}

// Validate checks the field values on DeleteDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictRequestMultiError, or nil if none found.
func (m *DeleteDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDictRequestMultiError(errors)
	}

	return nil
}

// DeleteDictRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDictRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictRequestMultiError) AllErrors() []error { return m }

// DeleteDictRequestValidationError is the validation error returned by
// DeleteDictRequest.Validate if the designated constraints aren't met.
type DeleteDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictRequestValidationError) ErrorName() string {
	return "DeleteDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictRequestValidationError{}

// Validate checks the field values on DeleteDictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictResponseMultiError, or nil if none found.
func (m *DeleteDictResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDictResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDictResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDictResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteDictResponseMultiError(errors)
	}

	return nil
}

// DeleteDictResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteDictResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictResponseMultiError) AllErrors() []error { return m }

// DeleteDictResponseValidationError is the validation error returned by
// DeleteDictResponse.Validate if the designated constraints aren't met.
type DeleteDictResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictResponseValidationError) ErrorName() string {
	return "DeleteDictResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictResponseValidationError{}

// Validate checks the field values on UpdateDictStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictStateRequestMultiError, or nil if none found.
func (m *UpdateDictStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDictStateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictStateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictStateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictStateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictStateRequestMultiError(errors)
	}

	return nil
}

// UpdateDictStateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictStateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictStateRequestMultiError) AllErrors() []error { return m }

// UpdateDictStateRequestValidationError is the validation error returned by
// UpdateDictStateRequest.Validate if the designated constraints aren't met.
type UpdateDictStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictStateRequestValidationError) ErrorName() string {
	return "UpdateDictStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictStateRequestValidationError{}

// Validate checks the field values on UpdateDictStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictStateResponseMultiError, or nil if none found.
func (m *UpdateDictStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDictStateResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDictStateResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDictStateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDictStateResponseMultiError(errors)
	}

	return nil
}

// UpdateDictStateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDictStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictStateResponseMultiError) AllErrors() []error { return m }

// UpdateDictStateResponseValidationError is the validation error returned by
// UpdateDictStateResponse.Validate if the designated constraints aren't met.
type UpdateDictStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictStateResponseValidationError) ErrorName() string {
	return "UpdateDictStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictStateResponseValidationError{}

// Validate checks the field values on DictData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictDataMultiError, or nil
// if none found.
func (m *DictData) ValidateAll() error {
	return m.validate(true)
}

func (m *DictData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for DictType

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictDataValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictDataValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DictDataValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DictDataValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ColorType != nil {
		// no validation rules for ColorType
	}

	if m.CssClass != nil {
		// no validation rules for CssClass
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if m.Remarks != nil {
		// no validation rules for Remarks
	}

	if m.State != nil {
		// no validation rules for State
	}

	if len(errors) > 0 {
		return DictDataMultiError(errors)
	}

	return nil
}

// DictDataMultiError is an error wrapping multiple validation errors returned
// by DictData.ValidateAll() if the designated constraints aren't met.
type DictDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictDataMultiError) AllErrors() []error { return m }

// DictDataValidationError is the validation error returned by
// DictData.Validate if the designated constraints aren't met.
type DictDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictDataValidationError) ErrorName() string { return "DictDataValidationError" }

// Error satisfies the builtin error interface
func (e DictDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictDataValidationError{}

// Validate checks the field values on ListDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictDataRequestMultiError, or nil if none found.
func (m *ListDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Nopaging != nil {
		// no validation rules for Nopaging
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.DictType != nil {
		// no validation rules for DictType
	}

	if len(errors) > 0 {
		return ListDictDataRequestMultiError(errors)
	}

	return nil
}

// ListDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by ListDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictDataRequestMultiError) AllErrors() []error { return m }

// ListDictDataRequestValidationError is the validation error returned by
// ListDictDataRequest.Validate if the designated constraints aren't met.
type ListDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictDataRequestValidationError) ErrorName() string {
	return "ListDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictDataRequestValidationError{}

// Validate checks the field values on ListDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictDataResponseMultiError, or nil if none found.
func (m *ListDictDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictDataResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictDataResponseMultiError(errors)
	}

	return nil
}

// ListDictDataResponseMultiError is an error wrapping multiple validation
// errors returned by ListDictDataResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDictDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictDataResponseMultiError) AllErrors() []error { return m }

// ListDictDataResponseValidationError is the validation error returned by
// ListDictDataResponse.Validate if the designated constraints aren't met.
type ListDictDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictDataResponseValidationError) ErrorName() string {
	return "ListDictDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictDataResponseValidationError{}

// Validate checks the field values on CreateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictDataRequestMultiError, or nil if none found.
func (m *CreateDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetLabel()); l < 1 || l > 10 {
		err := CreateDictDataRequestValidationError{
			field:  "Label",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 10 {
		err := CreateDictDataRequestValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDictType()); l < 1 || l > 50 {
		err := CreateDictDataRequestValidationError{
			field:  "DictType",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 0 {
		err := CreateDictDataRequestValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := CreateDictDataRequestValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Remarks != nil {

		if l := utf8.RuneCountInString(m.GetRemarks()); l < 0 || l > 1000 {
			err := CreateDictDataRequestValidationError{
				field:  "Remarks",
				reason: "value length must be between 0 and 1000 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ColorType != nil {

		if l := utf8.RuneCountInString(m.GetColorType()); l < 0 || l > 100 {
			err := CreateDictDataRequestValidationError{
				field:  "ColorType",
				reason: "value length must be between 0 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CssClass != nil {

		if l := utf8.RuneCountInString(m.GetCssClass()); l < 0 || l > 100 {
			err := CreateDictDataRequestValidationError{
				field:  "CssClass",
				reason: "value length must be between 0 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateDictDataRequestMultiError(errors)
	}

	return nil
}

// CreateDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictDataRequestMultiError) AllErrors() []error { return m }

// CreateDictDataRequestValidationError is the validation error returned by
// CreateDictDataRequest.Validate if the designated constraints aren't met.
type CreateDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictDataRequestValidationError) ErrorName() string {
	return "CreateDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictDataRequestValidationError{}

// Validate checks the field values on CreateDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictDataResponseMultiError, or nil if none found.
func (m *CreateDictDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDictDataResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDictDataResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDictDataResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDictDataResponseMultiError(errors)
	}

	return nil
}

// CreateDictDataResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDictDataResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDictDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictDataResponseMultiError) AllErrors() []error { return m }

// CreateDictDataResponseValidationError is the validation error returned by
// CreateDictDataResponse.Validate if the designated constraints aren't met.
type CreateDictDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictDataResponseValidationError) ErrorName() string {
	return "CreateDictDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictDataResponseValidationError{}

// Validate checks the field values on UpdateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataRequestMultiError, or nil if none found.
func (m *UpdateDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDictDataRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictDataRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictDataRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictDataRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictDataRequestMultiError(errors)
	}

	return nil
}

// UpdateDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataRequestMultiError) AllErrors() []error { return m }

// UpdateDictDataRequestValidationError is the validation error returned by
// UpdateDictDataRequest.Validate if the designated constraints aren't met.
type UpdateDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataRequestValidationError) ErrorName() string {
	return "UpdateDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataRequestValidationError{}

// Validate checks the field values on UpdateDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataResponseMultiError, or nil if none found.
func (m *UpdateDictDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDictDataResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDictDataResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDictDataResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDictDataResponseMultiError(errors)
	}

	return nil
}

// UpdateDictDataResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDictDataResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataResponseMultiError) AllErrors() []error { return m }

// UpdateDictDataResponseValidationError is the validation error returned by
// UpdateDictDataResponse.Validate if the designated constraints aren't met.
type UpdateDictDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataResponseValidationError) ErrorName() string {
	return "UpdateDictDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataResponseValidationError{}

// Validate checks the field values on GetDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictDataRequestMultiError, or nil if none found.
func (m *GetDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDictDataRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDictDataRequestMultiError(errors)
	}

	return nil
}

// GetDictDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictDataRequestMultiError) AllErrors() []error { return m }

// GetDictDataRequestValidationError is the validation error returned by
// GetDictDataRequest.Validate if the designated constraints aren't met.
type GetDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictDataRequestValidationError) ErrorName() string {
	return "GetDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictDataRequestValidationError{}

// Validate checks the field values on DeleteDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictDataRequestMultiError, or nil if none found.
func (m *DeleteDictDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDictDataRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDictDataRequestMultiError(errors)
	}

	return nil
}

// DeleteDictDataRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDictDataRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictDataRequestMultiError) AllErrors() []error { return m }

// DeleteDictDataRequestValidationError is the validation error returned by
// DeleteDictDataRequest.Validate if the designated constraints aren't met.
type DeleteDictDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictDataRequestValidationError) ErrorName() string {
	return "DeleteDictDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictDataRequestValidationError{}

// Validate checks the field values on DeleteDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictDataResponseMultiError, or nil if none found.
func (m *DeleteDictDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDictDataResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDictDataResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDictDataResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteDictDataResponseMultiError(errors)
	}

	return nil
}

// DeleteDictDataResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDictDataResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictDataResponseMultiError) AllErrors() []error { return m }

// DeleteDictDataResponseValidationError is the validation error returned by
// DeleteDictDataResponse.Validate if the designated constraints aren't met.
type DeleteDictDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictDataResponseValidationError) ErrorName() string {
	return "DeleteDictDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictDataResponseValidationError{}

// Validate checks the field values on UpdateDictDataStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataStateRequestMultiError, or nil if none found.
func (m *UpdateDictDataStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDictDataStateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictDataStateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictDataStateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictDataStateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDictDataStateRequestMultiError(errors)
	}

	return nil
}

// UpdateDictDataStateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDictDataStateRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDictDataStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataStateRequestMultiError) AllErrors() []error { return m }

// UpdateDictDataStateRequestValidationError is the validation error returned
// by UpdateDictDataStateRequest.Validate if the designated constraints aren't met.
type UpdateDictDataStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataStateRequestValidationError) ErrorName() string {
	return "UpdateDictDataStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataStateRequestValidationError{}

// Validate checks the field values on UpdateDictDataStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataStateResponseMultiError, or nil if none found.
func (m *UpdateDictDataStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDictDataStateResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDictDataStateResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDictDataStateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDictDataStateResponseMultiError(errors)
	}

	return nil
}

// UpdateDictDataStateResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDictDataStateResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateDictDataStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataStateResponseMultiError) AllErrors() []error { return m }

// UpdateDictDataStateResponseValidationError is the validation error returned
// by UpdateDictDataStateResponse.Validate if the designated constraints
// aren't met.
type UpdateDictDataStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataStateResponseValidationError) ErrorName() string {
	return "UpdateDictDataStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataStateResponseValidationError{}

// Validate checks the field values on UpdateDictRequest_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictRequest_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictRequest_DataMultiError, or nil if none found.
func (m *UpdateDictRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := UpdateDictRequest_DataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 0 {
		err := UpdateDictRequest_DataValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := UpdateDictRequest_DataValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRemarks()); l < 0 || l > 1000 {
		err := UpdateDictRequest_DataValidationError{
			field:  "Remarks",
			reason: "value length must be between 0 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDictRequest_DataMultiError(errors)
	}

	return nil
}

// UpdateDictRequest_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateDictRequest_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictRequest_DataMultiError) AllErrors() []error { return m }

// UpdateDictRequest_DataValidationError is the validation error returned by
// UpdateDictRequest_Data.Validate if the designated constraints aren't met.
type UpdateDictRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictRequest_DataValidationError) ErrorName() string {
	return "UpdateDictRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictRequest_DataValidationError{}

// Validate checks the field values on UpdateDictStateRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictStateRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictStateRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictStateRequest_DataMultiError, or nil if none found.
func (m *UpdateDictStateRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictStateRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.State != nil {

		if m.GetState() < 0 {
			err := UpdateDictStateRequest_DataValidationError{
				field:  "State",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateDictStateRequest_DataMultiError(errors)
	}

	return nil
}

// UpdateDictStateRequest_DataMultiError is an error wrapping multiple
// validation errors returned by UpdateDictStateRequest_Data.ValidateAll() if
// the designated constraints aren't met.
type UpdateDictStateRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictStateRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictStateRequest_DataMultiError) AllErrors() []error { return m }

// UpdateDictStateRequest_DataValidationError is the validation error returned
// by UpdateDictStateRequest_Data.Validate if the designated constraints
// aren't met.
type UpdateDictStateRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictStateRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictStateRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictStateRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictStateRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictStateRequest_DataValidationError) ErrorName() string {
	return "UpdateDictStateRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictStateRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictStateRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictStateRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictStateRequest_DataValidationError{}

// Validate checks the field values on UpdateDictDataRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataRequest_DataMultiError, or nil if none found.
func (m *UpdateDictDataRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetLabel()); l < 1 || l > 10 {
		err := UpdateDictDataRequest_DataValidationError{
			field:  "Label",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 10 {
		err := UpdateDictDataRequest_DataValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 0 {
		err := UpdateDictDataRequest_DataValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := UpdateDictDataRequest_DataValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Remarks != nil {

		if l := utf8.RuneCountInString(m.GetRemarks()); l < 0 || l > 1000 {
			err := UpdateDictDataRequest_DataValidationError{
				field:  "Remarks",
				reason: "value length must be between 0 and 1000 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ColorType != nil {

		if l := utf8.RuneCountInString(m.GetColorType()); l < 0 || l > 100 {
			err := UpdateDictDataRequest_DataValidationError{
				field:  "ColorType",
				reason: "value length must be between 0 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CssClass != nil {

		if l := utf8.RuneCountInString(m.GetCssClass()); l < 0 || l > 100 {
			err := UpdateDictDataRequest_DataValidationError{
				field:  "CssClass",
				reason: "value length must be between 0 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateDictDataRequest_DataMultiError(errors)
	}

	return nil
}

// UpdateDictDataRequest_DataMultiError is an error wrapping multiple
// validation errors returned by UpdateDictDataRequest_Data.ValidateAll() if
// the designated constraints aren't met.
type UpdateDictDataRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataRequest_DataMultiError) AllErrors() []error { return m }

// UpdateDictDataRequest_DataValidationError is the validation error returned
// by UpdateDictDataRequest_Data.Validate if the designated constraints aren't met.
type UpdateDictDataRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataRequest_DataValidationError) ErrorName() string {
	return "UpdateDictDataRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataRequest_DataValidationError{}

// Validate checks the field values on UpdateDictDataStateRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataStateRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataStateRequest_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDictDataStateRequest_DataMultiError, or nil if none found.
func (m *UpdateDictDataStateRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataStateRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.State != nil {

		if m.GetState() < 0 {
			err := UpdateDictDataStateRequest_DataValidationError{
				field:  "State",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateDictDataStateRequest_DataMultiError(errors)
	}

	return nil
}

// UpdateDictDataStateRequest_DataMultiError is an error wrapping multiple
// validation errors returned by UpdateDictDataStateRequest_Data.ValidateAll()
// if the designated constraints aren't met.
type UpdateDictDataStateRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataStateRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataStateRequest_DataMultiError) AllErrors() []error { return m }

// UpdateDictDataStateRequest_DataValidationError is the validation error
// returned by UpdateDictDataStateRequest_Data.Validate if the designated
// constraints aren't met.
type UpdateDictDataStateRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataStateRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataStateRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataStateRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataStateRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataStateRequest_DataValidationError) ErrorName() string {
	return "UpdateDictDataStateRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataStateRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataStateRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataStateRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataStateRequest_DataValidationError{}
