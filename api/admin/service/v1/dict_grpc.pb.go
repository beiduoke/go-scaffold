// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin/service/v1/dict.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DictService_ListDict_FullMethodName            = "/admin.service.v1.DictService/ListDict"
	DictService_CreateDict_FullMethodName          = "/admin.service.v1.DictService/CreateDict"
	DictService_GetDict_FullMethodName             = "/admin.service.v1.DictService/GetDict"
	DictService_UpdateDict_FullMethodName          = "/admin.service.v1.DictService/UpdateDict"
	DictService_DeleteDict_FullMethodName          = "/admin.service.v1.DictService/DeleteDict"
	DictService_UpdateDictState_FullMethodName     = "/admin.service.v1.DictService/UpdateDictState"
	DictService_ListDictData_FullMethodName        = "/admin.service.v1.DictService/ListDictData"
	DictService_CreateDictData_FullMethodName      = "/admin.service.v1.DictService/CreateDictData"
	DictService_GetDictData_FullMethodName         = "/admin.service.v1.DictService/GetDictData"
	DictService_UpdateDictData_FullMethodName      = "/admin.service.v1.DictService/UpdateDictData"
	DictService_DeleteDictData_FullMethodName      = "/admin.service.v1.DictService/DeleteDictData"
	DictService_UpdateDictDataState_FullMethodName = "/admin.service.v1.DictService/UpdateDictDataState"
)

// DictServiceClient is the client API for DictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictServiceClient interface {
	// 列表字典
	ListDict(ctx context.Context, in *ListDictRequest, opts ...grpc.CallOption) (*ListDictResponse, error)
	// 创建字典
	CreateDict(ctx context.Context, in *CreateDictRequest, opts ...grpc.CallOption) (*CreateDictResponse, error)
	// 获取字典
	GetDict(ctx context.Context, in *GetDictRequest, opts ...grpc.CallOption) (*Dict, error)
	// 修改字典
	UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...grpc.CallOption) (*UpdateDictResponse, error)
	// 删除字典
	DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...grpc.CallOption) (*DeleteDictResponse, error)
	// 设置字典状态
	UpdateDictState(ctx context.Context, in *UpdateDictStateRequest, opts ...grpc.CallOption) (*UpdateDictStateResponse, error)
	// 列表字典数据
	ListDictData(ctx context.Context, in *ListDictDataRequest, opts ...grpc.CallOption) (*ListDictDataResponse, error)
	// 创建字典数据
	CreateDictData(ctx context.Context, in *CreateDictDataRequest, opts ...grpc.CallOption) (*CreateDictDataResponse, error)
	// 获取字典数据
	GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*DictData, error)
	// 修改字典数据
	UpdateDictData(ctx context.Context, in *UpdateDictDataRequest, opts ...grpc.CallOption) (*UpdateDictDataResponse, error)
	// 删除字典数据
	DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...grpc.CallOption) (*DeleteDictDataResponse, error)
	// 设置字典数据状态
	UpdateDictDataState(ctx context.Context, in *UpdateDictDataStateRequest, opts ...grpc.CallOption) (*UpdateDictDataStateResponse, error)
}

type dictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictServiceClient(cc grpc.ClientConnInterface) DictServiceClient {
	return &dictServiceClient{cc}
}

func (c *dictServiceClient) ListDict(ctx context.Context, in *ListDictRequest, opts ...grpc.CallOption) (*ListDictResponse, error) {
	out := new(ListDictResponse)
	err := c.cc.Invoke(ctx, DictService_ListDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) CreateDict(ctx context.Context, in *CreateDictRequest, opts ...grpc.CallOption) (*CreateDictResponse, error) {
	out := new(CreateDictResponse)
	err := c.cc.Invoke(ctx, DictService_CreateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) GetDict(ctx context.Context, in *GetDictRequest, opts ...grpc.CallOption) (*Dict, error) {
	out := new(Dict)
	err := c.cc.Invoke(ctx, DictService_GetDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...grpc.CallOption) (*UpdateDictResponse, error) {
	out := new(UpdateDictResponse)
	err := c.cc.Invoke(ctx, DictService_UpdateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...grpc.CallOption) (*DeleteDictResponse, error) {
	out := new(DeleteDictResponse)
	err := c.cc.Invoke(ctx, DictService_DeleteDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDictState(ctx context.Context, in *UpdateDictStateRequest, opts ...grpc.CallOption) (*UpdateDictStateResponse, error) {
	out := new(UpdateDictStateResponse)
	err := c.cc.Invoke(ctx, DictService_UpdateDictState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) ListDictData(ctx context.Context, in *ListDictDataRequest, opts ...grpc.CallOption) (*ListDictDataResponse, error) {
	out := new(ListDictDataResponse)
	err := c.cc.Invoke(ctx, DictService_ListDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) CreateDictData(ctx context.Context, in *CreateDictDataRequest, opts ...grpc.CallOption) (*CreateDictDataResponse, error) {
	out := new(CreateDictDataResponse)
	err := c.cc.Invoke(ctx, DictService_CreateDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*DictData, error) {
	out := new(DictData)
	err := c.cc.Invoke(ctx, DictService_GetDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDictData(ctx context.Context, in *UpdateDictDataRequest, opts ...grpc.CallOption) (*UpdateDictDataResponse, error) {
	out := new(UpdateDictDataResponse)
	err := c.cc.Invoke(ctx, DictService_UpdateDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...grpc.CallOption) (*DeleteDictDataResponse, error) {
	out := new(DeleteDictDataResponse)
	err := c.cc.Invoke(ctx, DictService_DeleteDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictServiceClient) UpdateDictDataState(ctx context.Context, in *UpdateDictDataStateRequest, opts ...grpc.CallOption) (*UpdateDictDataStateResponse, error) {
	out := new(UpdateDictDataStateResponse)
	err := c.cc.Invoke(ctx, DictService_UpdateDictDataState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServiceServer is the server API for DictService service.
// All implementations must embed UnimplementedDictServiceServer
// for forward compatibility
type DictServiceServer interface {
	// 列表字典
	ListDict(context.Context, *ListDictRequest) (*ListDictResponse, error)
	// 创建字典
	CreateDict(context.Context, *CreateDictRequest) (*CreateDictResponse, error)
	// 获取字典
	GetDict(context.Context, *GetDictRequest) (*Dict, error)
	// 修改字典
	UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictResponse, error)
	// 删除字典
	DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictResponse, error)
	// 设置字典状态
	UpdateDictState(context.Context, *UpdateDictStateRequest) (*UpdateDictStateResponse, error)
	// 列表字典数据
	ListDictData(context.Context, *ListDictDataRequest) (*ListDictDataResponse, error)
	// 创建字典数据
	CreateDictData(context.Context, *CreateDictDataRequest) (*CreateDictDataResponse, error)
	// 获取字典数据
	GetDictData(context.Context, *GetDictDataRequest) (*DictData, error)
	// 修改字典数据
	UpdateDictData(context.Context, *UpdateDictDataRequest) (*UpdateDictDataResponse, error)
	// 删除字典数据
	DeleteDictData(context.Context, *DeleteDictDataRequest) (*DeleteDictDataResponse, error)
	// 设置字典数据状态
	UpdateDictDataState(context.Context, *UpdateDictDataStateRequest) (*UpdateDictDataStateResponse, error)
	mustEmbedUnimplementedDictServiceServer()
}

// UnimplementedDictServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDictServiceServer struct {
}

func (UnimplementedDictServiceServer) ListDict(context.Context, *ListDictRequest) (*ListDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDict not implemented")
}
func (UnimplementedDictServiceServer) CreateDict(context.Context, *CreateDictRequest) (*CreateDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDict not implemented")
}
func (UnimplementedDictServiceServer) GetDict(context.Context, *GetDictRequest) (*Dict, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDict not implemented")
}
func (UnimplementedDictServiceServer) UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDict not implemented")
}
func (UnimplementedDictServiceServer) DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDict not implemented")
}
func (UnimplementedDictServiceServer) UpdateDictState(context.Context, *UpdateDictStateRequest) (*UpdateDictStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictState not implemented")
}
func (UnimplementedDictServiceServer) ListDictData(context.Context, *ListDictDataRequest) (*ListDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictData not implemented")
}
func (UnimplementedDictServiceServer) CreateDictData(context.Context, *CreateDictDataRequest) (*CreateDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictData not implemented")
}
func (UnimplementedDictServiceServer) GetDictData(context.Context, *GetDictDataRequest) (*DictData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictData not implemented")
}
func (UnimplementedDictServiceServer) UpdateDictData(context.Context, *UpdateDictDataRequest) (*UpdateDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictData not implemented")
}
func (UnimplementedDictServiceServer) DeleteDictData(context.Context, *DeleteDictDataRequest) (*DeleteDictDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictData not implemented")
}
func (UnimplementedDictServiceServer) UpdateDictDataState(context.Context, *UpdateDictDataStateRequest) (*UpdateDictDataStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictDataState not implemented")
}
func (UnimplementedDictServiceServer) mustEmbedUnimplementedDictServiceServer() {}

// UnsafeDictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictServiceServer will
// result in compilation errors.
type UnsafeDictServiceServer interface {
	mustEmbedUnimplementedDictServiceServer()
}

func RegisterDictServiceServer(s grpc.ServiceRegistrar, srv DictServiceServer) {
	s.RegisterService(&DictService_ServiceDesc, srv)
}

func _DictService_ListDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).ListDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_ListDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).ListDict(ctx, req.(*ListDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_CreateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).CreateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_CreateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).CreateDict(ctx, req.(*CreateDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_GetDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).GetDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_GetDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).GetDict(ctx, req.(*GetDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDict(ctx, req.(*UpdateDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DeleteDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DeleteDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DeleteDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DeleteDict(ctx, req.(*DeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDictState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDictState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDictState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDictState(ctx, req.(*UpdateDictStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_ListDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).ListDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_ListDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).ListDictData(ctx, req.(*ListDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_CreateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).CreateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_CreateDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).CreateDictData(ctx, req.(*CreateDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_GetDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).GetDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_GetDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).GetDictData(ctx, req.(*GetDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDictData(ctx, req.(*UpdateDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_DeleteDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).DeleteDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_DeleteDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).DeleteDictData(ctx, req.(*DeleteDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictService_UpdateDictDataState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDataStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServiceServer).UpdateDictDataState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictService_UpdateDictDataState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServiceServer).UpdateDictDataState(ctx, req.(*UpdateDictDataStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictService_ServiceDesc is the grpc.ServiceDesc for DictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.service.v1.DictService",
	HandlerType: (*DictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDict",
			Handler:    _DictService_ListDict_Handler,
		},
		{
			MethodName: "CreateDict",
			Handler:    _DictService_CreateDict_Handler,
		},
		{
			MethodName: "GetDict",
			Handler:    _DictService_GetDict_Handler,
		},
		{
			MethodName: "UpdateDict",
			Handler:    _DictService_UpdateDict_Handler,
		},
		{
			MethodName: "DeleteDict",
			Handler:    _DictService_DeleteDict_Handler,
		},
		{
			MethodName: "UpdateDictState",
			Handler:    _DictService_UpdateDictState_Handler,
		},
		{
			MethodName: "ListDictData",
			Handler:    _DictService_ListDictData_Handler,
		},
		{
			MethodName: "CreateDictData",
			Handler:    _DictService_CreateDictData_Handler,
		},
		{
			MethodName: "GetDictData",
			Handler:    _DictService_GetDictData_Handler,
		},
		{
			MethodName: "UpdateDictData",
			Handler:    _DictService_UpdateDictData_Handler,
		},
		{
			MethodName: "DeleteDictData",
			Handler:    _DictService_DeleteDictData_Handler,
		},
		{
			MethodName: "UpdateDictDataState",
			Handler:    _DictService_UpdateDictDataState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/service/v1/dict.proto",
}
