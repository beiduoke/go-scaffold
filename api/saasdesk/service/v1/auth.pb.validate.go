// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saasdesk/service/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAuth() == nil {
		err := RegisterRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 20 {
		err := RegisterRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for RefreshToken

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogoutResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogoutResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogoutResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on LoginByPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordRequestMultiError, or nil if none found.
func (m *LoginByPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAuth() == nil {
		err := LoginByPasswordRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginByPasswordRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginByPasswordRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginByPasswordRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 20 {
		err := LoginByPasswordRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByPasswordRequestMultiError(errors)
	}

	return nil
}

// LoginByPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by LoginByPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginByPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordRequestMultiError) AllErrors() []error { return m }

// LoginByPasswordRequestValidationError is the validation error returned by
// LoginByPasswordRequest.Validate if the designated constraints aren't met.
type LoginByPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordRequestValidationError) ErrorName() string {
	return "LoginByPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordRequestValidationError{}

// Validate checks the field values on LoginBySmsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginBySmsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginBySmsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginBySmsRequestMultiError, or nil if none found.
func (m *LoginBySmsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginBySmsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAuth() == nil {
		err := LoginBySmsRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginBySmsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginBySmsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginBySmsRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 20 {
		err := LoginBySmsRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginBySmsRequestMultiError(errors)
	}

	return nil
}

// LoginBySmsRequestMultiError is an error wrapping multiple validation errors
// returned by LoginBySmsRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginBySmsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginBySmsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginBySmsRequestMultiError) AllErrors() []error { return m }

// LoginBySmsRequestValidationError is the validation error returned by
// LoginBySmsRequest.Validate if the designated constraints aren't met.
type LoginBySmsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginBySmsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginBySmsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginBySmsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginBySmsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginBySmsRequestValidationError) ErrorName() string {
	return "LoginBySmsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginBySmsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginBySmsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginBySmsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginBySmsRequestValidationError{}

// Validate checks the field values on LoginByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByEmailRequestMultiError, or nil if none found.
func (m *LoginByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAuth() == nil {
		err := LoginByEmailRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginByEmailRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginByEmailRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginByEmailRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 20 {
		err := LoginByEmailRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByEmailRequestMultiError(errors)
	}

	return nil
}

// LoginByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by LoginByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByEmailRequestMultiError) AllErrors() []error { return m }

// LoginByEmailRequestValidationError is the validation error returned by
// LoginByEmailRequest.Validate if the designated constraints aren't met.
type LoginByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByEmailRequestValidationError) ErrorName() string {
	return "LoginByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByEmailRequestValidationError{}

// Validate checks the field values on GetAuthInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthInfoRequestMultiError, or nil if none found.
func (m *GetAuthInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthInfoRequestMultiError(errors)
	}

	return nil
}

// GetAuthInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuthInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuthInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthInfoRequestMultiError) AllErrors() []error { return m }

// GetAuthInfoRequestValidationError is the validation error returned by
// GetAuthInfoRequest.Validate if the designated constraints aren't met.
type GetAuthInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthInfoRequestValidationError) ErrorName() string {
	return "GetAuthInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthInfoRequestValidationError{}

// Validate checks the field values on GetAuthInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthInfoResponseMultiError, or nil if none found.
func (m *GetAuthInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for NickName

	// no validation rules for RealName

	// no validation rules for Birthday

	// no validation rules for Gender

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Avatar

	// no validation rules for State

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAuthInfoResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAuthInfoResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAuthInfoResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAuthInfoResponseMultiError(errors)
	}

	return nil
}

// GetAuthInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuthInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuthInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthInfoResponseMultiError) AllErrors() []error { return m }

// GetAuthInfoResponseValidationError is the validation error returned by
// GetAuthInfoResponse.Validate if the designated constraints aren't met.
type GetAuthInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthInfoResponseValidationError) ErrorName() string {
	return "GetAuthInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthInfoResponseValidationError{}

// Validate checks the field values on GetAuthProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthProfileRequestMultiError, or nil if none found.
func (m *GetAuthProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthProfileRequestMultiError(errors)
	}

	return nil
}

// GetAuthProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuthProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuthProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthProfileRequestMultiError) AllErrors() []error { return m }

// GetAuthProfileRequestValidationError is the validation error returned by
// GetAuthProfileRequest.Validate if the designated constraints aren't met.
type GetAuthProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthProfileRequestValidationError) ErrorName() string {
	return "GetAuthProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthProfileRequestValidationError{}

// Validate checks the field values on GetAuthProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthProfileResponseMultiError, or nil if none found.
func (m *GetAuthProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthProfileResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAuthProfileResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAuthProfileResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAuthProfileResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAuthProfileResponseMultiError(errors)
	}

	return nil
}

// GetAuthProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuthProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuthProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthProfileResponseMultiError) AllErrors() []error { return m }

// GetAuthProfileResponseValidationError is the validation error returned by
// GetAuthProfileResponse.Validate if the designated constraints aren't met.
type GetAuthProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthProfileResponseValidationError) ErrorName() string {
	return "GetAuthProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthProfileResponseValidationError{}

// Validate checks the field values on RegisterRequest_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest_Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequest_AuthMultiError, or nil if none found.
func (m *RegisterRequest_Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest_Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := RegisterRequest_AuthValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 25 {
		err := RegisterRequest_AuthValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 25 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterRequest_Auth_Phone_Pattern.MatchString(m.GetPhone()) {
		err := RegisterRequest_AuthValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequest_AuthMultiError(errors)
	}

	return nil
}

// RegisterRequest_AuthMultiError is an error wrapping multiple validation
// errors returned by RegisterRequest_Auth.ValidateAll() if the designated
// constraints aren't met.
type RegisterRequest_AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequest_AuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequest_AuthMultiError) AllErrors() []error { return m }

// RegisterRequest_AuthValidationError is the validation error returned by
// RegisterRequest_Auth.Validate if the designated constraints aren't met.
type RegisterRequest_AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequest_AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequest_AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequest_AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequest_AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequest_AuthValidationError) ErrorName() string {
	return "RegisterRequest_AuthValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRequest_AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest_Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequest_AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequest_AuthValidationError{}

var _RegisterRequest_Auth_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on LoginByPasswordRequest_Auth with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordRequest_Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordRequest_Auth with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordRequest_AuthMultiError, or nil if none found.
func (m *LoginByPasswordRequest_Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordRequest_Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 1 || l > 10 {
		err := LoginByPasswordRequest_AuthValidationError{
			field:  "Account",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 28 {
		err := LoginByPasswordRequest_AuthValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 28 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByPasswordRequest_AuthMultiError(errors)
	}

	return nil
}

// LoginByPasswordRequest_AuthMultiError is an error wrapping multiple
// validation errors returned by LoginByPasswordRequest_Auth.ValidateAll() if
// the designated constraints aren't met.
type LoginByPasswordRequest_AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordRequest_AuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordRequest_AuthMultiError) AllErrors() []error { return m }

// LoginByPasswordRequest_AuthValidationError is the validation error returned
// by LoginByPasswordRequest_Auth.Validate if the designated constraints
// aren't met.
type LoginByPasswordRequest_AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordRequest_AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordRequest_AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordRequest_AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordRequest_AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordRequest_AuthValidationError) ErrorName() string {
	return "LoginByPasswordRequest_AuthValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordRequest_AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordRequest_Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordRequest_AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordRequest_AuthValidationError{}

// Validate checks the field values on LoginBySmsRequest_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginBySmsRequest_Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginBySmsRequest_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginBySmsRequest_AuthMultiError, or nil if none found.
func (m *LoginBySmsRequest_Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginBySmsRequest_Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_LoginBySmsRequest_Auth_Phone_Pattern.MatchString(m.GetPhone()) {
		err := LoginBySmsRequest_AuthValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_LoginBySmsRequest_Auth_Code_Pattern.MatchString(m.GetCode()) {
		err := LoginBySmsRequest_AuthValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[0-9]{6}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginBySmsRequest_AuthMultiError(errors)
	}

	return nil
}

// LoginBySmsRequest_AuthMultiError is an error wrapping multiple validation
// errors returned by LoginBySmsRequest_Auth.ValidateAll() if the designated
// constraints aren't met.
type LoginBySmsRequest_AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginBySmsRequest_AuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginBySmsRequest_AuthMultiError) AllErrors() []error { return m }

// LoginBySmsRequest_AuthValidationError is the validation error returned by
// LoginBySmsRequest_Auth.Validate if the designated constraints aren't met.
type LoginBySmsRequest_AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginBySmsRequest_AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginBySmsRequest_AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginBySmsRequest_AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginBySmsRequest_AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginBySmsRequest_AuthValidationError) ErrorName() string {
	return "LoginBySmsRequest_AuthValidationError"
}

// Error satisfies the builtin error interface
func (e LoginBySmsRequest_AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginBySmsRequest_Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginBySmsRequest_AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginBySmsRequest_AuthValidationError{}

var _LoginBySmsRequest_Auth_Phone_Pattern = regexp.MustCompile("^1[0-9]{10}$")

var _LoginBySmsRequest_Auth_Code_Pattern = regexp.MustCompile("^[0-9]{6}$")

// Validate checks the field values on LoginByEmailRequest_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByEmailRequest_Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByEmailRequest_Auth with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByEmailRequest_AuthMultiError, or nil if none found.
func (m *LoginByEmailRequest_Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByEmailRequest_Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginByEmailRequest_AuthValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_LoginByEmailRequest_Auth_Code_Pattern.MatchString(m.GetCode()) {
		err := LoginByEmailRequest_AuthValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[0-9]{4,6}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByEmailRequest_AuthMultiError(errors)
	}

	return nil
}

func (m *LoginByEmailRequest_Auth) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginByEmailRequest_Auth) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginByEmailRequest_AuthMultiError is an error wrapping multiple validation
// errors returned by LoginByEmailRequest_Auth.ValidateAll() if the designated
// constraints aren't met.
type LoginByEmailRequest_AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByEmailRequest_AuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByEmailRequest_AuthMultiError) AllErrors() []error { return m }

// LoginByEmailRequest_AuthValidationError is the validation error returned by
// LoginByEmailRequest_Auth.Validate if the designated constraints aren't met.
type LoginByEmailRequest_AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByEmailRequest_AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByEmailRequest_AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByEmailRequest_AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByEmailRequest_AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByEmailRequest_AuthValidationError) ErrorName() string {
	return "LoginByEmailRequest_AuthValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByEmailRequest_AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByEmailRequest_Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByEmailRequest_AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByEmailRequest_AuthValidationError{}

var _LoginByEmailRequest_Auth_Code_Pattern = regexp.MustCompile("^[0-9]{4,6}$")
