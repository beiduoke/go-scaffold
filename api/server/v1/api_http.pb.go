// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.21.5
// source: server/v1/api.proto

package v1

import (
	context "context"
	protobuf "github.com/beiduoke/go-scaffold/api/protobuf"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationApiCreateDept = "/api.server.v1.Api/CreateDept"
const OperationApiCreateDomain = "/api.server.v1.Api/CreateDomain"
const OperationApiCreateMenu = "/api.server.v1.Api/CreateMenu"
const OperationApiCreatePost = "/api.server.v1.Api/CreatePost"
const OperationApiCreateResource = "/api.server.v1.Api/CreateResource"
const OperationApiCreateRole = "/api.server.v1.Api/CreateRole"
const OperationApiCreateUser = "/api.server.v1.Api/CreateUser"
const OperationApiDeleteDept = "/api.server.v1.Api/DeleteDept"
const OperationApiDeleteDomain = "/api.server.v1.Api/DeleteDomain"
const OperationApiDeleteMenu = "/api.server.v1.Api/DeleteMenu"
const OperationApiDeletePost = "/api.server.v1.Api/DeletePost"
const OperationApiDeleteResource = "/api.server.v1.Api/DeleteResource"
const OperationApiDeleteRole = "/api.server.v1.Api/DeleteRole"
const OperationApiDeleteUser = "/api.server.v1.Api/DeleteUser"
const OperationApiEmailLogin = "/api.server.v1.Api/EmailLogin"
const OperationApiExistUserName = "/api.server.v1.Api/ExistUserName"
const OperationApiGetDept = "/api.server.v1.Api/GetDept"
const OperationApiGetDomain = "/api.server.v1.Api/GetDomain"
const OperationApiGetDomainCode = "/api.server.v1.Api/GetDomainCode"
const OperationApiGetDomainName = "/api.server.v1.Api/GetDomainName"
const OperationApiGetMenu = "/api.server.v1.Api/GetMenu"
const OperationApiGetPost = "/api.server.v1.Api/GetPost"
const OperationApiGetResource = "/api.server.v1.Api/GetResource"
const OperationApiGetRole = "/api.server.v1.Api/GetRole"
const OperationApiGetRoleDataScope = "/api.server.v1.Api/GetRoleDataScope"
const OperationApiGetUser = "/api.server.v1.Api/GetUser"
const OperationApiGetUserInfo = "/api.server.v1.Api/GetUserInfo"
const OperationApiGetUserProfile = "/api.server.v1.Api/GetUserProfile"
const OperationApiHandleDomainMenu = "/api.server.v1.Api/HandleDomainMenu"
const OperationApiHandleRoleDataScope = "/api.server.v1.Api/HandleRoleDataScope"
const OperationApiHandleRoleMenu = "/api.server.v1.Api/HandleRoleMenu"
const OperationApiHandleRoleResource = "/api.server.v1.Api/HandleRoleResource"
const OperationApiHandleUserRole = "/api.server.v1.Api/HandleUserRole"
const OperationApiListDept = "/api.server.v1.Api/ListDept"
const OperationApiListDeptTree = "/api.server.v1.Api/ListDeptTree"
const OperationApiListDomain = "/api.server.v1.Api/ListDomain"
const OperationApiListDomainMenu = "/api.server.v1.Api/ListDomainMenu"
const OperationApiListDomainTree = "/api.server.v1.Api/ListDomainTree"
const OperationApiListMenu = "/api.server.v1.Api/ListMenu"
const OperationApiListMenuTree = "/api.server.v1.Api/ListMenuTree"
const OperationApiListPost = "/api.server.v1.Api/ListPost"
const OperationApiListResource = "/api.server.v1.Api/ListResource"
const OperationApiListResourceGroup = "/api.server.v1.Api/ListResourceGroup"
const OperationApiListRole = "/api.server.v1.Api/ListRole"
const OperationApiListRoleDept = "/api.server.v1.Api/ListRoleDept"
const OperationApiListRoleMenu = "/api.server.v1.Api/ListRoleMenu"
const OperationApiListRoleResource = "/api.server.v1.Api/ListRoleResource"
const OperationApiListUser = "/api.server.v1.Api/ListUser"
const OperationApiListUserRole = "/api.server.v1.Api/ListUserRole"
const OperationApiListUserRoleMenuRouterTree = "/api.server.v1.Api/ListUserRoleMenuRouterTree"
const OperationApiListUserRoleMenuTree = "/api.server.v1.Api/ListUserRoleMenuTree"
const OperationApiListUserRolePermission = "/api.server.v1.Api/ListUserRolePermission"
const OperationApiLogin = "/api.server.v1.Api/Login"
const OperationApiLogout = "/api.server.v1.Api/Logout"
const OperationApiRegister = "/api.server.v1.Api/Register"
const OperationApiSmsLogin = "/api.server.v1.Api/SmsLogin"
const OperationApiUpdateDept = "/api.server.v1.Api/UpdateDept"
const OperationApiUpdateDomain = "/api.server.v1.Api/UpdateDomain"
const OperationApiUpdateDomainState = "/api.server.v1.Api/UpdateDomainState"
const OperationApiUpdateMenu = "/api.server.v1.Api/UpdateMenu"
const OperationApiUpdatePost = "/api.server.v1.Api/UpdatePost"
const OperationApiUpdatePostState = "/api.server.v1.Api/UpdatePostState"
const OperationApiUpdateResource = "/api.server.v1.Api/UpdateResource"
const OperationApiUpdateRole = "/api.server.v1.Api/UpdateRole"
const OperationApiUpdateRoleState = "/api.server.v1.Api/UpdateRoleState"
const OperationApiUpdateUser = "/api.server.v1.Api/UpdateUser"

type ApiHTTPServer interface {
	CreateDept(context.Context, *CreateDeptReq) (*CreateDeptReply, error)
	CreateDomain(context.Context, *CreateDomainReq) (*CreateDomainReply, error)
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuReply, error)
	CreatePost(context.Context, *CreatePostReq) (*CreatePostReply, error)
	CreateResource(context.Context, *CreateResourceReq) (*CreateResourceReply, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleReply, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	DeleteDept(context.Context, *DeleteDeptReq) (*DeleteDeptReply, error)
	DeleteDomain(context.Context, *DeleteDomainReq) (*DeleteDomainReply, error)
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuReply, error)
	DeletePost(context.Context, *DeletePostReq) (*DeletePostReply, error)
	DeleteResource(context.Context, *DeleteResourceReq) (*DeleteResourceReply, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleReply, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	EmailLogin(context.Context, *EmailLoginReq) (*LoginReply, error)
	ExistUserName(context.Context, *ExistUserNameReq) (*ExistUserNameReply, error)
	GetDept(context.Context, *GetDeptReq) (*Dept, error)
	GetDomain(context.Context, *GetDomainReq) (*Domain, error)
	GetDomainCode(context.Context, *GetDomainCodeReq) (*Domain, error)
	GetDomainName(context.Context, *GetDomainNameReq) (*Domain, error)
	GetMenu(context.Context, *GetMenuReq) (*Menu, error)
	GetPost(context.Context, *GetPostReq) (*Post, error)
	GetResource(context.Context, *GetResourceReq) (*Resource, error)
	GetRole(context.Context, *GetRoleReq) (*Role, error)
	GetRoleDataScope(context.Context, *GetRoleDataScopeReq) (*RoleDataScope, error)
	GetUser(context.Context, *GetUserReq) (*User, error)
	GetUserInfo(context.Context, *emptypb.Empty) (*GetUserInfoReply, error)
	GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileReply, error)
	HandleDomainMenu(context.Context, *HandleDomainMenuReq) (*HandleDomainMenuReply, error)
	HandleRoleDataScope(context.Context, *HandleRoleDataScopeReq) (*HandleRoleDataScopeReply, error)
	HandleRoleMenu(context.Context, *HandleRoleMenuReq) (*HandleRoleMenuReply, error)
	HandleRoleResource(context.Context, *HandleRoleResourceReq) (*HandleRoleResourceReply, error)
	HandleUserRole(context.Context, *HandleUserRoleReq) (*HandleUserRoleReply, error)
	ListDept(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListDeptTree(context.Context, *ListDeptTreeReq) (*ListDeptTreeReply, error)
	ListDomain(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListDomainMenu(context.Context, *ListDomainMenuReq) (*protobuf.PagingReply, error)
	ListDomainTree(context.Context, *ListDomainTreeReq) (*ListDomainTreeReply, error)
	ListMenu(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListMenuTree(context.Context, *ListMenuTreeReq) (*ListMenuTreeReply, error)
	ListPost(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListResource(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListResourceGroup(context.Context, *protobuf.PagingReq) (*ListResourceGroupReply, error)
	ListRole(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListRoleDept(context.Context, *ListRoleDeptReq) (*ListRoleDeptReply, error)
	ListRoleMenu(context.Context, *ListRoleMenuReq) (*ListRoleMenuReply, error)
	ListRoleResource(context.Context, *ListRoleResourceReq) (*ListRoleResourceReply, error)
	ListUser(context.Context, *protobuf.PagingReq) (*protobuf.PagingReply, error)
	ListUserRole(context.Context, *emptypb.Empty) (*ListUserRoleReply, error)
	ListUserRoleMenuRouterTree(context.Context, *ListUserRoleMenuRouterTreeReq) (*ListUserRoleMenuRouterTreeReply, error)
	ListUserRoleMenuTree(context.Context, *ListUserRoleMenuTreeReq) (*ListUserRoleMenuTreeReply, error)
	ListUserRolePermission(context.Context, *ListUserRolePermissionReq) (*ListUserRolePermissionReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *emptypb.Empty) (*LogoutReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	SmsLogin(context.Context, *SmsLoginReq) (*LoginReply, error)
	UpdateDept(context.Context, *UpdateDeptReq) (*UpdateDeptReply, error)
	UpdateDomain(context.Context, *UpdateDomainReq) (*UpdateDomainReply, error)
	UpdateDomainState(context.Context, *UpdateDomainStateReq) (*UpdateDomainStateReply, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error)
	UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostReply, error)
	UpdatePostState(context.Context, *UpdatePostStateReq) (*UpdatePostStateReply, error)
	UpdateResource(context.Context, *UpdateResourceReq) (*UpdateResourceReply, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleReply, error)
	UpdateRoleState(context.Context, *UpdateRoleStateReq) (*UpdateRoleStateReply, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/auth/logout", _Api_Logout0_HTTP_Handler(srv))
	r.POST("/v1/auth/logout", _Api_Logout1_HTTP_Handler(srv))
	r.POST("/v1/auth/login/{domain}", _Api_Login0_HTTP_Handler(srv))
	r.POST("/v1/auth/register/{domain}", _Api_Register0_HTTP_Handler(srv))
	r.POST("/v1/auth/smsLogin/{domain}", _Api_SmsLogin0_HTTP_Handler(srv))
	r.POST("/v1/auth/emailLogin/{domain}", _Api_EmailLogin0_HTTP_Handler(srv))
	r.GET("/v1/users/info", _Api_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/v1/users/profiles", _Api_GetUserProfile0_HTTP_Handler(srv))
	r.GET("/v1/users/roles", _Api_ListUserRole0_HTTP_Handler(srv))
	r.GET("/v1/users/roles/{role_id}/routers/trees", _Api_ListUserRoleMenuRouterTree0_HTTP_Handler(srv))
	r.GET("/v1/users/routers/trees", _Api_ListUserRoleMenuRouterTree1_HTTP_Handler(srv))
	r.GET("/v1/users/roles/{role_id}/menus/trees", _Api_ListUserRoleMenuTree0_HTTP_Handler(srv))
	r.GET("/v1/users/menus/trees", _Api_ListUserRoleMenuTree1_HTTP_Handler(srv))
	r.GET("/v1/users/roles/{role_id}/permissions", _Api_ListUserRolePermission0_HTTP_Handler(srv))
	r.GET("/v1/users/permissions", _Api_ListUserRolePermission1_HTTP_Handler(srv))
	r.GET("/v1/users", _Api_ListUser0_HTTP_Handler(srv))
	r.POST("/v1/users", _Api_CreateUser0_HTTP_Handler(srv))
	r.GET("/v1/users/{id}", _Api_GetUser0_HTTP_Handler(srv))
	r.PUT("/v1/users/{id}", _Api_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/v1/users/{id}", _Api_DeleteUser0_HTTP_Handler(srv))
	r.POST("/v1/users/{id}/roles", _Api_HandleUserRole0_HTTP_Handler(srv))
	r.POST("/v1/users/existName", _Api_ExistUserName0_HTTP_Handler(srv))
	r.GET("/v1/domains", _Api_ListDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/trees", _Api_ListDomainTree0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}/trees", _Api_ListDomainTree1_HTTP_Handler(srv))
	r.POST("/v1/domains", _Api_CreateDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}", _Api_GetDomain0_HTTP_Handler(srv))
	r.GET("/v1/domains/{code}/code", _Api_GetDomainCode0_HTTP_Handler(srv))
	r.GET("/v1/domains/{name}/name", _Api_GetDomainName0_HTTP_Handler(srv))
	r.PUT("/v1/domains/{id}", _Api_UpdateDomain0_HTTP_Handler(srv))
	r.DELETE("/v1/domains/{id}", _Api_DeleteDomain0_HTTP_Handler(srv))
	r.PUT("/v1/domains/{id}/state", _Api_UpdateDomainState0_HTTP_Handler(srv))
	r.GET("/v1/domains/{id}/menus", _Api_ListDomainMenu0_HTTP_Handler(srv))
	r.POST("/v1/domains/{id}/menus", _Api_HandleDomainMenu0_HTTP_Handler(srv))
	r.GET("/v1/roles", _Api_ListRole0_HTTP_Handler(srv))
	r.POST("/v1/roles", _Api_CreateRole0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}", _Api_GetRole0_HTTP_Handler(srv))
	r.PUT("/v1/roles/{id}", _Api_UpdateRole0_HTTP_Handler(srv))
	r.PUT("/v1/roles/{id}/state", _Api_UpdateRoleState0_HTTP_Handler(srv))
	r.DELETE("/v1/roles/{id}", _Api_DeleteRole0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/menus", _Api_ListRoleMenu0_HTTP_Handler(srv))
	r.POST("/v1/roles/{id}/menus", _Api_HandleRoleMenu0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/depts", _Api_ListRoleDept0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/dataScopes", _Api_GetRoleDataScope0_HTTP_Handler(srv))
	r.POST("/v1/roles/{id}/dataScopes", _Api_HandleRoleDataScope0_HTTP_Handler(srv))
	r.GET("/v1/roles/{id}/resources", _Api_ListRoleResource0_HTTP_Handler(srv))
	r.POST("/v1/roles/{id}/resources", _Api_HandleRoleResource0_HTTP_Handler(srv))
	r.GET("/v1/resources", _Api_ListResource0_HTTP_Handler(srv))
	r.GET("/v1/resources/groups", _Api_ListResourceGroup0_HTTP_Handler(srv))
	r.POST("/v1/resources", _Api_CreateResource0_HTTP_Handler(srv))
	r.GET("/v1/resources/{id}", _Api_GetResource0_HTTP_Handler(srv))
	r.PUT("/v1/resources/{id}", _Api_UpdateResource0_HTTP_Handler(srv))
	r.DELETE("/v1/resources/{id}", _Api_DeleteResource0_HTTP_Handler(srv))
	r.GET("/v1/menus", _Api_ListMenu0_HTTP_Handler(srv))
	r.POST("/v1/menus", _Api_CreateMenu0_HTTP_Handler(srv))
	r.GET("/v1/menus/{id}/trees", _Api_ListMenuTree0_HTTP_Handler(srv))
	r.GET("/v1/menus/{id}", _Api_GetMenu0_HTTP_Handler(srv))
	r.PUT("/v1/menus/{id}", _Api_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/v1/menus/{id}", _Api_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/v1/depts", _Api_ListDept0_HTTP_Handler(srv))
	r.POST("/v1/depts", _Api_CreateDept0_HTTP_Handler(srv))
	r.GET("/v1/depts/{id}", _Api_GetDept0_HTTP_Handler(srv))
	r.PUT("/v1/depts/{id}", _Api_UpdateDept0_HTTP_Handler(srv))
	r.DELETE("/v1/depts/{id}", _Api_DeleteDept0_HTTP_Handler(srv))
	r.GET("/v1/depts/{id}/trees", _Api_ListDeptTree0_HTTP_Handler(srv))
	r.GET("/v1/posts", _Api_ListPost0_HTTP_Handler(srv))
	r.POST("/v1/posts", _Api_CreatePost0_HTTP_Handler(srv))
	r.GET("/v1/posts/{id}", _Api_GetPost0_HTTP_Handler(srv))
	r.PUT("/v1/posts/{id}", _Api_UpdatePost0_HTTP_Handler(srv))
	r.DELETE("/v1/posts/{id}", _Api_DeletePost0_HTTP_Handler(srv))
	r.PUT("/v1/posts/{id}/state", _Api_UpdatePostState0_HTTP_Handler(srv))
}

func _Api_Logout0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Api_Logout1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Api_Login0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Api_Register0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Api_SmsLogin0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SmsLoginReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiSmsLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SmsLogin(ctx, req.(*SmsLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Api_EmailLogin0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmailLoginReq
		if err := ctx.Bind(&in.Auth); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiEmailLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EmailLogin(ctx, req.(*EmailLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetUserInfo0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetUserProfile0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUserRole0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUserRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRole(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUserRoleMenuRouterTree0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuRouterTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUserRoleMenuRouterTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuRouterTree(ctx, req.(*ListUserRoleMenuRouterTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuRouterTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUserRoleMenuRouterTree1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuRouterTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUserRoleMenuRouterTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuRouterTree(ctx, req.(*ListUserRoleMenuRouterTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuRouterTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUserRoleMenuTree0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUserRoleMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuTree(ctx, req.(*ListUserRoleMenuTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUserRoleMenuTree1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRoleMenuTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUserRoleMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRoleMenuTree(ctx, req.(*ListUserRoleMenuTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRoleMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUserRolePermission0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRolePermissionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUserRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRolePermission(ctx, req.(*ListUserRolePermissionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRolePermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUserRolePermission1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRolePermissionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUserRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserRolePermission(ctx, req.(*ListUserRolePermissionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserRolePermissionReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListUser0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreateUser0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetUser0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateUser0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteUser0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _Api_HandleUserRole0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleUserRoleReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiHandleUserRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleUserRole(ctx, req.(*HandleUserRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleUserRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ExistUserName0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExistUserNameReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiExistUserName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistUserName(ctx, req.(*ExistUserNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExistUserNameReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListDomain0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomain(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListDomainTree0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListDomainTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainTree(ctx, req.(*ListDomainTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListDomainTree1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListDomainTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainTree(ctx, req.(*ListDomainTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDomainTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreateDomain0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDomainReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDomain(ctx, req.(*CreateDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetDomain0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomain(ctx, req.(*GetDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _Api_GetDomainCode0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainCodeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetDomainCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainCode(ctx, req.(*GetDomainCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _Api_GetDomainName0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDomainNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetDomainName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDomainName(ctx, req.(*GetDomainNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Domain)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateDomain0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomain(ctx, req.(*UpdateDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteDomain0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDomainReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeleteDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDomain(ctx, req.(*DeleteDomainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDomainReply)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateDomainState0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDomainStateReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateDomainState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDomainState(ctx, req.(*UpdateDomainStateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDomainStateReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListDomainMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDomainMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListDomainMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDomainMenu(ctx, req.(*ListDomainMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_HandleDomainMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleDomainMenuReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiHandleDomainMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleDomainMenu(ctx, req.(*HandleDomainMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleDomainMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListRole0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreateRole0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetRole0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateRole0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateRoleState0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleStateReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateRoleState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoleState(ctx, req.(*UpdateRoleStateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleStateReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteRole0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListRoleMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleMenu(ctx, req.(*ListRoleMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Api_HandleRoleMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRoleMenuReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiHandleRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRoleMenu(ctx, req.(*HandleRoleMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRoleMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListRoleDept0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleDeptReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListRoleDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleDept(ctx, req.(*ListRoleDeptReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetRoleDataScope0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleDataScopeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetRoleDataScope)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleDataScope(ctx, req.(*GetRoleDataScopeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleDataScope)
		return ctx.Result(200, reply)
	}
}

func _Api_HandleRoleDataScope0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRoleDataScopeReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiHandleRoleDataScope)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRoleDataScope(ctx, req.(*HandleRoleDataScopeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRoleDataScopeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListRoleResource0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleResourceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListRoleResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleResource(ctx, req.(*ListRoleResourceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Api_HandleRoleResource0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandleRoleResourceReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiHandleRoleResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleRoleResource(ctx, req.(*HandleRoleResourceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleRoleResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListResource0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResource(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListResourceGroup0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListResourceGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResourceGroup(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourceGroupReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreateResource0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateResourceReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateResource(ctx, req.(*CreateResourceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetResource0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResource(ctx, req.(*GetResourceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Resource)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateResource0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateResource(ctx, req.(*UpdateResourceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteResource0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenu(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreateMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListMenuTree0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMenuTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenuTree(ctx, req.(*ListMenuTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMenuTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*GetMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Menu)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteMenu0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMenuReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListDept0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDept(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreateDept0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeptReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDept(ctx, req.(*CreateDeptReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetDept0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeptReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDept(ctx, req.(*GetDeptReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Dept)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateDept0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeptReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDept(ctx, req.(*UpdateDeptReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteDept0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDeptReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeleteDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDept(ctx, req.(*DeleteDeptReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListDeptTree0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeptTreeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListDeptTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDeptTree(ctx, req.(*ListDeptTreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeptTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListPost0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in protobuf.PagingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListPost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPost(ctx, req.(*protobuf.PagingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*protobuf.PagingReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreatePost0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePostReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*CreatePostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePostReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetPost0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPostReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetPost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPost(ctx, req.(*GetPostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Post)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdatePost0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePostReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePost(ctx, req.(*UpdatePostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePostReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeletePost0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePostReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeletePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePost(ctx, req.(*DeletePostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePostReply)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdatePostState0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePostStateReq
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdatePostState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePostState(ctx, req.(*UpdatePostStateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePostStateReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	CreateDept(ctx context.Context, req *CreateDeptReq, opts ...http.CallOption) (rsp *CreateDeptReply, err error)
	CreateDomain(ctx context.Context, req *CreateDomainReq, opts ...http.CallOption) (rsp *CreateDomainReply, err error)
	CreateMenu(ctx context.Context, req *CreateMenuReq, opts ...http.CallOption) (rsp *CreateMenuReply, err error)
	CreatePost(ctx context.Context, req *CreatePostReq, opts ...http.CallOption) (rsp *CreatePostReply, err error)
	CreateResource(ctx context.Context, req *CreateResourceReq, opts ...http.CallOption) (rsp *CreateResourceReply, err error)
	CreateRole(ctx context.Context, req *CreateRoleReq, opts ...http.CallOption) (rsp *CreateRoleReply, err error)
	CreateUser(ctx context.Context, req *CreateUserReq, opts ...http.CallOption) (rsp *CreateUserReply, err error)
	DeleteDept(ctx context.Context, req *DeleteDeptReq, opts ...http.CallOption) (rsp *DeleteDeptReply, err error)
	DeleteDomain(ctx context.Context, req *DeleteDomainReq, opts ...http.CallOption) (rsp *DeleteDomainReply, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuReq, opts ...http.CallOption) (rsp *DeleteMenuReply, err error)
	DeletePost(ctx context.Context, req *DeletePostReq, opts ...http.CallOption) (rsp *DeletePostReply, err error)
	DeleteResource(ctx context.Context, req *DeleteResourceReq, opts ...http.CallOption) (rsp *DeleteResourceReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleReq, opts ...http.CallOption) (rsp *DeleteRoleReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserReq, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	EmailLogin(ctx context.Context, req *EmailLoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	ExistUserName(ctx context.Context, req *ExistUserNameReq, opts ...http.CallOption) (rsp *ExistUserNameReply, err error)
	GetDept(ctx context.Context, req *GetDeptReq, opts ...http.CallOption) (rsp *Dept, err error)
	GetDomain(ctx context.Context, req *GetDomainReq, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainCode(ctx context.Context, req *GetDomainCodeReq, opts ...http.CallOption) (rsp *Domain, err error)
	GetDomainName(ctx context.Context, req *GetDomainNameReq, opts ...http.CallOption) (rsp *Domain, err error)
	GetMenu(ctx context.Context, req *GetMenuReq, opts ...http.CallOption) (rsp *Menu, err error)
	GetPost(ctx context.Context, req *GetPostReq, opts ...http.CallOption) (rsp *Post, err error)
	GetResource(ctx context.Context, req *GetResourceReq, opts ...http.CallOption) (rsp *Resource, err error)
	GetRole(ctx context.Context, req *GetRoleReq, opts ...http.CallOption) (rsp *Role, err error)
	GetRoleDataScope(ctx context.Context, req *GetRoleDataScopeReq, opts ...http.CallOption) (rsp *RoleDataScope, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *User, err error)
	GetUserInfo(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetUserInfoReply, err error)
	GetUserProfile(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetUserProfileReply, err error)
	HandleDomainMenu(ctx context.Context, req *HandleDomainMenuReq, opts ...http.CallOption) (rsp *HandleDomainMenuReply, err error)
	HandleRoleDataScope(ctx context.Context, req *HandleRoleDataScopeReq, opts ...http.CallOption) (rsp *HandleRoleDataScopeReply, err error)
	HandleRoleMenu(ctx context.Context, req *HandleRoleMenuReq, opts ...http.CallOption) (rsp *HandleRoleMenuReply, err error)
	HandleRoleResource(ctx context.Context, req *HandleRoleResourceReq, opts ...http.CallOption) (rsp *HandleRoleResourceReply, err error)
	HandleUserRole(ctx context.Context, req *HandleUserRoleReq, opts ...http.CallOption) (rsp *HandleUserRoleReply, err error)
	ListDept(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListDeptTree(ctx context.Context, req *ListDeptTreeReq, opts ...http.CallOption) (rsp *ListDeptTreeReply, err error)
	ListDomain(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListDomainMenu(ctx context.Context, req *ListDomainMenuReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListDomainTree(ctx context.Context, req *ListDomainTreeReq, opts ...http.CallOption) (rsp *ListDomainTreeReply, err error)
	ListMenu(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListMenuTree(ctx context.Context, req *ListMenuTreeReq, opts ...http.CallOption) (rsp *ListMenuTreeReply, err error)
	ListPost(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListResource(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListResourceGroup(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *ListResourceGroupReply, err error)
	ListRole(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListRoleDept(ctx context.Context, req *ListRoleDeptReq, opts ...http.CallOption) (rsp *ListRoleDeptReply, err error)
	ListRoleMenu(ctx context.Context, req *ListRoleMenuReq, opts ...http.CallOption) (rsp *ListRoleMenuReply, err error)
	ListRoleResource(ctx context.Context, req *ListRoleResourceReq, opts ...http.CallOption) (rsp *ListRoleResourceReply, err error)
	ListUser(ctx context.Context, req *protobuf.PagingReq, opts ...http.CallOption) (rsp *protobuf.PagingReply, err error)
	ListUserRole(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListUserRoleReply, err error)
	ListUserRoleMenuRouterTree(ctx context.Context, req *ListUserRoleMenuRouterTreeReq, opts ...http.CallOption) (rsp *ListUserRoleMenuRouterTreeReply, err error)
	ListUserRoleMenuTree(ctx context.Context, req *ListUserRoleMenuTreeReq, opts ...http.CallOption) (rsp *ListUserRoleMenuTreeReply, err error)
	ListUserRolePermission(ctx context.Context, req *ListUserRolePermissionReq, opts ...http.CallOption) (rsp *ListUserRolePermissionReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
	SmsLogin(ctx context.Context, req *SmsLoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	UpdateDept(ctx context.Context, req *UpdateDeptReq, opts ...http.CallOption) (rsp *UpdateDeptReply, err error)
	UpdateDomain(ctx context.Context, req *UpdateDomainReq, opts ...http.CallOption) (rsp *UpdateDomainReply, err error)
	UpdateDomainState(ctx context.Context, req *UpdateDomainStateReq, opts ...http.CallOption) (rsp *UpdateDomainStateReply, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuReq, opts ...http.CallOption) (rsp *UpdateMenuReply, err error)
	UpdatePost(ctx context.Context, req *UpdatePostReq, opts ...http.CallOption) (rsp *UpdatePostReply, err error)
	UpdatePostState(ctx context.Context, req *UpdatePostStateReq, opts ...http.CallOption) (rsp *UpdatePostStateReply, err error)
	UpdateResource(ctx context.Context, req *UpdateResourceReq, opts ...http.CallOption) (rsp *UpdateResourceReply, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...http.CallOption) (rsp *UpdateRoleReply, err error)
	UpdateRoleState(ctx context.Context, req *UpdateRoleStateReq, opts ...http.CallOption) (rsp *UpdateRoleStateReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) CreateDept(ctx context.Context, in *CreateDeptReq, opts ...http.CallOption) (*CreateDeptReply, error) {
	var out CreateDeptReply
	pattern := "/v1/depts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreateDomain(ctx context.Context, in *CreateDomainReq, opts ...http.CallOption) (*CreateDomainReply, error) {
	var out CreateDomainReply
	pattern := "/v1/domains"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...http.CallOption) (*CreateMenuReply, error) {
	var out CreateMenuReply
	pattern := "/v1/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostReq, opts ...http.CallOption) (*CreatePostReply, error) {
	var out CreatePostReply
	pattern := "/v1/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreateResource(ctx context.Context, in *CreateResourceReq, opts ...http.CallOption) (*CreateResourceReply, error) {
	var out CreateResourceReply
	pattern := "/v1/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...http.CallOption) (*CreateRoleReply, error) {
	var out CreateRoleReply
	pattern := "/v1/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserReq, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/v1/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteDept(ctx context.Context, in *DeleteDeptReq, opts ...http.CallOption) (*DeleteDeptReply, error) {
	var out DeleteDeptReply
	pattern := "/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiDeleteDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteDomain(ctx context.Context, in *DeleteDomainReq, opts ...http.CallOption) (*DeleteDomainReply, error) {
	var out DeleteDomainReply
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiDeleteDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...http.CallOption) (*DeleteMenuReply, error) {
	var out DeleteMenuReply
	pattern := "/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeletePost(ctx context.Context, in *DeletePostReq, opts ...http.CallOption) (*DeletePostReply, error) {
	var out DeletePostReply
	pattern := "/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiDeletePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceReq, opts ...http.CallOption) (*DeleteResourceReply, error) {
	var out DeleteResourceReply
	pattern := "/v1/resources/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...http.CallOption) (*DeleteRoleReply, error) {
	var out DeleteRoleReply
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) EmailLogin(ctx context.Context, in *EmailLoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/auth/emailLogin/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiEmailLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ExistUserName(ctx context.Context, in *ExistUserNameReq, opts ...http.CallOption) (*ExistUserNameReply, error) {
	var out ExistUserNameReply
	pattern := "/v1/users/existName"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiExistUserName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetDept(ctx context.Context, in *GetDeptReq, opts ...http.CallOption) (*Dept, error) {
	var out Dept
	pattern := "/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetDomain(ctx context.Context, in *GetDomainReq, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetDomainCode(ctx context.Context, in *GetDomainCodeReq, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{code}/code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetDomainCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetDomainName(ctx context.Context, in *GetDomainNameReq, opts ...http.CallOption) (*Domain, error) {
	var out Domain
	pattern := "/v1/domains/{name}/name"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetDomainName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetMenu(ctx context.Context, in *GetMenuReq, opts ...http.CallOption) (*Menu, error) {
	var out Menu
	pattern := "/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetPost(ctx context.Context, in *GetPostReq, opts ...http.CallOption) (*Post, error) {
	var out Post
	pattern := "/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetPost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetResource(ctx context.Context, in *GetResourceReq, opts ...http.CallOption) (*Resource, error) {
	var out Resource
	pattern := "/v1/resources/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleReq, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeReq, opts ...http.CallOption) (*RoleDataScope, error) {
	var out RoleDataScope
	pattern := "/v1/roles/{id}/dataScopes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetRoleDataScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetUserInfo(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetUserInfoReply, error) {
	var out GetUserInfoReply
	pattern := "/v1/users/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetUserProfileReply, error) {
	var out GetUserProfileReply
	pattern := "/v1/users/profiles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) HandleDomainMenu(ctx context.Context, in *HandleDomainMenuReq, opts ...http.CallOption) (*HandleDomainMenuReply, error) {
	var out HandleDomainMenuReply
	pattern := "/v1/domains/{id}/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiHandleDomainMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeReq, opts ...http.CallOption) (*HandleRoleDataScopeReply, error) {
	var out HandleRoleDataScopeReply
	pattern := "/v1/roles/{id}/dataScopes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiHandleRoleDataScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) HandleRoleMenu(ctx context.Context, in *HandleRoleMenuReq, opts ...http.CallOption) (*HandleRoleMenuReply, error) {
	var out HandleRoleMenuReply
	pattern := "/v1/roles/{id}/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiHandleRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) HandleRoleResource(ctx context.Context, in *HandleRoleResourceReq, opts ...http.CallOption) (*HandleRoleResourceReply, error) {
	var out HandleRoleResourceReply
	pattern := "/v1/roles/{id}/resources"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiHandleRoleResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) HandleUserRole(ctx context.Context, in *HandleUserRoleReq, opts ...http.CallOption) (*HandleUserRoleReply, error) {
	var out HandleUserRoleReply
	pattern := "/v1/users/{id}/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiHandleUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListDept(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListDeptTree(ctx context.Context, in *ListDeptTreeReq, opts ...http.CallOption) (*ListDeptTreeReply, error) {
	var out ListDeptTreeReply
	pattern := "/v1/depts/{id}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListDeptTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListDomain(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/domains"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListDomainMenu(ctx context.Context, in *ListDomainMenuReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/domains/{id}/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListDomainMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListDomainTree(ctx context.Context, in *ListDomainTreeReq, opts ...http.CallOption) (*ListDomainTreeReply, error) {
	var out ListDomainTreeReply
	pattern := "/v1/domains/{id}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListDomainTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListMenu(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListMenuTree(ctx context.Context, in *ListMenuTreeReq, opts ...http.CallOption) (*ListMenuTreeReply, error) {
	var out ListMenuTreeReply
	pattern := "/v1/menus/{id}/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListPost(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListPost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListResource(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListResourceGroup(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*ListResourceGroupReply, error) {
	var out ListResourceGroupReply
	pattern := "/v1/resources/groups"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListResourceGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListRole(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListRoleDept(ctx context.Context, in *ListRoleDeptReq, opts ...http.CallOption) (*ListRoleDeptReply, error) {
	var out ListRoleDeptReply
	pattern := "/v1/roles/{id}/depts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListRoleDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListRoleMenu(ctx context.Context, in *ListRoleMenuReq, opts ...http.CallOption) (*ListRoleMenuReply, error) {
	var out ListRoleMenuReply
	pattern := "/v1/roles/{id}/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListRoleResource(ctx context.Context, in *ListRoleResourceReq, opts ...http.CallOption) (*ListRoleResourceReply, error) {
	var out ListRoleResourceReply
	pattern := "/v1/roles/{id}/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListRoleResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListUser(ctx context.Context, in *protobuf.PagingReq, opts ...http.CallOption) (*protobuf.PagingReply, error) {
	var out protobuf.PagingReply
	pattern := "/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListUserRole(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListUserRoleReply, error) {
	var out ListUserRoleReply
	pattern := "/v1/users/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListUserRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListUserRoleMenuRouterTree(ctx context.Context, in *ListUserRoleMenuRouterTreeReq, opts ...http.CallOption) (*ListUserRoleMenuRouterTreeReply, error) {
	var out ListUserRoleMenuRouterTreeReply
	pattern := "/v1/users/routers/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListUserRoleMenuRouterTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListUserRoleMenuTree(ctx context.Context, in *ListUserRoleMenuTreeReq, opts ...http.CallOption) (*ListUserRoleMenuTreeReply, error) {
	var out ListUserRoleMenuTreeReply
	pattern := "/v1/users/menus/trees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListUserRoleMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListUserRolePermission(ctx context.Context, in *ListUserRolePermissionReq, opts ...http.CallOption) (*ListUserRolePermissionReply, error) {
	var out ListUserRolePermissionReply
	pattern := "/v1/users/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApiListUserRolePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/auth/login/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) Logout(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/auth/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/v1/auth/register/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/auth/smsLogin/{domain}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiSmsLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Auth, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateDept(ctx context.Context, in *UpdateDeptReq, opts ...http.CallOption) (*UpdateDeptReply, error) {
	var out UpdateDeptReply
	pattern := "/v1/depts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateDomain(ctx context.Context, in *UpdateDomainReq, opts ...http.CallOption) (*UpdateDomainReply, error) {
	var out UpdateDomainReply
	pattern := "/v1/domains/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateDomainState(ctx context.Context, in *UpdateDomainStateReq, opts ...http.CallOption) (*UpdateDomainStateReply, error) {
	var out UpdateDomainStateReply
	pattern := "/v1/domains/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateDomainState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...http.CallOption) (*UpdateMenuReply, error) {
	var out UpdateMenuReply
	pattern := "/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...http.CallOption) (*UpdatePostReply, error) {
	var out UpdatePostReply
	pattern := "/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdatePostState(ctx context.Context, in *UpdatePostStateReq, opts ...http.CallOption) (*UpdatePostStateReply, error) {
	var out UpdatePostStateReply
	pattern := "/v1/posts/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdatePostState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateResource(ctx context.Context, in *UpdateResourceReq, opts ...http.CallOption) (*UpdateResourceReply, error) {
	var out UpdateResourceReply
	pattern := "/v1/resources/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...http.CallOption) (*UpdateRoleReply, error) {
	var out UpdateRoleReply
	pattern := "/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateRoleState(ctx context.Context, in *UpdateRoleStateReq, opts ...http.CallOption) (*UpdateRoleStateReply, error) {
	var out UpdateRoleStateReply
	pattern := "/v1/roles/{id}/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateRoleState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
