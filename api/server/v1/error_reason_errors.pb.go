// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 400
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsSystemNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_NOT_FOUND.String() && e.Code == 400
}

func ErrorSystemNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_SYSTEM_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 400
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserLoginFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_LOGIN_FAIL.String() && e.Code == 400
}

func ErrorUserLoginFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_LOGIN_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserRegisterFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_REGISTER_FAIL.String() && e.Code == 400
}

func ErrorUserRegisterFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_REGISTER_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_CREATE_FAIL.String() && e.Code == 400
}

func ErrorUserCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserIdNull(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ID_NULL.String() && e.Code == 400
}

func ErrorUserIdNull(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_ID_NULL.String(), fmt.Sprintf(format, args...))
}

func IsUserUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorUserUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DELETE_FAIL.String() && e.Code == 400
}

func ErrorUserDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserHandleFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_HANDLE_FAIL.String() && e.Code == 400
}

func ErrorUserHandleFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_HANDLE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserHandleRoleFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_HANDLE_ROLE_FAIL.String() && e.Code == 400
}

func ErrorUserHandleRoleFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_HANDLE_ROLE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserDomainFindFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DOMAIN_FIND_FAIL.String() && e.Code == 400
}

func ErrorUserDomainFindFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_DOMAIN_FIND_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsUserRoleFindFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ROLE_FIND_FAIL.String() && e.Code == 400
}

func ErrorUserRoleFindFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_ROLE_FIND_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDomainNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_NOT_FOUND.String() && e.Code == 400
}

func ErrorDomainNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDomainCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_CREATE_FAIL.String() && e.Code == 400
}

func ErrorDomainCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDomainUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorDomainUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDomainDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_DELETE_FAIL.String() && e.Code == 400
}

func ErrorDomainDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDomainHandleMenuFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_HANDLE_MENU_FAIL.String() && e.Code == 400
}

func ErrorDomainHandleMenuFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOMAIN_HANDLE_MENU_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsRoleNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_NOT_FOUND.String() && e.Code == 400
}

func ErrorRoleNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsRoleCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_CREATE_FAIL.String() && e.Code == 400
}

func ErrorRoleCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsRoleUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorRoleUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsRoleDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_DELETE_FAIL.String() && e.Code == 400
}

func ErrorRoleDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsRoleHandleMenuFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_HANDLE_MENU_FAIL.String() && e.Code == 400
}

func ErrorRoleHandleMenuFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_HANDLE_MENU_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsRoleHandleResourceFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_HANDLE_RESOURCE_FAIL.String() && e.Code == 400
}

func ErrorRoleHandleResourceFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_HANDLE_RESOURCE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsRoleHandleDeptFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_HANDLE_DEPT_FAIL.String() && e.Code == 400
}

func ErrorRoleHandleDeptFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ROLE_HANDLE_DEPT_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsMenuNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_NOT_FOUND.String() && e.Code == 400
}

func ErrorMenuNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsMenuCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_CREATE_FAIL.String() && e.Code == 400
}

func ErrorMenuCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsMenuUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorMenuUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsMenuDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MENU_DELETE_FAIL.String() && e.Code == 400
}

func ErrorMenuDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_MENU_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_NOT_FOUND.String() && e.Code == 400
}

func ErrorResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_RESOURCE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsResourceCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_CREATE_FAIL.String() && e.Code == 400
}

func ErrorResourceCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_RESOURCE_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsResourceUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorResourceUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_RESOURCE_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsResourceDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_DELETE_FAIL.String() && e.Code == 400
}

func ErrorResourceDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_RESOURCE_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDeptNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPT_NOT_FOUND.String() && e.Code == 400
}

func ErrorDeptNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDeptCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPT_CREATE_FAIL.String() && e.Code == 400
}

func ErrorDeptCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPT_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDeptUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPT_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorDeptUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPT_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsDeptDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPT_DELETE_FAIL.String() && e.Code == 400
}

func ErrorDeptDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DEPT_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsPostNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_POST_NOT_FOUND.String() && e.Code == 400
}

func ErrorPostNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_POST_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsPostCreateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_POST_CREATE_FAIL.String() && e.Code == 400
}

func ErrorPostCreateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_POST_CREATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsPostUpdateFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_POST_UPDATE_FAIL.String() && e.Code == 400
}

func ErrorPostUpdateFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_POST_UPDATE_FAIL.String(), fmt.Sprintf(format, args...))
}

func IsPostDeleteFail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_POST_DELETE_FAIL.String() && e.Code == 400
}

func ErrorPostDeleteFail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_POST_DELETE_FAIL.String(), fmt.Sprintf(format, args...))
}
