// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gnostic/openapi/v2/openapiv2.proto

package openapi_v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AdditionalPropertiesItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdditionalPropertiesItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdditionalPropertiesItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdditionalPropertiesItemMultiError, or nil if none found.
func (m *AdditionalPropertiesItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AdditionalPropertiesItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Oneof.(type) {
	case *AdditionalPropertiesItem_Schema:
		if v == nil {
			err := AdditionalPropertiesItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdditionalPropertiesItemValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdditionalPropertiesItemValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdditionalPropertiesItemValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AdditionalPropertiesItem_Boolean:
		if v == nil {
			err := AdditionalPropertiesItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Boolean
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AdditionalPropertiesItemMultiError(errors)
	}

	return nil
}

// AdditionalPropertiesItemMultiError is an error wrapping multiple validation
// errors returned by AdditionalPropertiesItem.ValidateAll() if the designated
// constraints aren't met.
type AdditionalPropertiesItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdditionalPropertiesItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdditionalPropertiesItemMultiError) AllErrors() []error { return m }

// AdditionalPropertiesItemValidationError is the validation error returned by
// AdditionalPropertiesItem.Validate if the designated constraints aren't met.
type AdditionalPropertiesItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdditionalPropertiesItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdditionalPropertiesItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdditionalPropertiesItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdditionalPropertiesItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdditionalPropertiesItemValidationError) ErrorName() string {
	return "AdditionalPropertiesItemValidationError"
}

// Error satisfies the builtin error interface
func (e AdditionalPropertiesItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdditionalPropertiesItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdditionalPropertiesItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdditionalPropertiesItemValidationError{}

// Validate checks the field values on Any with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Any) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Any with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AnyMultiError, or nil if none found.
func (m *Any) ValidateAll() error {
	return m.validate(true)
}

func (m *Any) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnyValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Yaml

	if len(errors) > 0 {
		return AnyMultiError(errors)
	}

	return nil
}

// AnyMultiError is an error wrapping multiple validation errors returned by
// Any.ValidateAll() if the designated constraints aren't met.
type AnyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnyMultiError) AllErrors() []error { return m }

// AnyValidationError is the validation error returned by Any.Validate if the
// designated constraints aren't met.
type AnyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnyValidationError) ErrorName() string { return "AnyValidationError" }

// Error satisfies the builtin error interface
func (e AnyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAny.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnyValidationError{}

// Validate checks the field values on ApiKeySecurity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiKeySecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiKeySecurity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiKeySecurityMultiError,
// or nil if none found.
func (m *ApiKeySecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiKeySecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for In

	// no validation rules for Description

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiKeySecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiKeySecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiKeySecurityValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApiKeySecurityMultiError(errors)
	}

	return nil
}

// ApiKeySecurityMultiError is an error wrapping multiple validation errors
// returned by ApiKeySecurity.ValidateAll() if the designated constraints
// aren't met.
type ApiKeySecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiKeySecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiKeySecurityMultiError) AllErrors() []error { return m }

// ApiKeySecurityValidationError is the validation error returned by
// ApiKeySecurity.Validate if the designated constraints aren't met.
type ApiKeySecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiKeySecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiKeySecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiKeySecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiKeySecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiKeySecurityValidationError) ErrorName() string { return "ApiKeySecurityValidationError" }

// Error satisfies the builtin error interface
func (e ApiKeySecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiKeySecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiKeySecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiKeySecurityValidationError{}

// Validate checks the field values on BasicAuthenticationSecurity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BasicAuthenticationSecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BasicAuthenticationSecurity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BasicAuthenticationSecurityMultiError, or nil if none found.
func (m *BasicAuthenticationSecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *BasicAuthenticationSecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Description

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BasicAuthenticationSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BasicAuthenticationSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BasicAuthenticationSecurityValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BasicAuthenticationSecurityMultiError(errors)
	}

	return nil
}

// BasicAuthenticationSecurityMultiError is an error wrapping multiple
// validation errors returned by BasicAuthenticationSecurity.ValidateAll() if
// the designated constraints aren't met.
type BasicAuthenticationSecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BasicAuthenticationSecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BasicAuthenticationSecurityMultiError) AllErrors() []error { return m }

// BasicAuthenticationSecurityValidationError is the validation error returned
// by BasicAuthenticationSecurity.Validate if the designated constraints
// aren't met.
type BasicAuthenticationSecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicAuthenticationSecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicAuthenticationSecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicAuthenticationSecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicAuthenticationSecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicAuthenticationSecurityValidationError) ErrorName() string {
	return "BasicAuthenticationSecurityValidationError"
}

// Error satisfies the builtin error interface
func (e BasicAuthenticationSecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicAuthenticationSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicAuthenticationSecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicAuthenticationSecurityValidationError{}

// Validate checks the field values on BodyParameter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BodyParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BodyParameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BodyParameterMultiError, or
// nil if none found.
func (m *BodyParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *BodyParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for In

	// no validation rules for Required

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BodyParameterValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BodyParameterValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BodyParameterValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BodyParameterValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BodyParameterValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BodyParameterValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BodyParameterMultiError(errors)
	}

	return nil
}

// BodyParameterMultiError is an error wrapping multiple validation errors
// returned by BodyParameter.ValidateAll() if the designated constraints
// aren't met.
type BodyParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BodyParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BodyParameterMultiError) AllErrors() []error { return m }

// BodyParameterValidationError is the validation error returned by
// BodyParameter.Validate if the designated constraints aren't met.
type BodyParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyParameterValidationError) ErrorName() string { return "BodyParameterValidationError" }

// Error satisfies the builtin error interface
func (e BodyParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBodyParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyParameterValidationError{}

// Validate checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContactMultiError, or nil if none found.
func (m *Contact) ValidateAll() error {
	return m.validate(true)
}

func (m *Contact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Email

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactMultiError(errors)
	}

	return nil
}

// ContactMultiError is an error wrapping multiple validation errors returned
// by Contact.ValidateAll() if the designated constraints aren't met.
type ContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactMultiError) AllErrors() []error { return m }

// ContactValidationError is the validation error returned by Contact.Validate
// if the designated constraints aren't met.
type ContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactValidationError) ErrorName() string { return "ContactValidationError" }

// Error satisfies the builtin error interface
func (e ContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactValidationError{}

// Validate checks the field values on Default with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Default) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Default with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DefaultMultiError, or nil if none found.
func (m *Default) ValidateAll() error {
	return m.validate(true)
}

func (m *Default) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DefaultValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DefaultValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DefaultValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DefaultMultiError(errors)
	}

	return nil
}

// DefaultMultiError is an error wrapping multiple validation errors returned
// by Default.ValidateAll() if the designated constraints aren't met.
type DefaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultMultiError) AllErrors() []error { return m }

// DefaultValidationError is the validation error returned by Default.Validate
// if the designated constraints aren't met.
type DefaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultValidationError) ErrorName() string { return "DefaultValidationError" }

// Error satisfies the builtin error interface
func (e DefaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultValidationError{}

// Validate checks the field values on Definitions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Definitions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Definitions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DefinitionsMultiError, or
// nil if none found.
func (m *Definitions) ValidateAll() error {
	return m.validate(true)
}

func (m *Definitions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DefinitionsValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DefinitionsMultiError(errors)
	}

	return nil
}

// DefinitionsMultiError is an error wrapping multiple validation errors
// returned by Definitions.ValidateAll() if the designated constraints aren't met.
type DefinitionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefinitionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefinitionsMultiError) AllErrors() []error { return m }

// DefinitionsValidationError is the validation error returned by
// Definitions.Validate if the designated constraints aren't met.
type DefinitionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefinitionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefinitionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefinitionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefinitionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefinitionsValidationError) ErrorName() string { return "DefinitionsValidationError" }

// Error satisfies the builtin error interface
func (e DefinitionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefinitions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefinitionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefinitionsValidationError{}

// Validate checks the field values on Document with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Document) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Document with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentMultiError, or nil
// if none found.
func (m *Document) ValidateAll() error {
	return m.validate(true)
}

func (m *Document) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Swagger

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Host

	// no validation rules for BasePath

	if all {
		switch v := interface{}(m.GetPaths()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Paths",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Paths",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaths()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Paths",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefinitions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Definitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Definitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinitions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Definitions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Responses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Responses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Responses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSecurity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentValidationError{
						field:  fmt.Sprintf("Security[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentValidationError{
						field:  fmt.Sprintf("Security[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentValidationError{
					field:  fmt.Sprintf("Security[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecurityDefinitions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "SecurityDefinitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "SecurityDefinitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityDefinitions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "SecurityDefinitions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetExternalDocs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalDocs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "ExternalDocs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DocumentMultiError(errors)
	}

	return nil
}

// DocumentMultiError is an error wrapping multiple validation errors returned
// by Document.ValidateAll() if the designated constraints aren't met.
type DocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentMultiError) AllErrors() []error { return m }

// DocumentValidationError is the validation error returned by
// Document.Validate if the designated constraints aren't met.
type DocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentValidationError) ErrorName() string { return "DocumentValidationError" }

// Error satisfies the builtin error interface
func (e DocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentValidationError{}

// Validate checks the field values on Examples with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Examples) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Examples with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExamplesMultiError, or nil
// if none found.
func (m *Examples) ValidateAll() error {
	return m.validate(true)
}

func (m *Examples) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExamplesValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExamplesValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExamplesValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExamplesMultiError(errors)
	}

	return nil
}

// ExamplesMultiError is an error wrapping multiple validation errors returned
// by Examples.ValidateAll() if the designated constraints aren't met.
type ExamplesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExamplesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExamplesMultiError) AllErrors() []error { return m }

// ExamplesValidationError is the validation error returned by
// Examples.Validate if the designated constraints aren't met.
type ExamplesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamplesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamplesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamplesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamplesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamplesValidationError) ErrorName() string { return "ExamplesValidationError" }

// Error satisfies the builtin error interface
func (e ExamplesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamples.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamplesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamplesValidationError{}

// Validate checks the field values on ExternalDocs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExternalDocs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalDocs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExternalDocsMultiError, or
// nil if none found.
func (m *ExternalDocs) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalDocs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	// no validation rules for Url

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExternalDocsValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExternalDocsValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExternalDocsValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExternalDocsMultiError(errors)
	}

	return nil
}

// ExternalDocsMultiError is an error wrapping multiple validation errors
// returned by ExternalDocs.ValidateAll() if the designated constraints aren't met.
type ExternalDocsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalDocsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalDocsMultiError) AllErrors() []error { return m }

// ExternalDocsValidationError is the validation error returned by
// ExternalDocs.Validate if the designated constraints aren't met.
type ExternalDocsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalDocsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalDocsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalDocsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalDocsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalDocsValidationError) ErrorName() string { return "ExternalDocsValidationError" }

// Error satisfies the builtin error interface
func (e ExternalDocsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalDocs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalDocsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalDocsValidationError{}

// Validate checks the field values on FileSchema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileSchemaMultiError, or
// nil if none found.
func (m *FileSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *FileSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Format

	// no validation rules for Title

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileSchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for ReadOnly

	if all {
		switch v := interface{}(m.GetExternalDocs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileSchemaValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileSchemaValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalDocs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileSchemaValidationError{
				field:  "ExternalDocs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileSchemaValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileSchemaValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileSchemaValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileSchemaValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FileSchemaMultiError(errors)
	}

	return nil
}

// FileSchemaMultiError is an error wrapping multiple validation errors
// returned by FileSchema.ValidateAll() if the designated constraints aren't met.
type FileSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileSchemaMultiError) AllErrors() []error { return m }

// FileSchemaValidationError is the validation error returned by
// FileSchema.Validate if the designated constraints aren't met.
type FileSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileSchemaValidationError) ErrorName() string { return "FileSchemaValidationError" }

// Error satisfies the builtin error interface
func (e FileSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileSchemaValidationError{}

// Validate checks the field values on FormDataParameterSubSchema with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormDataParameterSubSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormDataParameterSubSchema with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormDataParameterSubSchemaMultiError, or nil if none found.
func (m *FormDataParameterSubSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *FormDataParameterSubSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Required

	// no validation rules for In

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for AllowEmptyValue

	// no validation rules for Type

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormDataParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormDataParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormDataParameterSubSchemaValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CollectionFormat

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormDataParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormDataParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormDataParameterSubSchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Maximum

	// no validation rules for ExclusiveMaximum

	// no validation rules for Minimum

	// no validation rules for ExclusiveMinimum

	// no validation rules for MaxLength

	// no validation rules for MinLength

	// no validation rules for Pattern

	// no validation rules for MaxItems

	// no validation rules for MinItems

	// no validation rules for UniqueItems

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FormDataParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FormDataParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FormDataParameterSubSchemaValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MultipleOf

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FormDataParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FormDataParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FormDataParameterSubSchemaValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FormDataParameterSubSchemaMultiError(errors)
	}

	return nil
}

// FormDataParameterSubSchemaMultiError is an error wrapping multiple
// validation errors returned by FormDataParameterSubSchema.ValidateAll() if
// the designated constraints aren't met.
type FormDataParameterSubSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormDataParameterSubSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormDataParameterSubSchemaMultiError) AllErrors() []error { return m }

// FormDataParameterSubSchemaValidationError is the validation error returned
// by FormDataParameterSubSchema.Validate if the designated constraints aren't met.
type FormDataParameterSubSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormDataParameterSubSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormDataParameterSubSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormDataParameterSubSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormDataParameterSubSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormDataParameterSubSchemaValidationError) ErrorName() string {
	return "FormDataParameterSubSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e FormDataParameterSubSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormDataParameterSubSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormDataParameterSubSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormDataParameterSubSchemaValidationError{}

// Validate checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Header) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HeaderMultiError, or nil if none found.
func (m *Header) ValidateAll() error {
	return m.validate(true)
}

func (m *Header) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeaderValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeaderValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeaderValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CollectionFormat

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeaderValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeaderValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeaderValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Maximum

	// no validation rules for ExclusiveMaximum

	// no validation rules for Minimum

	// no validation rules for ExclusiveMinimum

	// no validation rules for MaxLength

	// no validation rules for MinLength

	// no validation rules for Pattern

	// no validation rules for MaxItems

	// no validation rules for MinItems

	// no validation rules for UniqueItems

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HeaderValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HeaderValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HeaderValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MultipleOf

	// no validation rules for Description

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HeaderValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HeaderValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HeaderValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HeaderMultiError(errors)
	}

	return nil
}

// HeaderMultiError is an error wrapping multiple validation errors returned by
// Header.ValidateAll() if the designated constraints aren't met.
type HeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderMultiError) AllErrors() []error { return m }

// HeaderValidationError is the validation error returned by Header.Validate if
// the designated constraints aren't met.
type HeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValidationError) ErrorName() string { return "HeaderValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValidationError{}

// Validate checks the field values on HeaderParameterSubSchema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HeaderParameterSubSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeaderParameterSubSchema with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeaderParameterSubSchemaMultiError, or nil if none found.
func (m *HeaderParameterSubSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *HeaderParameterSubSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Required

	// no validation rules for In

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeaderParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeaderParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeaderParameterSubSchemaValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CollectionFormat

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeaderParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeaderParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeaderParameterSubSchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Maximum

	// no validation rules for ExclusiveMaximum

	// no validation rules for Minimum

	// no validation rules for ExclusiveMinimum

	// no validation rules for MaxLength

	// no validation rules for MinLength

	// no validation rules for Pattern

	// no validation rules for MaxItems

	// no validation rules for MinItems

	// no validation rules for UniqueItems

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HeaderParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HeaderParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HeaderParameterSubSchemaValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MultipleOf

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HeaderParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HeaderParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HeaderParameterSubSchemaValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HeaderParameterSubSchemaMultiError(errors)
	}

	return nil
}

// HeaderParameterSubSchemaMultiError is an error wrapping multiple validation
// errors returned by HeaderParameterSubSchema.ValidateAll() if the designated
// constraints aren't met.
type HeaderParameterSubSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderParameterSubSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderParameterSubSchemaMultiError) AllErrors() []error { return m }

// HeaderParameterSubSchemaValidationError is the validation error returned by
// HeaderParameterSubSchema.Validate if the designated constraints aren't met.
type HeaderParameterSubSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderParameterSubSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderParameterSubSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderParameterSubSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderParameterSubSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderParameterSubSchemaValidationError) ErrorName() string {
	return "HeaderParameterSubSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e HeaderParameterSubSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderParameterSubSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderParameterSubSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderParameterSubSchemaValidationError{}

// Validate checks the field values on Headers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Headers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Headers with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HeadersMultiError, or nil if none found.
func (m *Headers) ValidateAll() error {
	return m.validate(true)
}

func (m *Headers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HeadersValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HeadersValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HeadersValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HeadersMultiError(errors)
	}

	return nil
}

// HeadersMultiError is an error wrapping multiple validation errors returned
// by Headers.ValidateAll() if the designated constraints aren't met.
type HeadersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeadersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeadersMultiError) AllErrors() []error { return m }

// HeadersValidationError is the validation error returned by Headers.Validate
// if the designated constraints aren't met.
type HeadersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeadersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeadersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeadersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeadersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeadersValidationError) ErrorName() string { return "HeadersValidationError" }

// Error satisfies the builtin error interface
func (e HeadersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeadersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeadersValidationError{}

// Validate checks the field values on Info with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Info with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InfoMultiError, or nil if none found.
func (m *Info) ValidateAll() error {
	return m.validate(true)
}

func (m *Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Version

	// no validation rules for Description

	// no validation rules for TermsOfService

	if all {
		switch v := interface{}(m.GetContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoValidationError{
					field:  "Contact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLicense()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLicense()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoValidationError{
				field:  "License",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InfoValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InfoValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InfoValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InfoMultiError(errors)
	}

	return nil
}

// InfoMultiError is an error wrapping multiple validation errors returned by
// Info.ValidateAll() if the designated constraints aren't met.
type InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoMultiError) AllErrors() []error { return m }

// InfoValidationError is the validation error returned by Info.Validate if the
// designated constraints aren't met.
type InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoValidationError) ErrorName() string { return "InfoValidationError" }

// Error satisfies the builtin error interface
func (e InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoValidationError{}

// Validate checks the field values on ItemsItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemsItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemsItemMultiError, or nil
// if none found.
func (m *ItemsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchema() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemsItemValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemsItemValidationError{
						field:  fmt.Sprintf("Schema[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemsItemValidationError{
					field:  fmt.Sprintf("Schema[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ItemsItemMultiError(errors)
	}

	return nil
}

// ItemsItemMultiError is an error wrapping multiple validation errors returned
// by ItemsItem.ValidateAll() if the designated constraints aren't met.
type ItemsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemsItemMultiError) AllErrors() []error { return m }

// ItemsItemValidationError is the validation error returned by
// ItemsItem.Validate if the designated constraints aren't met.
type ItemsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemsItemValidationError) ErrorName() string { return "ItemsItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemsItemValidationError{}

// Validate checks the field values on JsonReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JsonReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JsonReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JsonReferenceMultiError, or
// nil if none found.
func (m *JsonReference) ValidateAll() error {
	return m.validate(true)
}

func (m *JsonReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XRef

	// no validation rules for Description

	if len(errors) > 0 {
		return JsonReferenceMultiError(errors)
	}

	return nil
}

// JsonReferenceMultiError is an error wrapping multiple validation errors
// returned by JsonReference.ValidateAll() if the designated constraints
// aren't met.
type JsonReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JsonReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JsonReferenceMultiError) AllErrors() []error { return m }

// JsonReferenceValidationError is the validation error returned by
// JsonReference.Validate if the designated constraints aren't met.
type JsonReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JsonReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JsonReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JsonReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JsonReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JsonReferenceValidationError) ErrorName() string { return "JsonReferenceValidationError" }

// Error satisfies the builtin error interface
func (e JsonReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJsonReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JsonReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JsonReferenceValidationError{}

// Validate checks the field values on License with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *License) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on License with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LicenseMultiError, or nil if none found.
func (m *License) ValidateAll() error {
	return m.validate(true)
}

func (m *License) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LicenseValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LicenseValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LicenseValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LicenseMultiError(errors)
	}

	return nil
}

// LicenseMultiError is an error wrapping multiple validation errors returned
// by License.ValidateAll() if the designated constraints aren't met.
type LicenseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseMultiError) AllErrors() []error { return m }

// LicenseValidationError is the validation error returned by License.Validate
// if the designated constraints aren't met.
type LicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseValidationError) ErrorName() string { return "LicenseValidationError" }

// Error satisfies the builtin error interface
func (e LicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseValidationError{}

// Validate checks the field values on NamedAny with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamedAny) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedAny with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamedAnyMultiError, or nil
// if none found.
func (m *NamedAny) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedAny) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedAnyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedAnyValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedAnyValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedAnyMultiError(errors)
	}

	return nil
}

// NamedAnyMultiError is an error wrapping multiple validation errors returned
// by NamedAny.ValidateAll() if the designated constraints aren't met.
type NamedAnyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedAnyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedAnyMultiError) AllErrors() []error { return m }

// NamedAnyValidationError is the validation error returned by
// NamedAny.Validate if the designated constraints aren't met.
type NamedAnyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedAnyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedAnyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedAnyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedAnyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedAnyValidationError) ErrorName() string { return "NamedAnyValidationError" }

// Error satisfies the builtin error interface
func (e NamedAnyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedAny.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedAnyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedAnyValidationError{}

// Validate checks the field values on NamedHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamedHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamedHeaderMultiError, or
// nil if none found.
func (m *NamedHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedHeaderValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedHeaderValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedHeaderValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedHeaderMultiError(errors)
	}

	return nil
}

// NamedHeaderMultiError is an error wrapping multiple validation errors
// returned by NamedHeader.ValidateAll() if the designated constraints aren't met.
type NamedHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedHeaderMultiError) AllErrors() []error { return m }

// NamedHeaderValidationError is the validation error returned by
// NamedHeader.Validate if the designated constraints aren't met.
type NamedHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedHeaderValidationError) ErrorName() string { return "NamedHeaderValidationError" }

// Error satisfies the builtin error interface
func (e NamedHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedHeaderValidationError{}

// Validate checks the field values on NamedParameter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamedParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedParameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamedParameterMultiError,
// or nil if none found.
func (m *NamedParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedParameterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedParameterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedParameterValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedParameterMultiError(errors)
	}

	return nil
}

// NamedParameterMultiError is an error wrapping multiple validation errors
// returned by NamedParameter.ValidateAll() if the designated constraints
// aren't met.
type NamedParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedParameterMultiError) AllErrors() []error { return m }

// NamedParameterValidationError is the validation error returned by
// NamedParameter.Validate if the designated constraints aren't met.
type NamedParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedParameterValidationError) ErrorName() string { return "NamedParameterValidationError" }

// Error satisfies the builtin error interface
func (e NamedParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedParameterValidationError{}

// Validate checks the field values on NamedPathItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamedPathItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedPathItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamedPathItemMultiError, or
// nil if none found.
func (m *NamedPathItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedPathItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedPathItemValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedPathItemValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedPathItemValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedPathItemMultiError(errors)
	}

	return nil
}

// NamedPathItemMultiError is an error wrapping multiple validation errors
// returned by NamedPathItem.ValidateAll() if the designated constraints
// aren't met.
type NamedPathItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedPathItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedPathItemMultiError) AllErrors() []error { return m }

// NamedPathItemValidationError is the validation error returned by
// NamedPathItem.Validate if the designated constraints aren't met.
type NamedPathItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedPathItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedPathItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedPathItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedPathItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedPathItemValidationError) ErrorName() string { return "NamedPathItemValidationError" }

// Error satisfies the builtin error interface
func (e NamedPathItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedPathItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedPathItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedPathItemValidationError{}

// Validate checks the field values on NamedResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamedResponseMultiError, or
// nil if none found.
func (m *NamedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedResponseMultiError(errors)
	}

	return nil
}

// NamedResponseMultiError is an error wrapping multiple validation errors
// returned by NamedResponse.ValidateAll() if the designated constraints
// aren't met.
type NamedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedResponseMultiError) AllErrors() []error { return m }

// NamedResponseValidationError is the validation error returned by
// NamedResponse.Validate if the designated constraints aren't met.
type NamedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedResponseValidationError) ErrorName() string { return "NamedResponseValidationError" }

// Error satisfies the builtin error interface
func (e NamedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedResponseValidationError{}

// Validate checks the field values on NamedResponseValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamedResponseValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedResponseValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamedResponseValueMultiError, or nil if none found.
func (m *NamedResponseValue) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedResponseValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedResponseValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedResponseValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedResponseValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedResponseValueMultiError(errors)
	}

	return nil
}

// NamedResponseValueMultiError is an error wrapping multiple validation errors
// returned by NamedResponseValue.ValidateAll() if the designated constraints
// aren't met.
type NamedResponseValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedResponseValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedResponseValueMultiError) AllErrors() []error { return m }

// NamedResponseValueValidationError is the validation error returned by
// NamedResponseValue.Validate if the designated constraints aren't met.
type NamedResponseValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedResponseValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedResponseValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedResponseValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedResponseValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedResponseValueValidationError) ErrorName() string {
	return "NamedResponseValueValidationError"
}

// Error satisfies the builtin error interface
func (e NamedResponseValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedResponseValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedResponseValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedResponseValueValidationError{}

// Validate checks the field values on NamedSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamedSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamedSchemaMultiError, or
// nil if none found.
func (m *NamedSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedSchemaValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedSchemaValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedSchemaValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedSchemaMultiError(errors)
	}

	return nil
}

// NamedSchemaMultiError is an error wrapping multiple validation errors
// returned by NamedSchema.ValidateAll() if the designated constraints aren't met.
type NamedSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedSchemaMultiError) AllErrors() []error { return m }

// NamedSchemaValidationError is the validation error returned by
// NamedSchema.Validate if the designated constraints aren't met.
type NamedSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedSchemaValidationError) ErrorName() string { return "NamedSchemaValidationError" }

// Error satisfies the builtin error interface
func (e NamedSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedSchemaValidationError{}

// Validate checks the field values on NamedSecurityDefinitionsItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamedSecurityDefinitionsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedSecurityDefinitionsItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamedSecurityDefinitionsItemMultiError, or nil if none found.
func (m *NamedSecurityDefinitionsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedSecurityDefinitionsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedSecurityDefinitionsItemValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedSecurityDefinitionsItemValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedSecurityDefinitionsItemValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedSecurityDefinitionsItemMultiError(errors)
	}

	return nil
}

// NamedSecurityDefinitionsItemMultiError is an error wrapping multiple
// validation errors returned by NamedSecurityDefinitionsItem.ValidateAll() if
// the designated constraints aren't met.
type NamedSecurityDefinitionsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedSecurityDefinitionsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedSecurityDefinitionsItemMultiError) AllErrors() []error { return m }

// NamedSecurityDefinitionsItemValidationError is the validation error returned
// by NamedSecurityDefinitionsItem.Validate if the designated constraints
// aren't met.
type NamedSecurityDefinitionsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedSecurityDefinitionsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedSecurityDefinitionsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedSecurityDefinitionsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedSecurityDefinitionsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedSecurityDefinitionsItemValidationError) ErrorName() string {
	return "NamedSecurityDefinitionsItemValidationError"
}

// Error satisfies the builtin error interface
func (e NamedSecurityDefinitionsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedSecurityDefinitionsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedSecurityDefinitionsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedSecurityDefinitionsItemValidationError{}

// Validate checks the field values on NamedString with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamedString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedString with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamedStringMultiError, or
// nil if none found.
func (m *NamedString) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return NamedStringMultiError(errors)
	}

	return nil
}

// NamedStringMultiError is an error wrapping multiple validation errors
// returned by NamedString.ValidateAll() if the designated constraints aren't met.
type NamedStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedStringMultiError) AllErrors() []error { return m }

// NamedStringValidationError is the validation error returned by
// NamedString.Validate if the designated constraints aren't met.
type NamedStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedStringValidationError) ErrorName() string { return "NamedStringValidationError" }

// Error satisfies the builtin error interface
func (e NamedStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedStringValidationError{}

// Validate checks the field values on NamedStringArray with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NamedStringArray) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamedStringArray with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamedStringArrayMultiError, or nil if none found.
func (m *NamedStringArray) ValidateAll() error {
	return m.validate(true)
}

func (m *NamedStringArray) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamedStringArrayValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamedStringArrayValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamedStringArrayValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NamedStringArrayMultiError(errors)
	}

	return nil
}

// NamedStringArrayMultiError is an error wrapping multiple validation errors
// returned by NamedStringArray.ValidateAll() if the designated constraints
// aren't met.
type NamedStringArrayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamedStringArrayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamedStringArrayMultiError) AllErrors() []error { return m }

// NamedStringArrayValidationError is the validation error returned by
// NamedStringArray.Validate if the designated constraints aren't met.
type NamedStringArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamedStringArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamedStringArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamedStringArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamedStringArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamedStringArrayValidationError) ErrorName() string { return "NamedStringArrayValidationError" }

// Error satisfies the builtin error interface
func (e NamedStringArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamedStringArray.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamedStringArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamedStringArrayValidationError{}

// Validate checks the field values on NonBodyParameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NonBodyParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NonBodyParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NonBodyParameterMultiError, or nil if none found.
func (m *NonBodyParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *NonBodyParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Oneof.(type) {
	case *NonBodyParameter_HeaderParameterSubSchema:
		if v == nil {
			err := NonBodyParameterValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeaderParameterSubSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "HeaderParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "HeaderParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeaderParameterSubSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NonBodyParameterValidationError{
					field:  "HeaderParameterSubSchema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NonBodyParameter_FormDataParameterSubSchema:
		if v == nil {
			err := NonBodyParameterValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFormDataParameterSubSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "FormDataParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "FormDataParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFormDataParameterSubSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NonBodyParameterValidationError{
					field:  "FormDataParameterSubSchema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NonBodyParameter_QueryParameterSubSchema:
		if v == nil {
			err := NonBodyParameterValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQueryParameterSubSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "QueryParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "QueryParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQueryParameterSubSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NonBodyParameterValidationError{
					field:  "QueryParameterSubSchema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NonBodyParameter_PathParameterSubSchema:
		if v == nil {
			err := NonBodyParameterValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPathParameterSubSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "PathParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NonBodyParameterValidationError{
						field:  "PathParameterSubSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPathParameterSubSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NonBodyParameterValidationError{
					field:  "PathParameterSubSchema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return NonBodyParameterMultiError(errors)
	}

	return nil
}

// NonBodyParameterMultiError is an error wrapping multiple validation errors
// returned by NonBodyParameter.ValidateAll() if the designated constraints
// aren't met.
type NonBodyParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NonBodyParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NonBodyParameterMultiError) AllErrors() []error { return m }

// NonBodyParameterValidationError is the validation error returned by
// NonBodyParameter.Validate if the designated constraints aren't met.
type NonBodyParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NonBodyParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NonBodyParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NonBodyParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NonBodyParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NonBodyParameterValidationError) ErrorName() string { return "NonBodyParameterValidationError" }

// Error satisfies the builtin error interface
func (e NonBodyParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNonBodyParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NonBodyParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NonBodyParameterValidationError{}

// Validate checks the field values on Oauth2AccessCodeSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Oauth2AccessCodeSecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Oauth2AccessCodeSecurity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Oauth2AccessCodeSecurityMultiError, or nil if none found.
func (m *Oauth2AccessCodeSecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *Oauth2AccessCodeSecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Flow

	if all {
		switch v := interface{}(m.GetScopes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Oauth2AccessCodeSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Oauth2AccessCodeSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScopes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Oauth2AccessCodeSecurityValidationError{
				field:  "Scopes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AuthorizationUrl

	// no validation rules for TokenUrl

	// no validation rules for Description

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Oauth2AccessCodeSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Oauth2AccessCodeSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Oauth2AccessCodeSecurityValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Oauth2AccessCodeSecurityMultiError(errors)
	}

	return nil
}

// Oauth2AccessCodeSecurityMultiError is an error wrapping multiple validation
// errors returned by Oauth2AccessCodeSecurity.ValidateAll() if the designated
// constraints aren't met.
type Oauth2AccessCodeSecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Oauth2AccessCodeSecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Oauth2AccessCodeSecurityMultiError) AllErrors() []error { return m }

// Oauth2AccessCodeSecurityValidationError is the validation error returned by
// Oauth2AccessCodeSecurity.Validate if the designated constraints aren't met.
type Oauth2AccessCodeSecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Oauth2AccessCodeSecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Oauth2AccessCodeSecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Oauth2AccessCodeSecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Oauth2AccessCodeSecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Oauth2AccessCodeSecurityValidationError) ErrorName() string {
	return "Oauth2AccessCodeSecurityValidationError"
}

// Error satisfies the builtin error interface
func (e Oauth2AccessCodeSecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOauth2AccessCodeSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Oauth2AccessCodeSecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Oauth2AccessCodeSecurityValidationError{}

// Validate checks the field values on Oauth2ApplicationSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Oauth2ApplicationSecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Oauth2ApplicationSecurity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Oauth2ApplicationSecurityMultiError, or nil if none found.
func (m *Oauth2ApplicationSecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *Oauth2ApplicationSecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Flow

	if all {
		switch v := interface{}(m.GetScopes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Oauth2ApplicationSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Oauth2ApplicationSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScopes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Oauth2ApplicationSecurityValidationError{
				field:  "Scopes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TokenUrl

	// no validation rules for Description

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Oauth2ApplicationSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Oauth2ApplicationSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Oauth2ApplicationSecurityValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Oauth2ApplicationSecurityMultiError(errors)
	}

	return nil
}

// Oauth2ApplicationSecurityMultiError is an error wrapping multiple validation
// errors returned by Oauth2ApplicationSecurity.ValidateAll() if the
// designated constraints aren't met.
type Oauth2ApplicationSecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Oauth2ApplicationSecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Oauth2ApplicationSecurityMultiError) AllErrors() []error { return m }

// Oauth2ApplicationSecurityValidationError is the validation error returned by
// Oauth2ApplicationSecurity.Validate if the designated constraints aren't met.
type Oauth2ApplicationSecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Oauth2ApplicationSecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Oauth2ApplicationSecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Oauth2ApplicationSecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Oauth2ApplicationSecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Oauth2ApplicationSecurityValidationError) ErrorName() string {
	return "Oauth2ApplicationSecurityValidationError"
}

// Error satisfies the builtin error interface
func (e Oauth2ApplicationSecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOauth2ApplicationSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Oauth2ApplicationSecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Oauth2ApplicationSecurityValidationError{}

// Validate checks the field values on Oauth2ImplicitSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Oauth2ImplicitSecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Oauth2ImplicitSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Oauth2ImplicitSecurityMultiError, or nil if none found.
func (m *Oauth2ImplicitSecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *Oauth2ImplicitSecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Flow

	if all {
		switch v := interface{}(m.GetScopes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Oauth2ImplicitSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Oauth2ImplicitSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScopes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Oauth2ImplicitSecurityValidationError{
				field:  "Scopes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AuthorizationUrl

	// no validation rules for Description

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Oauth2ImplicitSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Oauth2ImplicitSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Oauth2ImplicitSecurityValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Oauth2ImplicitSecurityMultiError(errors)
	}

	return nil
}

// Oauth2ImplicitSecurityMultiError is an error wrapping multiple validation
// errors returned by Oauth2ImplicitSecurity.ValidateAll() if the designated
// constraints aren't met.
type Oauth2ImplicitSecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Oauth2ImplicitSecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Oauth2ImplicitSecurityMultiError) AllErrors() []error { return m }

// Oauth2ImplicitSecurityValidationError is the validation error returned by
// Oauth2ImplicitSecurity.Validate if the designated constraints aren't met.
type Oauth2ImplicitSecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Oauth2ImplicitSecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Oauth2ImplicitSecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Oauth2ImplicitSecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Oauth2ImplicitSecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Oauth2ImplicitSecurityValidationError) ErrorName() string {
	return "Oauth2ImplicitSecurityValidationError"
}

// Error satisfies the builtin error interface
func (e Oauth2ImplicitSecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOauth2ImplicitSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Oauth2ImplicitSecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Oauth2ImplicitSecurityValidationError{}

// Validate checks the field values on Oauth2PasswordSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Oauth2PasswordSecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Oauth2PasswordSecurity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Oauth2PasswordSecurityMultiError, or nil if none found.
func (m *Oauth2PasswordSecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *Oauth2PasswordSecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Flow

	if all {
		switch v := interface{}(m.GetScopes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Oauth2PasswordSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Oauth2PasswordSecurityValidationError{
					field:  "Scopes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScopes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Oauth2PasswordSecurityValidationError{
				field:  "Scopes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TokenUrl

	// no validation rules for Description

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Oauth2PasswordSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Oauth2PasswordSecurityValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Oauth2PasswordSecurityValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Oauth2PasswordSecurityMultiError(errors)
	}

	return nil
}

// Oauth2PasswordSecurityMultiError is an error wrapping multiple validation
// errors returned by Oauth2PasswordSecurity.ValidateAll() if the designated
// constraints aren't met.
type Oauth2PasswordSecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Oauth2PasswordSecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Oauth2PasswordSecurityMultiError) AllErrors() []error { return m }

// Oauth2PasswordSecurityValidationError is the validation error returned by
// Oauth2PasswordSecurity.Validate if the designated constraints aren't met.
type Oauth2PasswordSecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Oauth2PasswordSecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Oauth2PasswordSecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Oauth2PasswordSecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Oauth2PasswordSecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Oauth2PasswordSecurityValidationError) ErrorName() string {
	return "Oauth2PasswordSecurityValidationError"
}

// Error satisfies the builtin error interface
func (e Oauth2PasswordSecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOauth2PasswordSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Oauth2PasswordSecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Oauth2PasswordSecurityValidationError{}

// Validate checks the field values on Oauth2Scopes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Oauth2Scopes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Oauth2Scopes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Oauth2ScopesMultiError, or
// nil if none found.
func (m *Oauth2Scopes) ValidateAll() error {
	return m.validate(true)
}

func (m *Oauth2Scopes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Oauth2ScopesValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Oauth2ScopesValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Oauth2ScopesValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Oauth2ScopesMultiError(errors)
	}

	return nil
}

// Oauth2ScopesMultiError is an error wrapping multiple validation errors
// returned by Oauth2Scopes.ValidateAll() if the designated constraints aren't met.
type Oauth2ScopesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Oauth2ScopesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Oauth2ScopesMultiError) AllErrors() []error { return m }

// Oauth2ScopesValidationError is the validation error returned by
// Oauth2Scopes.Validate if the designated constraints aren't met.
type Oauth2ScopesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Oauth2ScopesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Oauth2ScopesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Oauth2ScopesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Oauth2ScopesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Oauth2ScopesValidationError) ErrorName() string { return "Oauth2ScopesValidationError" }

// Error satisfies the builtin error interface
func (e Oauth2ScopesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOauth2Scopes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Oauth2ScopesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Oauth2ScopesValidationError{}

// Validate checks the field values on Operation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Operation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Operation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperationMultiError, or nil
// if none found.
func (m *Operation) ValidateAll() error {
	return m.validate(true)
}

func (m *Operation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Summary

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetExternalDocs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperationValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperationValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalDocs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationValidationError{
				field:  "ExternalDocs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperationId

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OperationValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OperationValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OperationValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetResponses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperationValidationError{
					field:  "Responses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperationValidationError{
					field:  "Responses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationValidationError{
				field:  "Responses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Deprecated

	for idx, item := range m.GetSecurity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OperationValidationError{
						field:  fmt.Sprintf("Security[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OperationValidationError{
						field:  fmt.Sprintf("Security[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OperationValidationError{
					field:  fmt.Sprintf("Security[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OperationValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OperationValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OperationValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OperationMultiError(errors)
	}

	return nil
}

// OperationMultiError is an error wrapping multiple validation errors returned
// by Operation.ValidateAll() if the designated constraints aren't met.
type OperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationMultiError) AllErrors() []error { return m }

// OperationValidationError is the validation error returned by
// Operation.Validate if the designated constraints aren't met.
type OperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationValidationError) ErrorName() string { return "OperationValidationError" }

// Error satisfies the builtin error interface
func (e OperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationValidationError{}

// Validate checks the field values on Parameter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Parameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Parameter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParameterMultiError, or nil
// if none found.
func (m *Parameter) ValidateAll() error {
	return m.validate(true)
}

func (m *Parameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Oneof.(type) {
	case *Parameter_BodyParameter:
		if v == nil {
			err := ParameterValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBodyParameter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "BodyParameter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "BodyParameter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBodyParameter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValidationError{
					field:  "BodyParameter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Parameter_NonBodyParameter:
		if v == nil {
			err := ParameterValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNonBodyParameter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "NonBodyParameter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "NonBodyParameter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNonBodyParameter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValidationError{
					field:  "NonBodyParameter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ParameterMultiError(errors)
	}

	return nil
}

// ParameterMultiError is an error wrapping multiple validation errors returned
// by Parameter.ValidateAll() if the designated constraints aren't met.
type ParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterMultiError) AllErrors() []error { return m }

// ParameterValidationError is the validation error returned by
// Parameter.Validate if the designated constraints aren't met.
type ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValidationError) ErrorName() string { return "ParameterValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValidationError{}

// Validate checks the field values on ParameterDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParameterDefinitions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParameterDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParameterDefinitionsMultiError, or nil if none found.
func (m *ParameterDefinitions) ValidateAll() error {
	return m.validate(true)
}

func (m *ParameterDefinitions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterDefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterDefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterDefinitionsValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParameterDefinitionsMultiError(errors)
	}

	return nil
}

// ParameterDefinitionsMultiError is an error wrapping multiple validation
// errors returned by ParameterDefinitions.ValidateAll() if the designated
// constraints aren't met.
type ParameterDefinitionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterDefinitionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterDefinitionsMultiError) AllErrors() []error { return m }

// ParameterDefinitionsValidationError is the validation error returned by
// ParameterDefinitions.Validate if the designated constraints aren't met.
type ParameterDefinitionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterDefinitionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterDefinitionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterDefinitionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterDefinitionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterDefinitionsValidationError) ErrorName() string {
	return "ParameterDefinitionsValidationError"
}

// Error satisfies the builtin error interface
func (e ParameterDefinitionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameterDefinitions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterDefinitionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterDefinitionsValidationError{}

// Validate checks the field values on ParametersItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParametersItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParametersItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParametersItemMultiError,
// or nil if none found.
func (m *ParametersItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ParametersItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Oneof.(type) {
	case *ParametersItem_Parameter:
		if v == nil {
			err := ParametersItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetParameter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParametersItemValidationError{
						field:  "Parameter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParametersItemValidationError{
						field:  "Parameter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParameter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParametersItemValidationError{
					field:  "Parameter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ParametersItem_JsonReference:
		if v == nil {
			err := ParametersItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJsonReference()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParametersItemValidationError{
						field:  "JsonReference",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParametersItemValidationError{
						field:  "JsonReference",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJsonReference()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParametersItemValidationError{
					field:  "JsonReference",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ParametersItemMultiError(errors)
	}

	return nil
}

// ParametersItemMultiError is an error wrapping multiple validation errors
// returned by ParametersItem.ValidateAll() if the designated constraints
// aren't met.
type ParametersItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParametersItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParametersItemMultiError) AllErrors() []error { return m }

// ParametersItemValidationError is the validation error returned by
// ParametersItem.Validate if the designated constraints aren't met.
type ParametersItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParametersItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParametersItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParametersItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParametersItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParametersItemValidationError) ErrorName() string { return "ParametersItemValidationError" }

// Error satisfies the builtin error interface
func (e ParametersItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParametersItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParametersItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParametersItemValidationError{}

// Validate checks the field values on PathItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PathItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PathItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PathItemMultiError, or nil
// if none found.
func (m *PathItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PathItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XRef

	if all {
		switch v := interface{}(m.GetGet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Get",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Get",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathItemValidationError{
				field:  "Get",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPut()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Put",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Put",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPut()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathItemValidationError{
				field:  "Put",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathItemValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDelete()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathItemValidationError{
				field:  "Delete",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathItemValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHead()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Head",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Head",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHead()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathItemValidationError{
				field:  "Head",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Patch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathItemValidationError{
					field:  "Patch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathItemValidationError{
				field:  "Patch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PathItemValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PathItemValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PathItemValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PathItemValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PathItemValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PathItemValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PathItemMultiError(errors)
	}

	return nil
}

// PathItemMultiError is an error wrapping multiple validation errors returned
// by PathItem.ValidateAll() if the designated constraints aren't met.
type PathItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathItemMultiError) AllErrors() []error { return m }

// PathItemValidationError is the validation error returned by
// PathItem.Validate if the designated constraints aren't met.
type PathItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathItemValidationError) ErrorName() string { return "PathItemValidationError" }

// Error satisfies the builtin error interface
func (e PathItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPathItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathItemValidationError{}

// Validate checks the field values on PathParameterSubSchema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PathParameterSubSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PathParameterSubSchema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PathParameterSubSchemaMultiError, or nil if none found.
func (m *PathParameterSubSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *PathParameterSubSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Required

	// no validation rules for In

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathParameterSubSchemaValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CollectionFormat

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PathParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PathParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PathParameterSubSchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Maximum

	// no validation rules for ExclusiveMaximum

	// no validation rules for Minimum

	// no validation rules for ExclusiveMinimum

	// no validation rules for MaxLength

	// no validation rules for MinLength

	// no validation rules for Pattern

	// no validation rules for MaxItems

	// no validation rules for MinItems

	// no validation rules for UniqueItems

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PathParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PathParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PathParameterSubSchemaValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MultipleOf

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PathParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PathParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PathParameterSubSchemaValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PathParameterSubSchemaMultiError(errors)
	}

	return nil
}

// PathParameterSubSchemaMultiError is an error wrapping multiple validation
// errors returned by PathParameterSubSchema.ValidateAll() if the designated
// constraints aren't met.
type PathParameterSubSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathParameterSubSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathParameterSubSchemaMultiError) AllErrors() []error { return m }

// PathParameterSubSchemaValidationError is the validation error returned by
// PathParameterSubSchema.Validate if the designated constraints aren't met.
type PathParameterSubSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathParameterSubSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathParameterSubSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathParameterSubSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathParameterSubSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathParameterSubSchemaValidationError) ErrorName() string {
	return "PathParameterSubSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e PathParameterSubSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPathParameterSubSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathParameterSubSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathParameterSubSchemaValidationError{}

// Validate checks the field values on Paths with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Paths) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Paths with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PathsMultiError, or nil if none found.
func (m *Paths) ValidateAll() error {
	return m.validate(true)
}

func (m *Paths) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PathsValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PathsValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PathsValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPath() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PathsValidationError{
						field:  fmt.Sprintf("Path[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PathsValidationError{
						field:  fmt.Sprintf("Path[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PathsValidationError{
					field:  fmt.Sprintf("Path[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PathsMultiError(errors)
	}

	return nil
}

// PathsMultiError is an error wrapping multiple validation errors returned by
// Paths.ValidateAll() if the designated constraints aren't met.
type PathsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathsMultiError) AllErrors() []error { return m }

// PathsValidationError is the validation error returned by Paths.Validate if
// the designated constraints aren't met.
type PathsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathsValidationError) ErrorName() string { return "PathsValidationError" }

// Error satisfies the builtin error interface
func (e PathsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaths.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathsValidationError{}

// Validate checks the field values on PrimitivesItems with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PrimitivesItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrimitivesItems with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrimitivesItemsMultiError, or nil if none found.
func (m *PrimitivesItems) ValidateAll() error {
	return m.validate(true)
}

func (m *PrimitivesItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrimitivesItemsValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrimitivesItemsValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrimitivesItemsValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CollectionFormat

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrimitivesItemsValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrimitivesItemsValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrimitivesItemsValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Maximum

	// no validation rules for ExclusiveMaximum

	// no validation rules for Minimum

	// no validation rules for ExclusiveMinimum

	// no validation rules for MaxLength

	// no validation rules for MinLength

	// no validation rules for Pattern

	// no validation rules for MaxItems

	// no validation rules for MinItems

	// no validation rules for UniqueItems

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrimitivesItemsValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrimitivesItemsValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrimitivesItemsValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MultipleOf

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrimitivesItemsValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrimitivesItemsValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrimitivesItemsValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrimitivesItemsMultiError(errors)
	}

	return nil
}

// PrimitivesItemsMultiError is an error wrapping multiple validation errors
// returned by PrimitivesItems.ValidateAll() if the designated constraints
// aren't met.
type PrimitivesItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrimitivesItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrimitivesItemsMultiError) AllErrors() []error { return m }

// PrimitivesItemsValidationError is the validation error returned by
// PrimitivesItems.Validate if the designated constraints aren't met.
type PrimitivesItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrimitivesItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrimitivesItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrimitivesItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrimitivesItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrimitivesItemsValidationError) ErrorName() string { return "PrimitivesItemsValidationError" }

// Error satisfies the builtin error interface
func (e PrimitivesItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrimitivesItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrimitivesItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrimitivesItemsValidationError{}

// Validate checks the field values on Properties with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Properties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Properties with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertiesMultiError, or
// nil if none found.
func (m *Properties) ValidateAll() error {
	return m.validate(true)
}

func (m *Properties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertiesValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertiesValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertiesValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PropertiesMultiError(errors)
	}

	return nil
}

// PropertiesMultiError is an error wrapping multiple validation errors
// returned by Properties.ValidateAll() if the designated constraints aren't met.
type PropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertiesMultiError) AllErrors() []error { return m }

// PropertiesValidationError is the validation error returned by
// Properties.Validate if the designated constraints aren't met.
type PropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertiesValidationError) ErrorName() string { return "PropertiesValidationError" }

// Error satisfies the builtin error interface
func (e PropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertiesValidationError{}

// Validate checks the field values on QueryParameterSubSchema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryParameterSubSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryParameterSubSchema with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryParameterSubSchemaMultiError, or nil if none found.
func (m *QueryParameterSubSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryParameterSubSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Required

	// no validation rules for In

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for AllowEmptyValue

	// no validation rules for Type

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryParameterSubSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryParameterSubSchemaValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CollectionFormat

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryParameterSubSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryParameterSubSchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Maximum

	// no validation rules for ExclusiveMaximum

	// no validation rules for Minimum

	// no validation rules for ExclusiveMinimum

	// no validation rules for MaxLength

	// no validation rules for MinLength

	// no validation rules for Pattern

	// no validation rules for MaxItems

	// no validation rules for MinItems

	// no validation rules for UniqueItems

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryParameterSubSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryParameterSubSchemaValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MultipleOf

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryParameterSubSchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryParameterSubSchemaValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryParameterSubSchemaMultiError(errors)
	}

	return nil
}

// QueryParameterSubSchemaMultiError is an error wrapping multiple validation
// errors returned by QueryParameterSubSchema.ValidateAll() if the designated
// constraints aren't met.
type QueryParameterSubSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryParameterSubSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryParameterSubSchemaMultiError) AllErrors() []error { return m }

// QueryParameterSubSchemaValidationError is the validation error returned by
// QueryParameterSubSchema.Validate if the designated constraints aren't met.
type QueryParameterSubSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryParameterSubSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryParameterSubSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryParameterSubSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryParameterSubSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryParameterSubSchemaValidationError) ErrorName() string {
	return "QueryParameterSubSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e QueryParameterSubSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryParameterSubSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryParameterSubSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryParameterSubSchemaValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeaders()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Headers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExamples()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Examples",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Examples",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExamples()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Examples",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on ResponseDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseDefinitions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseDefinitionsMultiError, or nil if none found.
func (m *ResponseDefinitions) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseDefinitions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseDefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseDefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseDefinitionsValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResponseDefinitionsMultiError(errors)
	}

	return nil
}

// ResponseDefinitionsMultiError is an error wrapping multiple validation
// errors returned by ResponseDefinitions.ValidateAll() if the designated
// constraints aren't met.
type ResponseDefinitionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseDefinitionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseDefinitionsMultiError) AllErrors() []error { return m }

// ResponseDefinitionsValidationError is the validation error returned by
// ResponseDefinitions.Validate if the designated constraints aren't met.
type ResponseDefinitionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseDefinitionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseDefinitionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseDefinitionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseDefinitionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseDefinitionsValidationError) ErrorName() string {
	return "ResponseDefinitionsValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseDefinitionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseDefinitions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseDefinitionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseDefinitionsValidationError{}

// Validate checks the field values on ResponseValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseValueMultiError, or
// nil if none found.
func (m *ResponseValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Oneof.(type) {
	case *ResponseValue_Response:
		if v == nil {
			err := ResponseValueValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseValueValidationError{
						field:  "Response",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseValueValidationError{
						field:  "Response",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValueValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResponseValue_JsonReference:
		if v == nil {
			err := ResponseValueValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJsonReference()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseValueValidationError{
						field:  "JsonReference",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseValueValidationError{
						field:  "JsonReference",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJsonReference()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValueValidationError{
					field:  "JsonReference",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ResponseValueMultiError(errors)
	}

	return nil
}

// ResponseValueMultiError is an error wrapping multiple validation errors
// returned by ResponseValue.ValidateAll() if the designated constraints
// aren't met.
type ResponseValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseValueMultiError) AllErrors() []error { return m }

// ResponseValueValidationError is the validation error returned by
// ResponseValue.Validate if the designated constraints aren't met.
type ResponseValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValueValidationError) ErrorName() string { return "ResponseValueValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValueValidationError{}

// Validate checks the field values on Responses with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Responses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Responses with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponsesMultiError, or nil
// if none found.
func (m *Responses) ValidateAll() error {
	return m.validate(true)
}

func (m *Responses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResponseCode() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponsesValidationError{
						field:  fmt.Sprintf("ResponseCode[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponsesValidationError{
						field:  fmt.Sprintf("ResponseCode[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsesValidationError{
					field:  fmt.Sprintf("ResponseCode[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponsesValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponsesValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsesValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResponsesMultiError(errors)
	}

	return nil
}

// ResponsesMultiError is an error wrapping multiple validation errors returned
// by Responses.ValidateAll() if the designated constraints aren't met.
type ResponsesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsesMultiError) AllErrors() []error { return m }

// ResponsesValidationError is the validation error returned by
// Responses.Validate if the designated constraints aren't met.
type ResponsesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsesValidationError) ErrorName() string { return "ResponsesValidationError" }

// Error satisfies the builtin error interface
func (e ResponsesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsesValidationError{}

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SchemaMultiError, or nil if none found.
func (m *Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XRef

	// no validation rules for Format

	// no validation rules for Title

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MultipleOf

	// no validation rules for Maximum

	// no validation rules for ExclusiveMaximum

	// no validation rules for Minimum

	// no validation rules for ExclusiveMinimum

	// no validation rules for MaxLength

	// no validation rules for MinLength

	// no validation rules for Pattern

	// no validation rules for MaxItems

	// no validation rules for MinItems

	// no validation rules for UniqueItems

	// no validation rules for MaxProperties

	// no validation rules for MinProperties

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetAdditionalProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "AdditionalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "AdditionalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdditionalProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "AdditionalProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAllOf() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("AllOf[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("AllOf[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("AllOf[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Discriminator

	// no validation rules for ReadOnly

	if all {
		switch v := interface{}(m.GetXml()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Xml",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Xml",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetXml()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Xml",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExternalDocs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalDocs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "ExternalDocs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExample()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Example",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SchemaMultiError(errors)
	}

	return nil
}

// SchemaMultiError is an error wrapping multiple validation errors returned by
// Schema.ValidateAll() if the designated constraints aren't met.
type SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaMultiError) AllErrors() []error { return m }

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on SchemaItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SchemaItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchemaItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SchemaItemMultiError, or
// nil if none found.
func (m *SchemaItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SchemaItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Oneof.(type) {
	case *SchemaItem_Schema:
		if v == nil {
			err := SchemaItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaItemValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaItemValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaItemValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SchemaItem_FileSchema:
		if v == nil {
			err := SchemaItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFileSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaItemValidationError{
						field:  "FileSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaItemValidationError{
						field:  "FileSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFileSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaItemValidationError{
					field:  "FileSchema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SchemaItemMultiError(errors)
	}

	return nil
}

// SchemaItemMultiError is an error wrapping multiple validation errors
// returned by SchemaItem.ValidateAll() if the designated constraints aren't met.
type SchemaItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaItemMultiError) AllErrors() []error { return m }

// SchemaItemValidationError is the validation error returned by
// SchemaItem.Validate if the designated constraints aren't met.
type SchemaItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaItemValidationError) ErrorName() string { return "SchemaItemValidationError" }

// Error satisfies the builtin error interface
func (e SchemaItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaItemValidationError{}

// Validate checks the field values on SecurityDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecurityDefinitions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecurityDefinitions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecurityDefinitionsMultiError, or nil if none found.
func (m *SecurityDefinitions) ValidateAll() error {
	return m.validate(true)
}

func (m *SecurityDefinitions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityDefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityDefinitionsValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityDefinitionsValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecurityDefinitionsMultiError(errors)
	}

	return nil
}

// SecurityDefinitionsMultiError is an error wrapping multiple validation
// errors returned by SecurityDefinitions.ValidateAll() if the designated
// constraints aren't met.
type SecurityDefinitionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityDefinitionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityDefinitionsMultiError) AllErrors() []error { return m }

// SecurityDefinitionsValidationError is the validation error returned by
// SecurityDefinitions.Validate if the designated constraints aren't met.
type SecurityDefinitionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityDefinitionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityDefinitionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityDefinitionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityDefinitionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityDefinitionsValidationError) ErrorName() string {
	return "SecurityDefinitionsValidationError"
}

// Error satisfies the builtin error interface
func (e SecurityDefinitionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityDefinitions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityDefinitionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityDefinitionsValidationError{}

// Validate checks the field values on SecurityDefinitionsItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecurityDefinitionsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecurityDefinitionsItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecurityDefinitionsItemMultiError, or nil if none found.
func (m *SecurityDefinitionsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SecurityDefinitionsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Oneof.(type) {
	case *SecurityDefinitionsItem_BasicAuthenticationSecurity:
		if v == nil {
			err := SecurityDefinitionsItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBasicAuthenticationSecurity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "BasicAuthenticationSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "BasicAuthenticationSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBasicAuthenticationSecurity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityDefinitionsItemValidationError{
					field:  "BasicAuthenticationSecurity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SecurityDefinitionsItem_ApiKeySecurity:
		if v == nil {
			err := SecurityDefinitionsItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetApiKeySecurity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "ApiKeySecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "ApiKeySecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApiKeySecurity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityDefinitionsItemValidationError{
					field:  "ApiKeySecurity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SecurityDefinitionsItem_Oauth2ImplicitSecurity:
		if v == nil {
			err := SecurityDefinitionsItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOauth2ImplicitSecurity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2ImplicitSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2ImplicitSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOauth2ImplicitSecurity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityDefinitionsItemValidationError{
					field:  "Oauth2ImplicitSecurity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SecurityDefinitionsItem_Oauth2PasswordSecurity:
		if v == nil {
			err := SecurityDefinitionsItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOauth2PasswordSecurity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2PasswordSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2PasswordSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOauth2PasswordSecurity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityDefinitionsItemValidationError{
					field:  "Oauth2PasswordSecurity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SecurityDefinitionsItem_Oauth2ApplicationSecurity:
		if v == nil {
			err := SecurityDefinitionsItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOauth2ApplicationSecurity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2ApplicationSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2ApplicationSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOauth2ApplicationSecurity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityDefinitionsItemValidationError{
					field:  "Oauth2ApplicationSecurity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SecurityDefinitionsItem_Oauth2AccessCodeSecurity:
		if v == nil {
			err := SecurityDefinitionsItemValidationError{
				field:  "Oneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOauth2AccessCodeSecurity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2AccessCodeSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityDefinitionsItemValidationError{
						field:  "Oauth2AccessCodeSecurity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOauth2AccessCodeSecurity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityDefinitionsItemValidationError{
					field:  "Oauth2AccessCodeSecurity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SecurityDefinitionsItemMultiError(errors)
	}

	return nil
}

// SecurityDefinitionsItemMultiError is an error wrapping multiple validation
// errors returned by SecurityDefinitionsItem.ValidateAll() if the designated
// constraints aren't met.
type SecurityDefinitionsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityDefinitionsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityDefinitionsItemMultiError) AllErrors() []error { return m }

// SecurityDefinitionsItemValidationError is the validation error returned by
// SecurityDefinitionsItem.Validate if the designated constraints aren't met.
type SecurityDefinitionsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityDefinitionsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityDefinitionsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityDefinitionsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityDefinitionsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityDefinitionsItemValidationError) ErrorName() string {
	return "SecurityDefinitionsItemValidationError"
}

// Error satisfies the builtin error interface
func (e SecurityDefinitionsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityDefinitionsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityDefinitionsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityDefinitionsItemValidationError{}

// Validate checks the field values on SecurityRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecurityRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecurityRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecurityRequirementMultiError, or nil if none found.
func (m *SecurityRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *SecurityRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityRequirementValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityRequirementValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityRequirementValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecurityRequirementMultiError(errors)
	}

	return nil
}

// SecurityRequirementMultiError is an error wrapping multiple validation
// errors returned by SecurityRequirement.ValidateAll() if the designated
// constraints aren't met.
type SecurityRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityRequirementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityRequirementMultiError) AllErrors() []error { return m }

// SecurityRequirementValidationError is the validation error returned by
// SecurityRequirement.Validate if the designated constraints aren't met.
type SecurityRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityRequirementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityRequirementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityRequirementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityRequirementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityRequirementValidationError) ErrorName() string {
	return "SecurityRequirementValidationError"
}

// Error satisfies the builtin error interface
func (e SecurityRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityRequirementValidationError{}

// Validate checks the field values on StringArray with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringArray) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringArray with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringArrayMultiError, or
// nil if none found.
func (m *StringArray) ValidateAll() error {
	return m.validate(true)
}

func (m *StringArray) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StringArrayMultiError(errors)
	}

	return nil
}

// StringArrayMultiError is an error wrapping multiple validation errors
// returned by StringArray.ValidateAll() if the designated constraints aren't met.
type StringArrayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringArrayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringArrayMultiError) AllErrors() []error { return m }

// StringArrayValidationError is the validation error returned by
// StringArray.Validate if the designated constraints aren't met.
type StringArrayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringArrayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringArrayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringArrayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringArrayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringArrayValidationError) ErrorName() string { return "StringArrayValidationError" }

// Error satisfies the builtin error interface
func (e StringArrayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringArray.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringArrayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringArrayValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetExternalDocs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagValidationError{
					field:  "ExternalDocs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalDocs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValidationError{
				field:  "ExternalDocs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TagValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TagValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on TypeItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypeItemMultiError, or nil
// if none found.
func (m *TypeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TypeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TypeItemMultiError(errors)
	}

	return nil
}

// TypeItemMultiError is an error wrapping multiple validation errors returned
// by TypeItem.ValidateAll() if the designated constraints aren't met.
type TypeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeItemMultiError) AllErrors() []error { return m }

// TypeItemValidationError is the validation error returned by
// TypeItem.Validate if the designated constraints aren't met.
type TypeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeItemValidationError) ErrorName() string { return "TypeItemValidationError" }

// Error satisfies the builtin error interface
func (e TypeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeItemValidationError{}

// Validate checks the field values on VendorExtension with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VendorExtension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VendorExtension with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VendorExtensionMultiError, or nil if none found.
func (m *VendorExtension) ValidateAll() error {
	return m.validate(true)
}

func (m *VendorExtension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdditionalProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VendorExtensionValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VendorExtensionValidationError{
						field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VendorExtensionValidationError{
					field:  fmt.Sprintf("AdditionalProperties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VendorExtensionMultiError(errors)
	}

	return nil
}

// VendorExtensionMultiError is an error wrapping multiple validation errors
// returned by VendorExtension.ValidateAll() if the designated constraints
// aren't met.
type VendorExtensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VendorExtensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VendorExtensionMultiError) AllErrors() []error { return m }

// VendorExtensionValidationError is the validation error returned by
// VendorExtension.Validate if the designated constraints aren't met.
type VendorExtensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VendorExtensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VendorExtensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VendorExtensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VendorExtensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VendorExtensionValidationError) ErrorName() string { return "VendorExtensionValidationError" }

// Error satisfies the builtin error interface
func (e VendorExtensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVendorExtension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VendorExtensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VendorExtensionValidationError{}

// Validate checks the field values on Xml with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Xml) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Xml with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in XmlMultiError, or nil if none found.
func (m *Xml) ValidateAll() error {
	return m.validate(true)
}

func (m *Xml) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Prefix

	// no validation rules for Attribute

	// no validation rules for Wrapped

	for idx, item := range m.GetVendorExtension() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XmlValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XmlValidationError{
						field:  fmt.Sprintf("VendorExtension[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XmlValidationError{
					field:  fmt.Sprintf("VendorExtension[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return XmlMultiError(errors)
	}

	return nil
}

// XmlMultiError is an error wrapping multiple validation errors returned by
// Xml.ValidateAll() if the designated constraints aren't met.
type XmlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XmlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XmlMultiError) AllErrors() []error { return m }

// XmlValidationError is the validation error returned by Xml.Validate if the
// designated constraints aren't met.
type XmlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XmlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XmlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XmlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XmlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XmlValidationError) ErrorName() string { return "XmlValidationError" }

// Error satisfies the builtin error interface
func (e XmlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXml.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XmlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XmlValidationError{}
