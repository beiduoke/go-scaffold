// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/beiduoke/go-scaffold/app/core/service/internal/data/ent/dept"
	"github.com/beiduoke/go-scaffold/app/core/service/internal/data/ent/predicate"
)

// DeptUpdate is the builder for updating Dept entities.
type DeptUpdate struct {
	config
	hooks     []Hook
	mutation  *DeptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeptUpdate builder.
func (du *DeptUpdate) Where(ps ...predicate.Dept) *DeptUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DeptUpdate) SetUpdatedAt(t time.Time) *DeptUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DeptUpdate) SetNillableUpdatedAt(t *time.Time) *DeptUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (du *DeptUpdate) ClearUpdatedAt() *DeptUpdate {
	du.mutation.ClearUpdatedAt()
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DeptUpdate) SetDeletedAt(t time.Time) *DeptUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DeptUpdate) SetNillableDeletedAt(t *time.Time) *DeptUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (du *DeptUpdate) ClearDeletedAt() *DeptUpdate {
	du.mutation.ClearDeletedAt()
	return du
}

// SetName sets the "name" field.
func (du *DeptUpdate) SetName(s string) *DeptUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DeptUpdate) SetNillableName(s *string) *DeptUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DeptUpdate) ClearName() *DeptUpdate {
	du.mutation.ClearName()
	return du
}

// Mutation returns the DeptMutation object of the builder.
func (du *DeptUpdate) Mutation() *DeptMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeptUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeptUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeptUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeptUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := dept.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Dept.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DeptUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeptUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DeptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dept.Table, dept.Columns, sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.CreatedAtCleared() {
		_spec.ClearField(dept.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dept.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.UpdatedAtCleared() {
		_spec.ClearField(dept.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(dept.FieldDeletedAt, field.TypeTime, value)
	}
	if du.mutation.DeletedAtCleared() {
		_spec.ClearField(dept.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(dept.FieldName, field.TypeString, value)
	}
	if du.mutation.NameCleared() {
		_spec.ClearField(dept.FieldName, field.TypeString)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeptUpdateOne is the builder for updating a single Dept entity.
type DeptUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DeptUpdateOne) SetUpdatedAt(t time.Time) *DeptUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DeptUpdateOne) SetNillableUpdatedAt(t *time.Time) *DeptUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (duo *DeptUpdateOne) ClearUpdatedAt() *DeptUpdateOne {
	duo.mutation.ClearUpdatedAt()
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DeptUpdateOne) SetDeletedAt(t time.Time) *DeptUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DeptUpdateOne) SetNillableDeletedAt(t *time.Time) *DeptUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (duo *DeptUpdateOne) ClearDeletedAt() *DeptUpdateOne {
	duo.mutation.ClearDeletedAt()
	return duo
}

// SetName sets the "name" field.
func (duo *DeptUpdateOne) SetName(s string) *DeptUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DeptUpdateOne) SetNillableName(s *string) *DeptUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DeptUpdateOne) ClearName() *DeptUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// Mutation returns the DeptMutation object of the builder.
func (duo *DeptUpdateOne) Mutation() *DeptMutation {
	return duo.mutation
}

// Where appends a list predicates to the DeptUpdate builder.
func (duo *DeptUpdateOne) Where(ps ...predicate.Dept) *DeptUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeptUpdateOne) Select(field string, fields ...string) *DeptUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dept entity.
func (duo *DeptUpdateOne) Save(ctx context.Context) (*Dept, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeptUpdateOne) SaveX(ctx context.Context) *Dept {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeptUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeptUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeptUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := dept.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Dept.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DeptUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeptUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DeptUpdateOne) sqlSave(ctx context.Context) (_node *Dept, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dept.Table, dept.Columns, sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dept.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dept.FieldID)
		for _, f := range fields {
			if !dept.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dept.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duo.mutation.CreatedAtCleared() {
		_spec.ClearField(dept.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dept.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.UpdatedAtCleared() {
		_spec.ClearField(dept.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(dept.FieldDeletedAt, field.TypeTime, value)
	}
	if duo.mutation.DeletedAtCleared() {
		_spec.ClearField(dept.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(dept.FieldName, field.TypeString, value)
	}
	if duo.mutation.NameCleared() {
		_spec.ClearField(dept.FieldName, field.TypeString)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Dept{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
