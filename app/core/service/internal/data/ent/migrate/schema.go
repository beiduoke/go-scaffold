// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DeptsColumns holds the columns for the "depts" table.
	DeptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true, Comment: "id", SchemaType: map[string]string{"mysql": "int", "postgres": "serial"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true, Comment: "创建时间"},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true, Comment: "更新时间"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "删除时间"},
		{Name: "platform_id", Type: field.TypeUint64, Comment: "平台ID", SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigint"}},
		{Name: "sort", Type: field.TypeInt32, Nullable: true, Comment: "排序", Default: 100},
		{Name: "remark", Type: field.TypeString, Nullable: true, Comment: "备注", Default: ""},
		{Name: "status", Type: field.TypeEnum, Nullable: true, Comment: "状态", Enums: []string{"OFF", "ON"}, Default: "ON"},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 128, Comment: "名称"},
		{Name: "parent_id", Type: field.TypeInt32, Nullable: true, Comment: "父级ID", Default: 0},
		{Name: "ancestors", Type: field.TypeJSON, Nullable: true, Comment: "祖级列表"},
	}
	// DeptsTable holds the schema information for the "depts" table.
	DeptsTable = &schema.Table{
		Name:       "depts",
		Comment:    "部门表",
		Columns:    DeptsColumns,
		PrimaryKey: []*schema.Column{DeptsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "dept_id",
				Unique:  false,
				Columns: []*schema.Column{DeptsColumns[0]},
			},
			{
				Name:    "dept_platform_id",
				Unique:  false,
				Columns: []*schema.Column{DeptsColumns[4]},
			},
		},
	}
	// MenusColumns holds the columns for the "menus" table.
	MenusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true, Comment: "id", SchemaType: map[string]string{"mysql": "int", "postgres": "serial"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true, Comment: "创建时间"},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true, Comment: "更新时间"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "删除时间"},
		{Name: "platform_id", Type: field.TypeUint64, Comment: "平台ID", SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigint"}},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 128, Comment: "名称"},
	}
	// MenusTable holds the schema information for the "menus" table.
	MenusTable = &schema.Table{
		Name:       "menus",
		Comment:    "菜单表",
		Columns:    MenusColumns,
		PrimaryKey: []*schema.Column{MenusColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "menu_id",
				Unique:  false,
				Columns: []*schema.Column{MenusColumns[0]},
			},
			{
				Name:    "menu_platform_id",
				Unique:  false,
				Columns: []*schema.Column{MenusColumns[4]},
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true, Comment: "id", SchemaType: map[string]string{"mysql": "int", "postgres": "serial"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true, Comment: "创建时间"},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true, Comment: "更新时间"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "删除时间"},
		{Name: "platform_id", Type: field.TypeUint64, Comment: "平台ID", SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigint"}},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 128, Comment: "名称"},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Comment:    "岗位表",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "post_id",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[0]},
			},
			{
				Name:    "post_platform_id",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[4]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint32, Increment: true, Comment: "id", SchemaType: map[string]string{"mysql": "int", "postgres": "serial"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true, Comment: "创建时间"},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true, Comment: "更新时间"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "删除时间"},
		{Name: "platform_id", Type: field.TypeUint64, Comment: "平台ID", SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigint"}},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 128, Comment: "名称"},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Comment:    "角色表",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "role_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[0]},
			},
			{
				Name:    "role_platform_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[4]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true, Comment: "id", SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigint"}},
		{Name: "created_at", Type: field.TypeTime, Nullable: true, Comment: "创建时间"},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true, Comment: "更新时间"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "删除时间"},
		{Name: "platform_id", Type: field.TypeUint64, Comment: "平台ID", SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigint"}},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true, Size: 50, Comment: "用户名"},
		{Name: "password", Type: field.TypeString, Nullable: true, Size: 255, Comment: "密码"},
		{Name: "nickname", Type: field.TypeString, Nullable: true, Size: 128, Comment: "昵称"},
		{Name: "phone", Type: field.TypeString, Unique: true, Nullable: true, Size: 20, Comment: "手机号"},
		{Name: "email", Type: field.TypeString, Nullable: true, Size: 127, Comment: "电子邮箱"},
		{Name: "avatar", Type: field.TypeString, Nullable: true, Size: 1023, Comment: "头像"},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 1023, Comment: "个人说明"},
		{Name: "authority", Type: field.TypeEnum, Nullable: true, Comment: "授权", Enums: []string{"SYS_ADMIN", "CUSTOMER_USER", "GUEST_USER", "REFRESH_TOKEN"}, Default: "CUSTOMER_USER"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Comment:    "用户表",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[0]},
			},
			{
				Name:    "user_platform_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[4]},
			},
			{
				Name:    "user_phone_authority",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[8], UsersColumns[12]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DeptsTable,
		MenusTable,
		PostsTable,
		RolesTable,
		UsersTable,
	}
)

func init() {
	DeptsTable.Annotation = &entsql.Annotation{
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	MenusTable.Annotation = &entsql.Annotation{
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	PostsTable.Annotation = &entsql.Annotation{
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	RolesTable.Annotation = &entsql.Annotation{
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	UsersTable.Annotation = &entsql.Annotation{
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
}
