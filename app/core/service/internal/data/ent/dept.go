// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/beiduoke/go-scaffold/app/core/service/internal/data/ent/dept"
)

// 部门表
type Dept struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 备注
	Remark *string `json:"remark,omitempty"`
	// 排序
	Sort *int32 `json:"sort,omitempty"`
	// 状态 0 UNSPECIFIED 开启 1 -> ACTIVE 关闭 2 -> INACTIVE, 禁用 3 -> BANNED
	State *int32 `json:"state,omitempty"`
	// 名称
	Name *string `json:"name,omitempty"`
	// 父级ID
	ParentID *uint32 `json:"parent_id,omitempty"`
	// 祖级列表
	Ancestors []int `json:"ancestors,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeptQuery when eager-loading is set.
	Edges        DeptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeptEdges holds the relations/edges for other nodes in the graph.
type DeptEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Dept `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Dept `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeptEdges) ParentOrErr() (*Dept, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dept.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e DeptEdges) ChildrenOrErr() ([]*Dept, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dept) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dept.FieldAncestors:
			values[i] = new([]byte)
		case dept.FieldID, dept.FieldSort, dept.FieldState, dept.FieldParentID:
			values[i] = new(sql.NullInt64)
		case dept.FieldRemark, dept.FieldName:
			values[i] = new(sql.NullString)
		case dept.FieldCreatedAt, dept.FieldUpdatedAt, dept.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dept fields.
func (d *Dept) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dept.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = uint32(value.Int64)
		case dept.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = new(time.Time)
				*d.CreatedAt = value.Time
			}
		case dept.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = new(time.Time)
				*d.UpdatedAt = value.Time
			}
		case dept.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = new(time.Time)
				*d.DeletedAt = value.Time
			}
		case dept.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				d.Remark = new(string)
				*d.Remark = value.String
			}
		case dept.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				d.Sort = new(int32)
				*d.Sort = int32(value.Int64)
			}
		case dept.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				d.State = new(int32)
				*d.State = int32(value.Int64)
			}
		case dept.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = new(string)
				*d.Name = value.String
			}
		case dept.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				d.ParentID = new(uint32)
				*d.ParentID = uint32(value.Int64)
			}
		case dept.FieldAncestors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ancestors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Ancestors); err != nil {
					return fmt.Errorf("unmarshal field ancestors: %w", err)
				}
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dept.
// This includes values selected through modifiers, order, etc.
func (d *Dept) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Dept entity.
func (d *Dept) QueryParent() *DeptQuery {
	return NewDeptClient(d.config).QueryParent(d)
}

// QueryChildren queries the "children" edge of the Dept entity.
func (d *Dept) QueryChildren() *DeptQuery {
	return NewDeptClient(d.config).QueryChildren(d)
}

// Update returns a builder for updating this Dept.
// Note that you need to call Dept.Unwrap() before calling this method if this Dept
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dept) Update() *DeptUpdateOne {
	return NewDeptClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dept entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dept) Unwrap() *Dept {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dept is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dept) String() string {
	var builder strings.Builder
	builder.WriteString("Dept(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	if v := d.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := d.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := d.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := d.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := d.Sort; v != nil {
		builder.WriteString("sort=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.State; v != nil {
		builder.WriteString("state=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := d.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("ancestors=")
	builder.WriteString(fmt.Sprintf("%v", d.Ancestors))
	builder.WriteByte(')')
	return builder.String()
}

// Depts is a parsable slice of Dept.
type Depts []*Dept
