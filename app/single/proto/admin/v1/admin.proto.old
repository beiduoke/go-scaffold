syntax = "proto3";

package admin.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";
// import "protobuf/enum.proto";
// import "protobuf/struct.proto";

option go_package = "github.com/beiduoke/go-scaffold-single/api/admin/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.admin.v1";
option java_outer_classname = "adminProtoV1";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Scaffold Admin API";
    description: "后台管理脚手架系统";
    version: "1.0";
		contact: {
			name: "基础架构";
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			email: "none@example.com";
		};
		license: {
			name: "BSD 3-Clause License";
			url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
		};
  }
};

// The greeting service definition.
service AdminService {
  // 登出
  rpc Logout (LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
      additional_bindings {
        get: "/v1/auth/logout"
      }
    };
  }

  // 密码登陆
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login/{domain}"
      body: "auth"
    };
  }

  // 注册
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/auth/register/{domain}"
      body: "auth"
    };
  }

  // 短信登陆
  rpc SmsLogin (SmsLoginRequest) returns (SmsLoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/smsLogin/{domain}"
      body: "auth"
    };
  }

  // 邮件登陆
  rpc EmailLogin (EmailLoginRequest) returns (EmailLoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/emailLogin/{domain}"
      body: "auth"
    };
  }

  // User 用户模块
  // 当前登录用户概述
  rpc GetUserInfo (GetUserInfoRequest) returns (GetUserInfoResponse) {
    option (google.api.http) = {
      get: "/v1/users/info"
    };
  }

  // 当前登录用户概述
  rpc GetUserProfile (GetUserProfileRequest) returns (GetUserProfileResponse) {
    option (google.api.http) = {
      get: "/v1/users/profiles"
    };
  }

  // 当前登录用户拥有角色
  rpc ListUserRole (ListUserRoleRequest) returns (ListUserRoleResponse) {
    option (google.api.http) = {
      get: "/v1/users/roles"
    };
  }

  // 获取角色菜单路由树形列表
  rpc ListUserRoleMenuRouterTree (ListUserRoleMenuRouterTreeRequest) returns (ListUserRoleMenuRouterTreeResponse) {
    option (google.api.http) = {
      get: "/v1/users/routers/trees"
      additional_bindings {
        get: "/v1/users/roles/{role_id}/routers/trees"
      }
    };
  }
  
  // 获取角色菜单路由树形列表
  rpc ListUserRoleMenuTree (ListUserRoleMenuTreeRequest) returns (ListUserRoleMenuTreeResponse) {
    option (google.api.http) = {
      get: "/v1/users/menus/trees"
      additional_bindings {
        get: "/v1/users/roles/{role_id}/menus/trees"
      }
    };
  }

  // 获取角色权限列表
  rpc ListUserRolePermission (ListUserRolePermissionRequest) returns (ListUserRolePermissionResponse) {
    option (google.api.http) = {
      get: "/v1/users/permissions"
      additional_bindings {
        get: "/v1/users/roles/{role_id}/permissions"
      }
    };
  }

  // 列表用户
  rpc ListUser (ListUserRequest) returns (ListUserResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // 创建用户
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  // 获取用户
  rpc GetUser (GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{id}"
    };
  }

  // 修改用户
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/{id}"
      body: "data"
    };
  }

  // 删除用户
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{id}"
    };
  }

  // 验证用户名是否存在
  rpc ExistUserName (ExistUserNameRequest) returns (ExistUserNameResponse) {
    option (google.api.http) = {
      post: "/v1/users/existName"
      body: "*"
    };
  }

  // 列表租户
  rpc ListDomain (ListDomainRequest) returns (ListDomainResponse) {
    option (google.api.http) = {
      get: "/v1/domains"
    };
  }

  // 获取租户树形列表
  rpc ListDomainTree (ListDomainTreeRequest) returns (ListDomainTreeResponse) {
    option (google.api.http) = {
      get: "/v1/domains/{id}/trees"
      additional_bindings {
        get: "/v1/domains/trees"
      }
    };
  }

  // 创建租户
  rpc CreateDomain (CreateDomainRequest) returns (CreateDomainResponse) {
    option (google.api.http) = {
      post: "/v1/domains"
      body: "*"
    };
  }

  // 获取租户
  rpc GetDomain (GetDomainRequest) returns (Domain) {
    option (google.api.http) = {
      get: "/v1/domains/{id}"
    };
  }

  // 获取租户
  rpc GetDomainCode (GetDomainCodeRequest) returns (Domain) {
    option (google.api.http) = {
      get: "/v1/domains/{code}/code"
    };
  }

  // 获取租户
  rpc GetDomainName (GetDomainNameRequest) returns (Domain) {
    option (google.api.http) = {
      get: "/v1/domains/{name}/name"
    };
  }

  // 修改租户
  rpc UpdateDomain (UpdateDomainRequest) returns (UpdateDomainResponse) {
    option (google.api.http) = {
      put: "/v1/domains/{id}"
      body: "data"
    };
  }

  // 删除租户
  rpc DeleteDomain (DeleteDomainRequest) returns (DeleteDomainResponse) {
    option (google.api.http) = {
      delete: "/v1/domains/{id}"
    };
  }
  
  // 设置租户状态
  rpc UpdateDomainState (UpdateDomainStateRequest) returns (UpdateDomainStateResponse) {
    option (google.api.http) = {
      put: "/v1/domains/{id}/state"
      body: "data"
    };
  }
  
  // 获取角色菜单
  rpc ListDomainMenu (ListDomainMenuRequest) returns (ListDomainMenuResponse) {
    option (google.api.http) = {
      get: "/v1/domains/{id}/menus"
    };
  }

  // 处理角色菜单
  rpc HandleDomainMenu (HandleDomainMenuRequest) returns (HandleDomainMenuResponse) {
    option (google.api.http) = {
      post: "/v1/domains/{id}/menus"
      body: "data"
    };
  }

  // 角色模块
  // 列表角色
  rpc ListRole (ListRoleRequest) returns (ListRoleResponse) {
    option (google.api.http) = {
      get: "/v1/roles"
    };
  }

  // 创建角色
  rpc CreateRole (CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/v1/roles"
      body: "*"
    };
  }

  // 获取指定ID角色
  rpc GetRole (GetRoleRequest) returns (Role) {
    option (google.api.http) = {
      get: "/v1/roles/{id}"
    };
  }

  // 修改指定ID角色
  rpc UpdateRole (UpdateRoleRequest) returns (UpdateRoleResponse) {
    option (google.api.http) = {
      put: "/v1/roles/{id}"
      body: "data"
    };
  }

  // 更新指定ID角色状态
  rpc UpdateRoleState (UpdateRoleStateRequest) returns (UpdateRoleStateResponse) {
    option (google.api.http) = {
      put: "/v1/roles/{id}/state"
      body: "data"
    };
  }

  // 删除指定ID角色
  rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (google.api.http) = {
      delete: "/v1/roles/{id}"
    };
  }

  // 获取指定ID角色菜单
  rpc ListRoleMenu (ListRoleMenuRequest) returns (ListRoleMenuResponse) {
    option (google.api.http) = {
      get: "/v1/roles/{id}/menus"
    };
  }

  // 处理指定ID角色菜单
  rpc HandleRoleMenu (HandleRoleMenuRequest) returns (HandleRoleMenuResponse) {
    option (google.api.http) = {
      post: "/v1/roles/{id}/menus"
      body: "data"
    };
  }

  // 获取指定ID角色部门
  rpc ListRoleDept (ListRoleDeptRequest) returns (ListRoleDeptResponse) {
    option (google.api.http) = {
      get: "/v1/roles/{id}/depts"
    };
  }

  // 获取指定ID角色数据范围
  rpc GetRoleDataScope (GetRoleDataScopeRequest) returns (GetRoleDataScopeResponse) {
    option (google.api.http) = {
      get: "/v1/roles/{id}/dataScopes"
    };
  }

  // 处理指定ID角色数据范围
  rpc HandleRoleDataScope (HandleRoleDataScopeRequest) returns (HandleRoleDataScopeResponse) {
    option (google.api.http) = {
      post: "/v1/roles/{id}/dataScopes"
      body: "data"
    };
  }

  // 菜单模块
  // 列表菜单
  rpc ListMenu (ListMenuRequest) returns (ListMenuResponse) {
    option (google.api.http) = {
      get: "/v1/menus"
    };
  }

  // 创建菜单
  rpc CreateMenu (CreateMenuRequest) returns (CreateMenuResponse) {
    option (google.api.http) = {
      post: "/v1/menus"
      body: "*"
    };
  }

  // 获取树形菜单
  rpc ListMenuTree (ListMenuTreeRequest) returns (ListMenuTreeResponse) {
    option (google.api.http) = {
      get: "/v1/menus/{id}/trees"
    };
  }

  // 获取菜单
  rpc GetMenu (GetMenuRequest) returns (Menu) {
    option (google.api.http) = {
      get: "/v1/menus/{id}"
    };
  }

  // 修改菜单
  rpc UpdateMenu (UpdateMenuRequest) returns (UpdateMenuResponse) {
    option (google.api.http) = {
      put: "/v1/menus/{id}"
      body: "data"
    };
  }

  // 删除菜单
  rpc DeleteMenu (DeleteMenuRequest) returns (DeleteMenuResponse) {
    option (google.api.http) = {
      delete: "/v1/menus/{id}"
    };
  }

  // 列表部门
  rpc ListDept (ListDeptRequest) returns (ListDeptResponse) {
    option (google.api.http) = {
      get: "/v1/depts"
    };
  }

  // 创建部门
  rpc CreateDept (CreateDeptRequest) returns (CreateDeptResponse) {
    option (google.api.http) = {
      post: "/v1/depts"
      body: "*"
    };
  }

  // 获取部门
  rpc GetDept (GetDeptRequest) returns (Dept) {
    option (google.api.http) = {
      get: "/v1/depts/{id}"
    };
  }

  // 修改部门
  rpc UpdateDept (UpdateDeptRequest) returns (UpdateDeptResponse) {
    option (google.api.http) = {
      put: "/v1/depts/{id}"
      body: "data"
    };
  }

  
  // 更新指定ID角色状态
  rpc UpdateDeptState (UpdateDeptStateRequest) returns (UpdateDeptStateResponse) {
    option (google.api.http) = {
      put: "/v1/depts/{id}/state"
      body: "data"
    };
  }

  // 删除部门
  rpc DeleteDept (DeleteDeptRequest) returns (DeleteDeptResponse) {
    option (google.api.http) = {
      delete: "/v1/depts/{id}"
    };
  }

  // 获取全部部门树形
  rpc ListDeptTree (ListDeptTreeRequest) returns (ListDeptTreeResponse) {
    option (google.api.http) = {
      get: "/v1/depts/{id}/trees"
    };
  }

  // 列表岗位
  rpc ListPost (ListPostRequest) returns (ListPostResponse) {
    option (google.api.http) = {
      get: "/v1/posts"
    };
  }

  // 创建岗位
  rpc CreatePost (CreatePostRequest) returns (CreatePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts"
      body: "*"
    };
  }

  // 获取岗位
  rpc GetPost (GetPostRequest) returns (Post) {
    option (google.api.http) = {
      get: "/v1/posts/{id}"
    };
  }

  // 修改岗位
  rpc UpdatePost (UpdatePostRequest) returns (UpdatePostResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{id}"
      body: "data"
    };
  }

  // 删除岗位
  rpc DeletePost (DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {
      delete: "/v1/posts/{id}"
    };
  }

  // 设置岗位状态
  rpc UpdatePostState (UpdatePostStateRequest) returns (UpdatePostStateResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{id}/state"
      body: "data"
    };
  }

  // 列表字典
  rpc ListDict (ListDictRequest) returns (ListDictResponse) {
    option (google.api.http) = {
      get: "/v1/dicts"
    };
  }

  // 创建字典
  rpc CreateDict (CreateDictRequest) returns (CreateDictResponse) {
    option (google.api.http) = {
      post: "/v1/dicts"
      body: "*"
    };
  }

  // 获取字典
  rpc GetDict (GetDictRequest) returns (Dict) {
    option (google.api.http) = {
      get: "/v1/dicts/{id}"
    };
  }

  // 修改字典
  rpc UpdateDict (UpdateDictRequest) returns (UpdateDictResponse) {
    option (google.api.http) = {
      put: "/v1/dicts/{id}"
      body: "data"
    };
  }

  // 删除字典
  rpc DeleteDict (DeleteDictRequest) returns (DeleteDictResponse) {
    option (google.api.http) = {
      delete: "/v1/dicts/{id}"
    };
  }

  // 设置字典状态
  rpc UpdateDictState (UpdateDictStateRequest) returns (UpdateDictStateResponse) {
    option (google.api.http) = {
      put: "/v1/dicts/{id}/state"
      body: "data"
    };
  }

  
  // 列表字典数据
  rpc ListDictData (ListDictDataRequest) returns (ListDictDataResponse) {
    option (google.api.http) = {
      get: "/v1/dictData"
    };
  }

  // 创建字典数据
  rpc CreateDictData (CreateDictDataRequest) returns (CreateDictDataResponse) {
    option (google.api.http) = {
      post: "/v1/dictData"
      body: "*"
    };
  }

  // 获取字典数据
  rpc GetDictData (GetDictDataRequest) returns (DictData) {
    option (google.api.http) = {
      get: "/v1/dictData/{id}"
    };
  }

  // 修改字典数据
  rpc UpdateDictData (UpdateDictDataRequest) returns (UpdateDictDataResponse) {
    option (google.api.http) = {
      put: "/v1/dictData/{id}"
      body: "data"
    };
  }

  // 删除字典数据
  rpc DeleteDictData (DeleteDictDataRequest) returns (DeleteDictDataResponse) {
    option (google.api.http) = {
      delete: "/v1/dictData/{id}"
    };
  }

  // 设置字典数据状态
  rpc UpdateDictDataState (UpdateDictDataStateRequest) returns (UpdateDictDataStateResponse) {
    option (google.api.http) = {
      put: "/v1/dictData/{id}/state"
      body: "data"
    };
  }

  
  // 列表租户套餐
  rpc ListDomainPackage (ListDomainPackageRequest) returns (ListDomainPackageResponse) {
    option (google.api.http) = {
      get: "/v1/depts"
    };
  }

  // 创建租户套餐
  rpc CreateDomainPackage (CreateDomainPackageRequest) returns (CreateDomainPackageResponse) {
    option (google.api.http) = {
      post: "/v1/domainPackage"
      body: "*"
    };
  }

  // 获取租户套餐
  rpc GetDomainPackage (GetDomainPackageRequest) returns (DomainPackage) {
    option (google.api.http) = {
      get: "/v1/domainPackage/{id}"
    };
  }

  // 修改租户套餐
  rpc UpdateDomainPackage (UpdateDomainPackageRequest) returns (UpdateDomainPackageResponse) {
    option (google.api.http) = {
      put: "/v1/domainPackage/{id}"
      body: "data"
    };
  }

  
  // 更新指定ID套餐状态
  rpc UpdateDomainPackageState (UpdateDomainPackageStateRequest) returns (UpdateDomainPackageStateResponse) {
    option (google.api.http) = {
      put: "/v1/domainPackage/{id}/state"
      body: "data"
    };
  }

  // 删除租户套餐
  rpc DeleteDomainPackage (DeleteDomainPackageRequest) returns (DeleteDomainPackageResponse) {
    option (google.api.http) = {
      delete: "/v1/domainPackage/{id}"
    };
  }
}

// 通用返回
message Result {
  uint64 id = 1;
  map<string, string> data = 2;
}

// 性别
enum Gender {
  GENDER_UNSPECIFIED = 0;
  GENDER_MAN = 1;
  GENDER_WOMAN = 2;
}

// 菜单类型
enum MenuType {
  MENU_TYPE_UNSPECIFIED = 0;
  MENU_TYPE_CATALOGUE = 1;
  MENU_TYPE_MENU = 2;
  MENU_TYPE_ABILITY = 3;
}

// 菜单链接类型
enum MenuLinkType {
  MENU_LINK_TYPE_UNSPECIFIED = 0;
  MENU_LINK_TYPE_NO = 1;
  MENU_LINK_TYPE_IFRAME = 2;
  MENU_LINK_TYPE_BLANK = 3;
}

// 角色数据范围
enum RoleDataScope {
  ROLE_DATA_SCOPE_UNSPECIFIED = 0;
  ROLE_DATA_SCOPE_SELF = 1;
  ROLE_DATA_SCOPE_ALL = 2;
  ROLE_DATA_SCOPE_DEPT = 3;
  ROLE_DATA_SCOPE_DEPT_FOLLOW = 4;
  ROLE_DATA_SCOPE_DEPT_CUSTOM = 5;
}

// 回应 - 登录
message LoginResponse {
  // 访问token
  string token = 1;
  // 刷新token
  string refresh_token = 2;
  // 过期时间
  google.protobuf.Timestamp expire_time = 3;
}

// 回应 - 短信登录
message SmsLoginResponse {
  // 访问token
  string token = 1;
  // 刷新token
  string refresh_token = 2;
  // 过期时间
  google.protobuf.Timestamp expire_time = 3;
}

// 回应 - 邮箱登录
message EmailLoginResponse {
  // 访问token
  string token = 1;
  // 刷新token
  string refresh_token = 2;
  // 过期时间
  google.protobuf.Timestamp expire_time = 3;
}

// 回应 - 注册
message RegisterResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

message LogoutRequest {}

// 回应 - 退出登录
message LogoutResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 密码登录
message LoginRequest {
  message Auth {
    string account = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 28}];
  }
  // 请求体
  Auth auth = 1 [(validate.rules).message = {required: true}];
  string domain = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
}

// 请求 - 短信登录
message SmsLoginRequest {
  message Auth {
    string phone = 1 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
    string code = 2 [(validate.rules).string.pattern = "^[0-9]{6}$"];
  }

  // 请求体
  Auth auth = 1 [(validate.rules).message = {required: true}];
  string domain = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
}

// 请求 - 邮件登录
message EmailLoginRequest {
  message Auth {
    string email = 1 [(validate.rules).string.email = true];
    string code = 2 [(validate.rules).string.pattern = "^[0-9]{4,6}$"];
  }

  // 请求体
  Auth auth = 1 [(validate.rules).message = {required: true}];
  string domain = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
}

// 请求 - 注册
message RegisterRequest {
  message Auth {
    // 用户名
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    // 密码
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 25}];
    // 电话
    string phone = 3 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
  }
  // 请求体
  Auth auth = 1 [(validate.rules).message = {required: true}];
  string domain = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
}

// 用户模块
message User {
  uint64 id = 1;
  string name = 2;
  optional string nick_name = 4;
  optional string real_name = 5;
  optional string birthday = 6;
  optional int32 gender = 7; 
  optional string phone = 8;
  optional string email = 9;
  optional string avatar = 10;
  optional int32 state = 11 [(gnostic.openapi.v3.property) = {description: "状态"}];
  optional google.protobuf.Timestamp created_at = 12;
  optional google.protobuf.Timestamp updated_at = 13;
  optional uint64 dept_id = 14;
  repeated uint64 post_ids = 15;
  repeated uint64 role_ids = 16;
  optional Dept dept = 17;
  repeated Role roles = 18;
  repeated Post posts = 19;
}

// 请求 - 用户详情
message GetUserInfoRequest {}

// 回应 - 用户详情
message GetUserInfoResponse {
  repeated Role roles = 1;
  string name = 2;
  string nick_name = 4;
  string real_name = 5;
  string birthday = 6;
  int32 gender = 7; 
  string phone = 8;
  string email = 9;
  string avatar = 10;
  int32 state = 11 [(gnostic.openapi.v3.property) = {
    description: "用户状态"
    default: {string: "ON"}
    enum: [
      {yaml: "ON"}, 
      {yaml: "OFF"}
    ]
  }];
}

// 请求 - 用户概况详情
message GetUserProfileRequest {}

// 回应 - 用户概况详情
message GetUserProfileResponse {
  User user = 1;
  repeated Role roles = 2;
}


// 请求 - 用户角色
message ListUserRoleRequest {}

// 回应 - 用户角色
message ListUserRoleResponse {
  repeated Role items = 1;
  optional int64 total = 2;
}

// 请求 - 列表用户
message ListUserRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
  optional int32 dept_id = 4;
  optional string name = 5;
  optional string nick_name = 6;
}

// 回应 - 列表用户
message ListUserResponse {
  int64 total = 1;
  repeated User items = 2;
}

// 请求 - 获取用户角色菜单树形
message ListUserRoleMenuRouterTreeRequest {
  uint64 role_id = 1 [(validate.rules).uint64 = {gte: 0}];
  optional uint64 menu_parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取用户角色菜单树形 Deprecated
message ListUserRoleMenuTreeResponseDeprecated {
  message MenuMeta {
    // 路由title  一般必填
    string title = 1;
    // 动态路由可打开Tab页数
    int32 dynamic_level = 2;
    // 动态路由的实际Path, 即去除路由的动态部分;
    string real_path = 3;;
    // 是否忽略KeepAlive缓存
    bool ignore_keep_alive = 4;
    // 是否固定标签
    bool affix = 5;
    // 图标，也是菜单图标
    string icon = 6;
    // 内嵌iframe的地址
    string frame_src = 7;
    // 指定该路由切换的动画名
    string transition_name = 8;
    // 隐藏该路由在面包屑上面的显示
    bool hide_breadcrumb = 9;
    // 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true
    bool carry_param = 10;
    // 隐藏所有子菜单
    bool hide_children_in_menu = 11;
    // 当前激活的菜单。用于配置详情页时左侧激活的菜单路径
    string current_active_menu = 12;
    // 当前路由不再标签页显示
    bool hide_tab = 13;
    // 当前路由不再菜单显示
    bool hide_menu = 14;
    // 菜单排序，只对第一级有效
    int32 order_no = 15;
    // 忽略路由。用于在ROUTE_MAPPING以及BACK权限模式下，生成对应的菜单而忽略路由。2.5.3以上版本有效
    bool ignore_route = 16;
    // 是否在子级菜单的完整path中忽略本级path。2.5.3以上版本有效
    bool hide_pathfor_children = 17;
  }
  message Menu {
    string name = 1;
    string path = 2;
    string component = 3;
    string redirect = 4;
    string full_path = 5;
    string alias = 6;
    bool case_sensitive = 7;
    MenuMeta meta = 8;
    repeated Menu children = 9;
  }
  repeated Menu items = 1;
  optional int64 total = 2;
}

// 路由菜单
message MenuRouter {
  message Meta {
    // 路由title  一般必填
    string title = 1;
    // 是否忽略KeepAlive缓存
    optional bool ignore_keep_alive = 4;
    // 图标，也是菜单图标
    optional string icon = 6;
    // 内嵌iframe的地址
    optional string frame_src = 7;
    // 隐藏该路由在面包屑上面的显示
    optional bool hide_breadcrumb = 9;
    // 当前路由不再菜单显示
    optional bool hide_menu = 14;
    // 菜单排序，只对第一级有效
    optional int32 order_no = 15;
    // 当前激活的菜单。用于配置详情页时左侧激活的菜单路径
    optional string current_active_menu = 12;
    // 固定菜单在tab栏
    optional bool affix = 13;
  }
  // 路由名称
  string name = 1;
  // 路由地址
  string path = 2;
  // 路由组件
  optional string component = 3;
  // 路由重定向
  optional string redirect = 4;
  // 路由头信息
  Meta meta = 5;
  // 路由子集
  repeated MenuRouter children = 6;
  // 路由ID
  optional uint64 id = 7;
  // 路由父级
  optional uint64 parent_id = 8;
}

// 回应 - 获取用户角色菜单路由列表-树形
message ListUserRoleMenuRouterTreeResponse {
  repeated MenuRouter items = 1;
  optional int64 total = 2;
}

// 请求 - 获取用户角色菜单列表-树形
message ListUserRoleMenuTreeRequest {
  uint64 role_id = 1 [(validate.rules).uint64 = {gte: 0}];
  optional uint64 menu_parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取用户角色列表
message ListUserRoleMenuTreeResponse {
  repeated Menu items = 1;
  optional int64 total = 2;
}

// 请求 - 获取用户角色列表
message ListUserRolePermissionRequest {
  uint64 role_id = 1 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取用户角色列表
message ListUserRolePermissionResponse {
  repeated string items = 1;
  optional int64 total = 2;
}

// 请求 - 创建用户
message CreateUserRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional string avatar = 2;
  optional string password = 3 [(validate.rules).string = {min_len: 6, max_len: 28}];
  optional string nick_name = 4 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional string real_name = 5 [(validate.rules).string = {min_len: 2, max_len: 10}];
  optional string birthday = 6 [(validate.rules).string.pattern = "^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$"];
  optional int32 gender = 7 [(validate.rules).int32.gte = 0];
  string phone = 8 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
  optional string email = 9 [(validate.rules).string.email = true];
  int32 state = 10 [(validate.rules).int32.gte = 0];
  uint64 dept_id = 14 [(validate.rules).uint64 = {gt: 0}];
  repeated uint64 post_ids = 15 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  repeated uint64 role_ids = 16 [(validate.rules).repeated = {min_items: 1, unique: true, items: {uint64: {gt: 0}}}];
  optional string remarks = 17;
}

// 回应 - 创建用户
message CreateUserResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 绑定用户权限
message HandleUserRoleRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    uint64 domain_id = 2 [(validate.rules).uint64 = {gt: 0}]; 
    repeated uint64 role_ids = 11 [(validate.rules).repeated = {min_items: 1, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 3;
}

// 回应 - 绑定用户权限
message HandleUserRoleResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取用户
message GetUserRequest {
  uint64 id = 1  [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除用户
message DeleteUserRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除用户
message DeleteUserResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改用户
message UpdateUserRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string password = 3 [(validate.rules).string = {min_len: 6, max_len: 28}];
    optional string nick_name = 4 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string real_name = 5 [(validate.rules).string = {min_len: 2, max_len: 10}];
    // x must be less than the Unix Epoch
    optional string birthday = 6 [(validate.rules).string.pattern = "^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$"];
    optional int32 gender = 7 [(validate.rules).int32.gte = 0];
    string phone = 8 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
    optional string email = 9 [(validate.rules).string.email = true];
    int32 state = 10 [(validate.rules).int32.gte = 0];
    optional string avatar = 11;
    repeated uint64 role_ids = 12 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
    repeated uint64 post_ids = 13 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
    uint64 dept_id = 14 [(validate.rules).uint64 = {gt: 0}];
  }
  Data data = 2;
}

// 回应 - 修改用户
message UpdateUserResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 回应 - 获取用户菜单
message UserMenuTreeResponse {
  repeated MenuTree items = 1;
  optional int64 total = 2;
}

// 请求 - 验证用户是否存在
message ExistUserNameRequest {
  string name = 1;
}

// 回应 - 验证用户是否存在
message ExistUserNameResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}


// 租户模块
message Domain {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  uint64 parent_id = 5;
  optional string code = 6;
  optional int32 sort = 7;
  optional string alias = 8;
  optional string logo = 9;
  optional string pic = 10;
  optional string keywords = 11;
  optional string description = 12;
  optional int32 state = 13;
  optional string remarks = 14;
  repeated Domain children = 15;
}

// 请求 - 列表租户
message ListDomainRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
}

// 回应 - 列表租户
message ListDomainResponse {
  int64 total = 1;
  repeated Domain items = 2;
}

// 请求 - 列表租户
message ListDomainTreeRequest {
  uint64 id = 1;
}

// 回应 - 列表租户
message ListDomainTreeResponse {
  repeated Domain items = 1;
  optional int64 total = 2;
}

// 请求 - 创建租户
message CreateDomainRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional uint64 parent_id = 2;
  optional int32 sort = 3;
  optional string alias = 4 [(validate.rules).string = {min_len: 1, max_len: 100}];
  optional string logo = 5;
  optional string pic = 6;
  optional string keywords = 7;
  optional string description = 8;
  optional int32 state = 9 [(validate.rules).int32.gte = 0];
  optional string remarks = 10;
}

// 回应 - 创建租户
message CreateDomainResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改租户
message UpdateDomainRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional uint64 parent_id = 2;
    optional int32 sort = 3;
    optional string alias = 4 [(validate.rules).string = {min_len: 1, max_len: 100}];
    optional string logo = 5;
    optional string pic = 6;
    optional string keywords = 7;
    optional string description = 8;
    optional int32 state = 9 [(validate.rules).int32.gte = 0];
    optional string remarks = 10;
  }
  Data data = 2;
}

// 回应 - 创建租户
message UpdateDomainResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改租户-状态
message UpdateDomainStateRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional int32 state = 1 [(validate.rules).int32.gte = 0];
  }
  Data data = 2;
}

// 回应 - 创建租户-状态
message UpdateDomainStateResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取租户
message GetDomainRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 获取租户Code
message GetDomainCodeRequest {
  string code = 1 [(validate.rules).string.len = 19];
}

// 请求 - 获取租户Name
message GetDomainNameRequest {
  string name = 1 [(validate.rules).string = {min_len: 2, max_len: 20}];
}

// 请求 - 删除租户
message DeleteDomainRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除租户
message DeleteDomainResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取租户菜单
message ListDomainMenuRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 获取租户菜单
message ListDomainMenuResponse {
  repeated Menu items = 1;
  optional int64 total = 2;
}

// 请求 - 处理租户菜单
message HandleDomainMenuRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    repeated uint64 menu_ids = 10 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 2;
}

// 回应 - 处理租户菜单
message HandleDomainMenuResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 角色模块
message Role {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  uint64 parent_id = 5;
  optional string default_router = 6;
  optional int32 sort = 7;
	optional int32 data_scope = 8;         
	optional int32 menu_check_strictly = 9; 
	optional int32 dept_check_strictly = 10; 
  optional int32 state = 11;
  optional string remarks = 12;
  repeated uint64 menu_ids = 13;
}

// 请求 - 列表角色
message ListRoleRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
}

// 回应 - 列表角色
message ListRoleResponse {
  int64 total = 1;
  repeated Role items = 2;
}

// 请求 - 创建角色
message CreateRoleRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
  optional string default_router = 3 [(validate.rules).string = {min_len: 1, max_len: 100}];
  optional int32 sort = 4 [(validate.rules).int32 = {gte: 0}];
	optional int32 data_scope = 5 [(validate.rules).int32.gte = 0];
	optional int32 menu_check_strictly = 6 [(validate.rules).int32.gte = 0];
	optional int32 dept_check_strictly = 7 [(validate.rules).int32.gte = 0];
  int32 state = 8 [(validate.rules).int32.gte = 0];
  optional string remarks = 9 [(validate.rules).string = {min_len: 1, max_len: 1000}];
  repeated uint64 menu_ids = 10 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
}

// 回应 - 创建角色
message CreateRoleResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改角色
message UpdateRoleRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
    optional string default_router = 3 [(validate.rules).string = {min_len: 1, max_len: 100}];
    optional int32 sort = 4 [(validate.rules).int32 = {gte: 0}];
    optional int32 data_scope = 5 [(validate.rules).int32.gte = 0];  
    optional int32 menu_check_strictly = 6 [(validate.rules).int32.gte = 0];
    optional int32 dept_check_strictly = 7 [(validate.rules).int32.gte = 0];
    int32 state = 8 [(validate.rules).int32.gte = 0];
    optional string remarks = 9 [(validate.rules).string = {min_len: 1, max_len: 1000}];
    repeated uint64 menu_ids = 10 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 2;
}

// 回应 - 创建角色
message UpdateRoleResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改角色
message UpdateRoleStateRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    int32 state = 1 [(validate.rules).int32.gte = 0];
  }
  Data data = 2;
}

// 回应 - 创建角色
message UpdateRoleStateResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取角色
message GetRoleRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除角色
message DeleteRoleRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除角色
message DeleteRoleResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取角色菜单
message ListRoleMenuRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 获取角色菜单
message ListRoleMenuResponse {
  repeated Menu items = 1;
  optional int64 total = 2;
}

// 请求 - 处理角色菜单
message HandleRoleMenuRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    repeated uint64 menu_ids = 10 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 2;
}

// 回应 - 处理角色菜单
message HandleRoleMenuResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取角色菜单
message ListRoleDeptRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 获取角色菜单（未使用）
message ListRoleDeptResponse {
  optional int64 total = 1;
  repeated Dept items = 2;
}


// 请求 - 获取角色数据权限
message GetRoleDataScopeRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 角色菜单数据范围
message GetRoleDataScopeResponse {
  int32 scope = 1;
  optional int32 dept_check_strictly = 2;
  repeated uint64 dept_customs = 3;
}

// 请求 - 处理角色数据范围
message HandleRoleDataScopeRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message DataScope {
    int32 scope = 1 [(validate.rules).int32.gte = 0];
    optional int32 dept_check_strictly = 2 [(validate.rules).int32.gte = 0];
    repeated uint64 dept_customs = 3 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  }
  DataScope data = 2;
}

// 回应 - 处理角色数据
message HandleRoleDataScopeResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 菜单模块
message Menu {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  optional int32 type = 5;
  uint64 parent_id = 6;
  optional string path = 7;
  optional int32 is_hidden = 8;
  optional string component = 9;
  optional string permission = 10;
  optional int32 sort = 11;
  optional string icon = 12;
  string title = 13;
  optional int32 is_cache = 14;
  optional string link_url = 15;
  optional int32 is_affix = 16;
  optional int32 link_type = 17;
  repeated Menu children = 18;
  optional string api_resource = 19;
}

// 请求 - 列表菜单
message ListMenuRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
}

// 回应 - 列表菜单
message ListMenuResponse {
  int64 total = 1;
  repeated Menu items = 2;
}

// 请求 - 创建菜单
message CreateMenuRequest {
  optional string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
  int32 type = 2 [(validate.rules).int32.gte = 0];
  uint64 parent_id = 4 [(validate.rules).uint64 = {gte: 0}];
  optional string path = 5 [(validate.rules).string = {min_len: 1, max_len: 100}];
  int32 is_hidden = 6 [(validate.rules).int32.gte = 0];
  optional string component = 7 [(validate.rules).string = {max_len: 100}];
  optional string permission = 8 [(validate.rules).string = {max_len: 100}];
  optional int32 sort = 9 [(validate.rules).int32 = {lt: 100000}];
  optional string icon = 10 [(validate.rules).string = {min_len: 0, max_len: 100}];
  string title = 11 [(validate.rules).string = {min_len: 1, max_len: 100}];
  optional int32 is_cache = 12 [(validate.rules).int32.gte = 0];
  optional string link_url = 13 [(validate.rules).string = {min_len: 0, max_len: 100}];
  optional int32 is_affix = 14 [(validate.rules).int32.gte = 0];
  optional int32 link_type = 15 [(validate.rules).int32.gte = 0];
  optional string api_resource = 16 [(validate.rules).string = {min_len: 1, max_len: 100}];
}

// 回应 - 创建菜单
message CreateMenuResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改菜单
message UpdateMenuRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
    int32 type = 2 [(validate.rules).int32.gte = 0];
    uint64 parent_id = 4 [(validate.rules).uint64 = {gte: 0}];
    optional string path = 5 [(validate.rules).string = {min_len: 1, max_len: 100}];
    optional int32 is_hidden = 6 [(validate.rules).int32.gte = 0];
    optional string component = 7 [(validate.rules).string = {max_len: 100}];
    optional string permission = 8 [(validate.rules).string = {max_len: 100}];
    optional int32 sort = 9 [(validate.rules).int32 = {gte: 0}];
    optional string icon = 10 [(validate.rules).string = {min_len: 0, max_len: 100}];
    string title = 11 [(validate.rules).string = {min_len: 1, max_len: 100}];
    optional int32 is_cache = 12 [(validate.rules).int32.gte = 0];
    optional string link_url = 13 [(validate.rules).string = {min_len: 0, max_len: 100}];
    optional int32 is_affix = 14 [(validate.rules).int32.gte = 0];
    optional int32 link_type = 15 [(validate.rules).int32.gte = 0];
    optional string api_resource = 16 [(validate.rules).string = {min_len: 1, max_len: 100}];
  }
  Data data = 2;
}

// 回应 - 创建菜单
message UpdateMenuResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取菜单
message GetMenuRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除菜单
message DeleteMenuRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除菜单
message DeleteMenuResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

message MenuTree {
  uint64 id = 1;
  string name = 2;
  string title = 3;
  uint64 parent_id = 4;
  repeated MenuTree children = 5;
}

// 请求 - 获取树形菜单
message ListMenuTreeRequest {
  uint64 id = 1;
}

// 回应 - 获取树形菜单
message ListMenuTreeResponse {
  repeated Menu items = 1;
  optional int64 total = 2;
}

// 部门模块
message Dept {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  optional uint64 parent_id = 5;
  optional int32 sort = 6;
  optional string remarks = 7;
  optional int32 state = 8;
  repeated Dept children = 9;
}

// 请求 - 列表部门
message ListDeptRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
}

// 回应 - 列表部门
message ListDeptResponse {
  int64 total = 1;
  repeated Dept items = 2;
}

// 请求 - 创建部门
message CreateDeptRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
  int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
  int32 state = 4 [(validate.rules).int32.gte = 0];
  optional string remarks = 5 [(validate.rules).string = {min_len: 1, max_len: 1000}];
}

// 回应 - 创建部门
message CreateDeptResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改部门
message UpdateDeptRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    uint64 parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
    int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
    int32 state = 4 [(validate.rules).int32.gte = 0];
    optional string remarks = 5 [(validate.rules).string = {min_len: 1, max_len: 1000}];
  }
  Data data = 2;
}

// 回应 - 修改部门
message UpdateDeptResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改部门-状态
message UpdateDeptStateRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional int32 state = 1 [(validate.rules).int32.gte = 0];
  }
  Data data = 2;
}

// 回应 - 创建部门-状态
message UpdateDeptStateResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取部门
message GetDeptRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除部门
message DeleteDeptRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除部门
message DeleteDeptResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取树形部门
message ListDeptTreeRequest {
  uint64 id = 1;
}

// 回应 - 获取树形部门
message ListDeptTreeResponse {
  repeated Dept items = 1;
  optional int64 total = 2;
}

// 岗位模块
message Post {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  optional string code = 5;
  optional int32 sort = 6;
  optional string remarks = 7;
  optional int32 state = 8;
}

// 请求 - 列表岗位
message ListPostRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
  optional string name = 4;

}

// 回应 - 列表岗位
message ListPostResponse {
  int64 total = 1;
  repeated Post items = 2;
}

// 请求 - 创建岗位
message CreatePostRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional string code = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
  int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
  int32 state = 4 [(validate.rules).int32.gte = 0];
  optional string remarks = 5 [(validate.rules).string = {min_len: 0, max_len: 1000}];
}

// 回应 - 创建岗位
message CreatePostResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改岗位
message UpdatePostRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string code = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
    int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
    int32 state = 4 [(validate.rules).int32.gte = 0];
    string remarks = 5 [(validate.rules).string = {min_len: 0, max_len: 1000}];
  }
  Data data = 2;
}

// 回应 - 创建岗位
message UpdatePostResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取岗位
message GetPostRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除岗位
message DeletePostRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除岗位
message DeletePostResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改岗位-状态
message UpdatePostStateRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional int32 state = 1 [(validate.rules).int32.gte = 0];
  }
  Data data = 2;
}

// 回应 - 创建岗位-状态
message UpdatePostStateResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 字典模块
message Dict {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  string type = 5;
  optional int32 sort = 6;
  optional string remarks = 7;
  optional int32 state = 8;
}

// 请求 - 列表字典
message ListDictRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
}

// 回应 - 列表字典
message ListDictResponse {
  int64 total = 1;
  repeated Dict items = 2;
}

// 请求 - 创建字典
message CreateDictRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  string type = 2 [(validate.rules).string = {min_len: 1, max_len: 50}];
  int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
  int32 state = 4 [(validate.rules).int32.gte = 0];
  optional string remarks = 5 [(validate.rules).string = {min_len: 0, max_len: 1000}];
}

// 回应 - 创建字典
message CreateDictResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改字典
message UpdateDictRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
    int32 state = 4 [(validate.rules).int32.gte = 0];
    string remarks = 5 [(validate.rules).string = {min_len: 0, max_len: 1000}];
  }
  Data data = 2;
}

// 回应 - 创建字典
message UpdateDictResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取字典
message GetDictRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除字典
message DeleteDictRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除字典
message DeleteDictResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改字典-状态
message UpdateDictStateRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional int32 state = 1 [(validate.rules).int32.gte = 0];
  }
  Data data = 2;
}

// 回应 - 创建字典-状态
message UpdateDictStateResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 字典数据模块
message DictData {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string label = 4;
  string value = 5;
  string dict_type = 6;
  optional string color_type = 7;
  optional string css_class = 8;
  optional int32 sort = 9;
  optional string remarks = 10;
  optional int32 state = 11;
}

// 请求 - 列表字典数据
message ListDictDataRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
  optional string dict_type = 4;
}

// 回应 - 列表字典数据
message ListDictDataResponse {
  int64 total = 1;
  repeated DictData items = 2;
}

// 请求 - 创建字典数据
message CreateDictDataRequest {
  string label = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  string value = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
  string dict_type = 3 [(validate.rules).string = {min_len: 1, max_len: 50}];
  int32 sort = 4 [(validate.rules).int32 = {gte: 0}];
  int32 state = 5 [(validate.rules).int32.gte = 0];
  optional string remarks = 6 [(validate.rules).string = {min_len: 0, max_len: 1000}];
  optional string color_type = 7 [(validate.rules).string = {min_len: 0, max_len: 100}];
  optional string css_class = 8 [(validate.rules).string = {min_len: 0, max_len: 100}];
}

// 回应 - 创建字典数据
message CreateDictDataResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改字典数据
message UpdateDictDataRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string label = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    string value = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
    int32 sort = 4 [(validate.rules).int32 = {gte: 0}];
    int32 state = 5 [(validate.rules).int32.gte = 0];
    optional string remarks = 6 [(validate.rules).string = {min_len: 0, max_len: 1000}];
    optional string color_type = 7 [(validate.rules).string = {min_len: 0, max_len: 100}];
    optional string css_class = 8 [(validate.rules).string = {min_len: 0, max_len: 100}];
  }
  Data data = 2;
}

// 回应 - 创建字典数据
message UpdateDictDataResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取字典数据
message GetDictDataRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除字典数据
message DeleteDictDataRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除字典数据
message DeleteDictDataResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改字典数据-状态
message UpdateDictDataStateRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional int32 state = 1 [(validate.rules).int32.gte = 0];
  }
  Data data = 2;
}

// 回应 - 创建字典数据-状态
message UpdateDictDataStateResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}


// 租户套餐模块
message DomainPackage {
  optional google.protobuf.Timestamp created_at = 1;
  optional google.protobuf.Timestamp updated_at = 2;
  uint64 id = 3;
  string name = 4;
  repeated uint64 menu_ids = 5;
  optional int32 sort = 6;
  optional string remarks = 7;
  optional int32 state = 8;
}

// 请求 - 列表租户套餐
message ListDomainPackageRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
  optional string name = 4;

}

// 回应 - 列表租户套餐
message ListDomainPackageResponse {
  int64 total = 1;
  repeated DomainPackage items = 2;
}

// 请求 - 创建租户套餐
message CreateDomainPackageRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  repeated uint64 menu_ids = 2 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
  int32 state = 4 [(validate.rules).int32.gte = 0];
  optional string remarks = 5 [(validate.rules).string = {min_len: 0, max_len: 1000}];
}

// 回应 - 创建租户套餐
message CreateDomainPackageResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改租户套餐
message UpdateDomainPackageRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    repeated uint64 menu_ids = 2 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
    int32 sort = 3 [(validate.rules).int32 = {gte: 0}];
    int32 state = 4 [(validate.rules).int32.gte = 0];
    string remarks = 5 [(validate.rules).string = {min_len: 0, max_len: 1000}];
  }
  Data data = 2;
}

// 回应 - 创建租户套餐
message UpdateDomainPackageResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取租户套餐
message GetDomainPackageRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除租户套餐
message DeleteDomainPackageRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除租户套餐
message DeleteDomainPackageResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改租户套餐-状态
message UpdateDomainPackageStateRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    optional int32 state = 1 [(validate.rules).int32.gte = 0];
  }
  Data data = 2;
}

// 回应 - 创建租户套餐-状态
message UpdateDomainPackageStateResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}