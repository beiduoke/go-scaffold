// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/role.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ParentId

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DefaultRouter != nil {
		// no validation rules for DefaultRouter
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if m.DataScope != nil {
		// no validation rules for DataScope
	}

	if m.MenuCheckStrictly != nil {
		// no validation rules for MenuCheckStrictly
	}

	if m.DeptCheckStrictly != nil {
		// no validation rules for DeptCheckStrictly
	}

	if m.State != nil {
		// no validation rules for State
	}

	if m.Remarks != nil {
		// no validation rules for Remarks
	}

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on ListRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleRequestMultiError, or nil if none found.
func (m *ListRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Nopaging != nil {
		// no validation rules for Nopaging
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListRoleRequestMultiError(errors)
	}

	return nil
}

// ListRoleRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleRequestMultiError) AllErrors() []error { return m }

// ListRoleRequestValidationError is the validation error returned by
// ListRoleRequest.Validate if the designated constraints aren't met.
type ListRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleRequestValidationError) ErrorName() string { return "ListRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleRequestValidationError{}

// Validate checks the field values on ListRoleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleResponseMultiError, or nil if none found.
func (m *ListRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoleResponseMultiError(errors)
	}

	return nil
}

// ListRoleResponseMultiError is an error wrapping multiple validation errors
// returned by ListRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleResponseMultiError) AllErrors() []error { return m }

// ListRoleResponseValidationError is the validation error returned by
// ListRoleResponse.Validate if the designated constraints aren't met.
type ListRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleResponseValidationError) ErrorName() string { return "ListRoleResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := CreateRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() < 0 {
		err := CreateRoleRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := CreateRoleRequestValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateRoleRequest_MenuIds_Unique := make(map[uint64]struct{}, len(m.GetMenuIds()))

	for idx, item := range m.GetMenuIds() {
		_, _ = idx, item

		if _, exists := _CreateRoleRequest_MenuIds_Unique[item]; exists {
			err := CreateRoleRequestValidationError{
				field:  fmt.Sprintf("MenuIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateRoleRequest_MenuIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := CreateRoleRequestValidationError{
				field:  fmt.Sprintf("MenuIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DefaultRouter != nil {

		if l := utf8.RuneCountInString(m.GetDefaultRouter()); l < 1 || l > 100 {
			err := CreateRoleRequestValidationError{
				field:  "DefaultRouter",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Sort != nil {

		if m.GetSort() < 0 {
			err := CreateRoleRequestValidationError{
				field:  "Sort",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DataScope != nil {

		if m.GetDataScope() < 0 {
			err := CreateRoleRequestValidationError{
				field:  "DataScope",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MenuCheckStrictly != nil {

		if m.GetMenuCheckStrictly() < 0 {
			err := CreateRoleRequestValidationError{
				field:  "MenuCheckStrictly",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeptCheckStrictly != nil {

		if m.GetDeptCheckStrictly() < 0 {
			err := CreateRoleRequestValidationError{
				field:  "DeptCheckStrictly",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Remarks != nil {

		if l := utf8.RuneCountInString(m.GetRemarks()); l < 1 || l > 1000 {
			err := CreateRoleRequestValidationError{
				field:  "Remarks",
				reason: "value length must be between 1 and 1000 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRoleResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on UpdateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequestMultiError, or nil if none found.
func (m *UpdateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateRoleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequestMultiError) AllErrors() []error { return m }

// UpdateRoleRequestValidationError is the validation error returned by
// UpdateRoleRequest.Validate if the designated constraints aren't met.
type UpdateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequestValidationError) ErrorName() string {
	return "UpdateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequestValidationError{}

// Validate checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleResponseMultiError, or nil if none found.
func (m *UpdateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRoleResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleResponseMultiError) AllErrors() []error { return m }

// UpdateRoleResponseValidationError is the validation error returned by
// UpdateRoleResponse.Validate if the designated constraints aren't met.
type UpdateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleResponseValidationError) ErrorName() string {
	return "UpdateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleResponseValidationError{}

// Validate checks the field values on UpdateRoleStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleStateRequestMultiError, or nil if none found.
func (m *UpdateRoleStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateRoleStateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleStateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleStateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleStateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleStateRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleStateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleStateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleStateRequestMultiError) AllErrors() []error { return m }

// UpdateRoleStateRequestValidationError is the validation error returned by
// UpdateRoleStateRequest.Validate if the designated constraints aren't met.
type UpdateRoleStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleStateRequestValidationError) ErrorName() string {
	return "UpdateRoleStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleStateRequestValidationError{}

// Validate checks the field values on UpdateRoleStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleStateResponseMultiError, or nil if none found.
func (m *UpdateRoleStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRoleStateResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRoleStateResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRoleStateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRoleStateResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleStateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleStateResponseMultiError) AllErrors() []error { return m }

// UpdateRoleStateResponseValidationError is the validation error returned by
// UpdateRoleStateResponse.Validate if the designated constraints aren't met.
type UpdateRoleStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleStateResponseValidationError) ErrorName() string {
	return "UpdateRoleStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleStateResponseValidationError{}

// Validate checks the field values on GetRoleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRequestMultiError,
// or nil if none found.
func (m *GetRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetRoleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRoleRequestMultiError(errors)
	}

	return nil
}

// GetRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRequestMultiError) AllErrors() []error { return m }

// GetRoleRequestValidationError is the validation error returned by
// GetRoleRequest.Validate if the designated constraints aren't met.
type GetRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRequestValidationError) ErrorName() string { return "GetRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteRoleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteRoleResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteRoleResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on ListRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleMenuRequestMultiError, or nil if none found.
func (m *ListRoleMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ListRoleMenuRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRoleMenuRequestMultiError(errors)
	}

	return nil
}

// ListRoleMenuRequestMultiError is an error wrapping multiple validation
// errors returned by ListRoleMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRoleMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleMenuRequestMultiError) AllErrors() []error { return m }

// ListRoleMenuRequestValidationError is the validation error returned by
// ListRoleMenuRequest.Validate if the designated constraints aren't met.
type ListRoleMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleMenuRequestValidationError) ErrorName() string {
	return "ListRoleMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleMenuRequestValidationError{}

// Validate checks the field values on ListRoleMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleMenuResponseMultiError, or nil if none found.
func (m *ListRoleMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleMenuResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleMenuResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleMenuResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return ListRoleMenuResponseMultiError(errors)
	}

	return nil
}

// ListRoleMenuResponseMultiError is an error wrapping multiple validation
// errors returned by ListRoleMenuResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRoleMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleMenuResponseMultiError) AllErrors() []error { return m }

// ListRoleMenuResponseValidationError is the validation error returned by
// ListRoleMenuResponse.Validate if the designated constraints aren't met.
type ListRoleMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleMenuResponseValidationError) ErrorName() string {
	return "ListRoleMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleMenuResponseValidationError{}

// Validate checks the field values on HandleRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleRoleMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleRoleMenuRequestMultiError, or nil if none found.
func (m *HandleRoleMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := HandleRoleMenuRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleRoleMenuRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleRoleMenuRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleRoleMenuRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleRoleMenuRequestMultiError(errors)
	}

	return nil
}

// HandleRoleMenuRequestMultiError is an error wrapping multiple validation
// errors returned by HandleRoleMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type HandleRoleMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleMenuRequestMultiError) AllErrors() []error { return m }

// HandleRoleMenuRequestValidationError is the validation error returned by
// HandleRoleMenuRequest.Validate if the designated constraints aren't met.
type HandleRoleMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleMenuRequestValidationError) ErrorName() string {
	return "HandleRoleMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleRoleMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleMenuRequestValidationError{}

// Validate checks the field values on HandleRoleMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleRoleMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleRoleMenuResponseMultiError, or nil if none found.
func (m *HandleRoleMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HandleRoleMenuResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HandleRoleMenuResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HandleRoleMenuResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HandleRoleMenuResponseMultiError(errors)
	}

	return nil
}

// HandleRoleMenuResponseMultiError is an error wrapping multiple validation
// errors returned by HandleRoleMenuResponse.ValidateAll() if the designated
// constraints aren't met.
type HandleRoleMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleMenuResponseMultiError) AllErrors() []error { return m }

// HandleRoleMenuResponseValidationError is the validation error returned by
// HandleRoleMenuResponse.Validate if the designated constraints aren't met.
type HandleRoleMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleMenuResponseValidationError) ErrorName() string {
	return "HandleRoleMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleRoleMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleMenuResponseValidationError{}

// Validate checks the field values on ListRoleDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleDeptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleDeptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleDeptRequestMultiError, or nil if none found.
func (m *ListRoleDeptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleDeptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ListRoleDeptRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRoleDeptRequestMultiError(errors)
	}

	return nil
}

// ListRoleDeptRequestMultiError is an error wrapping multiple validation
// errors returned by ListRoleDeptRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRoleDeptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleDeptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleDeptRequestMultiError) AllErrors() []error { return m }

// ListRoleDeptRequestValidationError is the validation error returned by
// ListRoleDeptRequest.Validate if the designated constraints aren't met.
type ListRoleDeptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleDeptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleDeptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleDeptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleDeptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleDeptRequestValidationError) ErrorName() string {
	return "ListRoleDeptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleDeptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleDeptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleDeptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleDeptRequestValidationError{}

// Validate checks the field values on ListRoleDeptResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleDeptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleDeptResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleDeptResponseMultiError, or nil if none found.
func (m *ListRoleDeptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleDeptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleDeptResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleDeptResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleDeptResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return ListRoleDeptResponseMultiError(errors)
	}

	return nil
}

// ListRoleDeptResponseMultiError is an error wrapping multiple validation
// errors returned by ListRoleDeptResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRoleDeptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleDeptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleDeptResponseMultiError) AllErrors() []error { return m }

// ListRoleDeptResponseValidationError is the validation error returned by
// ListRoleDeptResponse.Validate if the designated constraints aren't met.
type ListRoleDeptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleDeptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleDeptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleDeptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleDeptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleDeptResponseValidationError) ErrorName() string {
	return "ListRoleDeptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleDeptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleDeptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleDeptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleDeptResponseValidationError{}

// Validate checks the field values on GetRoleDataScopeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleDataScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleDataScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleDataScopeRequestMultiError, or nil if none found.
func (m *GetRoleDataScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleDataScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetRoleDataScopeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRoleDataScopeRequestMultiError(errors)
	}

	return nil
}

// GetRoleDataScopeRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoleDataScopeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoleDataScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleDataScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleDataScopeRequestMultiError) AllErrors() []error { return m }

// GetRoleDataScopeRequestValidationError is the validation error returned by
// GetRoleDataScopeRequest.Validate if the designated constraints aren't met.
type GetRoleDataScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleDataScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleDataScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleDataScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleDataScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleDataScopeRequestValidationError) ErrorName() string {
	return "GetRoleDataScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleDataScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleDataScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleDataScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleDataScopeRequestValidationError{}

// Validate checks the field values on GetRoleDataScopeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleDataScopeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleDataScopeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleDataScopeResponseMultiError, or nil if none found.
func (m *GetRoleDataScopeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleDataScopeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if m.DeptCheckStrictly != nil {
		// no validation rules for DeptCheckStrictly
	}

	if len(errors) > 0 {
		return GetRoleDataScopeResponseMultiError(errors)
	}

	return nil
}

// GetRoleDataScopeResponseMultiError is an error wrapping multiple validation
// errors returned by GetRoleDataScopeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRoleDataScopeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleDataScopeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleDataScopeResponseMultiError) AllErrors() []error { return m }

// GetRoleDataScopeResponseValidationError is the validation error returned by
// GetRoleDataScopeResponse.Validate if the designated constraints aren't met.
type GetRoleDataScopeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleDataScopeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleDataScopeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleDataScopeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleDataScopeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleDataScopeResponseValidationError) ErrorName() string {
	return "GetRoleDataScopeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleDataScopeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleDataScopeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleDataScopeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleDataScopeResponseValidationError{}

// Validate checks the field values on HandleRoleDataScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleRoleDataScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleDataScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleRoleDataScopeRequestMultiError, or nil if none found.
func (m *HandleRoleDataScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleDataScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := HandleRoleDataScopeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleRoleDataScopeRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleRoleDataScopeRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleRoleDataScopeRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleRoleDataScopeRequestMultiError(errors)
	}

	return nil
}

// HandleRoleDataScopeRequestMultiError is an error wrapping multiple
// validation errors returned by HandleRoleDataScopeRequest.ValidateAll() if
// the designated constraints aren't met.
type HandleRoleDataScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleDataScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleDataScopeRequestMultiError) AllErrors() []error { return m }

// HandleRoleDataScopeRequestValidationError is the validation error returned
// by HandleRoleDataScopeRequest.Validate if the designated constraints aren't met.
type HandleRoleDataScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleDataScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleDataScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleDataScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleDataScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleDataScopeRequestValidationError) ErrorName() string {
	return "HandleRoleDataScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleRoleDataScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleDataScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleDataScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleDataScopeRequestValidationError{}

// Validate checks the field values on HandleRoleDataScopeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleRoleDataScopeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleDataScopeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleRoleDataScopeResponseMultiError, or nil if none found.
func (m *HandleRoleDataScopeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleDataScopeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Type

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HandleRoleDataScopeResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HandleRoleDataScopeResponseValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HandleRoleDataScopeResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HandleRoleDataScopeResponseMultiError(errors)
	}

	return nil
}

// HandleRoleDataScopeResponseMultiError is an error wrapping multiple
// validation errors returned by HandleRoleDataScopeResponse.ValidateAll() if
// the designated constraints aren't met.
type HandleRoleDataScopeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleDataScopeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleDataScopeResponseMultiError) AllErrors() []error { return m }

// HandleRoleDataScopeResponseValidationError is the validation error returned
// by HandleRoleDataScopeResponse.Validate if the designated constraints
// aren't met.
type HandleRoleDataScopeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleDataScopeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleDataScopeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleDataScopeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleDataScopeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleDataScopeResponseValidationError) ErrorName() string {
	return "HandleRoleDataScopeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleRoleDataScopeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleDataScopeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleDataScopeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleDataScopeResponseValidationError{}

// Validate checks the field values on UpdateRoleRequest_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequest_DataMultiError, or nil if none found.
func (m *UpdateRoleRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		err := UpdateRoleRequest_DataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() < 0 {
		err := UpdateRoleRequest_DataValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() < 0 {
		err := UpdateRoleRequest_DataValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateRoleRequest_Data_MenuIds_Unique := make(map[uint64]struct{}, len(m.GetMenuIds()))

	for idx, item := range m.GetMenuIds() {
		_, _ = idx, item

		if _, exists := _UpdateRoleRequest_Data_MenuIds_Unique[item]; exists {
			err := UpdateRoleRequest_DataValidationError{
				field:  fmt.Sprintf("MenuIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateRoleRequest_Data_MenuIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := UpdateRoleRequest_DataValidationError{
				field:  fmt.Sprintf("MenuIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DefaultRouter != nil {

		if l := utf8.RuneCountInString(m.GetDefaultRouter()); l < 1 || l > 100 {
			err := UpdateRoleRequest_DataValidationError{
				field:  "DefaultRouter",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Sort != nil {

		if m.GetSort() < 0 {
			err := UpdateRoleRequest_DataValidationError{
				field:  "Sort",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DataScope != nil {

		if m.GetDataScope() < 0 {
			err := UpdateRoleRequest_DataValidationError{
				field:  "DataScope",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MenuCheckStrictly != nil {

		if m.GetMenuCheckStrictly() < 0 {
			err := UpdateRoleRequest_DataValidationError{
				field:  "MenuCheckStrictly",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeptCheckStrictly != nil {

		if m.GetDeptCheckStrictly() < 0 {
			err := UpdateRoleRequest_DataValidationError{
				field:  "DeptCheckStrictly",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Remarks != nil {

		if l := utf8.RuneCountInString(m.GetRemarks()); l < 1 || l > 1000 {
			err := UpdateRoleRequest_DataValidationError{
				field:  "Remarks",
				reason: "value length must be between 1 and 1000 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateRoleRequest_DataMultiError(errors)
	}

	return nil
}

// UpdateRoleRequest_DataMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleRequest_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequest_DataMultiError) AllErrors() []error { return m }

// UpdateRoleRequest_DataValidationError is the validation error returned by
// UpdateRoleRequest_Data.Validate if the designated constraints aren't met.
type UpdateRoleRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequest_DataValidationError) ErrorName() string {
	return "UpdateRoleRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequest_DataValidationError{}

// Validate checks the field values on UpdateRoleStateRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleStateRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleStateRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleStateRequest_DataMultiError, or nil if none found.
func (m *UpdateRoleStateRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleStateRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetState() < 0 {
		err := UpdateRoleStateRequest_DataValidationError{
			field:  "State",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateRoleStateRequest_DataMultiError(errors)
	}

	return nil
}

// UpdateRoleStateRequest_DataMultiError is an error wrapping multiple
// validation errors returned by UpdateRoleStateRequest_Data.ValidateAll() if
// the designated constraints aren't met.
type UpdateRoleStateRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleStateRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleStateRequest_DataMultiError) AllErrors() []error { return m }

// UpdateRoleStateRequest_DataValidationError is the validation error returned
// by UpdateRoleStateRequest_Data.Validate if the designated constraints
// aren't met.
type UpdateRoleStateRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleStateRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleStateRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleStateRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleStateRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleStateRequest_DataValidationError) ErrorName() string {
	return "UpdateRoleStateRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleStateRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleStateRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleStateRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleStateRequest_DataValidationError{}

// Validate checks the field values on HandleRoleMenuRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleRoleMenuRequest_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleMenuRequest_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleRoleMenuRequest_DataMultiError, or nil if none found.
func (m *HandleRoleMenuRequest_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleMenuRequest_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	_HandleRoleMenuRequest_Data_MenuIds_Unique := make(map[uint64]struct{}, len(m.GetMenuIds()))

	for idx, item := range m.GetMenuIds() {
		_, _ = idx, item

		if _, exists := _HandleRoleMenuRequest_Data_MenuIds_Unique[item]; exists {
			err := HandleRoleMenuRequest_DataValidationError{
				field:  fmt.Sprintf("MenuIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_HandleRoleMenuRequest_Data_MenuIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := HandleRoleMenuRequest_DataValidationError{
				field:  fmt.Sprintf("MenuIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return HandleRoleMenuRequest_DataMultiError(errors)
	}

	return nil
}

// HandleRoleMenuRequest_DataMultiError is an error wrapping multiple
// validation errors returned by HandleRoleMenuRequest_Data.ValidateAll() if
// the designated constraints aren't met.
type HandleRoleMenuRequest_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleMenuRequest_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleMenuRequest_DataMultiError) AllErrors() []error { return m }

// HandleRoleMenuRequest_DataValidationError is the validation error returned
// by HandleRoleMenuRequest_Data.Validate if the designated constraints aren't met.
type HandleRoleMenuRequest_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleMenuRequest_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleMenuRequest_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleMenuRequest_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleMenuRequest_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleMenuRequest_DataValidationError) ErrorName() string {
	return "HandleRoleMenuRequest_DataValidationError"
}

// Error satisfies the builtin error interface
func (e HandleRoleMenuRequest_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleMenuRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleMenuRequest_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleMenuRequest_DataValidationError{}

// Validate checks the field values on HandleRoleDataScopeRequest_DataScope
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *HandleRoleDataScopeRequest_DataScope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleRoleDataScopeRequest_DataScope
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// HandleRoleDataScopeRequest_DataScopeMultiError, or nil if none found.
func (m *HandleRoleDataScopeRequest_DataScope) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleRoleDataScopeRequest_DataScope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetScope() < 0 {
		err := HandleRoleDataScopeRequest_DataScopeValidationError{
			field:  "Scope",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_HandleRoleDataScopeRequest_DataScope_DeptCustoms_Unique := make(map[uint64]struct{}, len(m.GetDeptCustoms()))

	for idx, item := range m.GetDeptCustoms() {
		_, _ = idx, item

		if _, exists := _HandleRoleDataScopeRequest_DataScope_DeptCustoms_Unique[item]; exists {
			err := HandleRoleDataScopeRequest_DataScopeValidationError{
				field:  fmt.Sprintf("DeptCustoms[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_HandleRoleDataScopeRequest_DataScope_DeptCustoms_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := HandleRoleDataScopeRequest_DataScopeValidationError{
				field:  fmt.Sprintf("DeptCustoms[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeptCheckStrictly != nil {

		if m.GetDeptCheckStrictly() < 0 {
			err := HandleRoleDataScopeRequest_DataScopeValidationError{
				field:  "DeptCheckStrictly",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return HandleRoleDataScopeRequest_DataScopeMultiError(errors)
	}

	return nil
}

// HandleRoleDataScopeRequest_DataScopeMultiError is an error wrapping multiple
// validation errors returned by
// HandleRoleDataScopeRequest_DataScope.ValidateAll() if the designated
// constraints aren't met.
type HandleRoleDataScopeRequest_DataScopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleRoleDataScopeRequest_DataScopeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleRoleDataScopeRequest_DataScopeMultiError) AllErrors() []error { return m }

// HandleRoleDataScopeRequest_DataScopeValidationError is the validation error
// returned by HandleRoleDataScopeRequest_DataScope.Validate if the designated
// constraints aren't met.
type HandleRoleDataScopeRequest_DataScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleRoleDataScopeRequest_DataScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleRoleDataScopeRequest_DataScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleRoleDataScopeRequest_DataScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleRoleDataScopeRequest_DataScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleRoleDataScopeRequest_DataScopeValidationError) ErrorName() string {
	return "HandleRoleDataScopeRequest_DataScopeValidationError"
}

// Error satisfies the builtin error interface
func (e HandleRoleDataScopeRequest_DataScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleRoleDataScopeRequest_DataScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleRoleDataScopeRequest_DataScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleRoleDataScopeRequest_DataScopeValidationError{}
