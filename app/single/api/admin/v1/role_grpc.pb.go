// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin/v1/role.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleService_ListRole_FullMethodName            = "/admin.v1.RoleService/ListRole"
	RoleService_CreateRole_FullMethodName          = "/admin.v1.RoleService/CreateRole"
	RoleService_GetRole_FullMethodName             = "/admin.v1.RoleService/GetRole"
	RoleService_UpdateRole_FullMethodName          = "/admin.v1.RoleService/UpdateRole"
	RoleService_UpdateRoleState_FullMethodName     = "/admin.v1.RoleService/UpdateRoleState"
	RoleService_DeleteRole_FullMethodName          = "/admin.v1.RoleService/DeleteRole"
	RoleService_ListRoleMenu_FullMethodName        = "/admin.v1.RoleService/ListRoleMenu"
	RoleService_HandleRoleMenu_FullMethodName      = "/admin.v1.RoleService/HandleRoleMenu"
	RoleService_ListRoleDept_FullMethodName        = "/admin.v1.RoleService/ListRoleDept"
	RoleService_GetRoleDataScope_FullMethodName    = "/admin.v1.RoleService/GetRoleDataScope"
	RoleService_HandleRoleDataScope_FullMethodName = "/admin.v1.RoleService/HandleRoleDataScope"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	// 角色模块
	// 列表角色
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// 获取指定ID角色
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
	// 修改指定ID角色
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// 更新指定ID角色状态
	UpdateRoleState(ctx context.Context, in *UpdateRoleStateRequest, opts ...grpc.CallOption) (*UpdateRoleStateResponse, error)
	// 删除指定ID角色
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// 获取指定ID角色菜单
	ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...grpc.CallOption) (*ListRoleMenuResponse, error)
	// 处理指定ID角色菜单
	HandleRoleMenu(ctx context.Context, in *HandleRoleMenuRequest, opts ...grpc.CallOption) (*HandleRoleMenuResponse, error)
	// 获取指定ID角色部门
	ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...grpc.CallOption) (*ListRoleDeptResponse, error)
	// 获取指定ID角色数据范围
	GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeRequest, opts ...grpc.CallOption) (*GetRoleDataScopeResponse, error)
	// 处理指定ID角色数据范围
	HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeRequest, opts ...grpc.CallOption) (*HandleRoleDataScopeResponse, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error) {
	out := new(ListRoleResponse)
	err := c.cc.Invoke(ctx, RoleService_ListRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, RoleService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, RoleService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, RoleService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRoleState(ctx context.Context, in *UpdateRoleStateRequest, opts ...grpc.CallOption) (*UpdateRoleStateResponse, error) {
	out := new(UpdateRoleStateResponse)
	err := c.cc.Invoke(ctx, RoleService_UpdateRoleState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, RoleService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...grpc.CallOption) (*ListRoleMenuResponse, error) {
	out := new(ListRoleMenuResponse)
	err := c.cc.Invoke(ctx, RoleService_ListRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) HandleRoleMenu(ctx context.Context, in *HandleRoleMenuRequest, opts ...grpc.CallOption) (*HandleRoleMenuResponse, error) {
	out := new(HandleRoleMenuResponse)
	err := c.cc.Invoke(ctx, RoleService_HandleRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) ListRoleDept(ctx context.Context, in *ListRoleDeptRequest, opts ...grpc.CallOption) (*ListRoleDeptResponse, error) {
	out := new(ListRoleDeptResponse)
	err := c.cc.Invoke(ctx, RoleService_ListRoleDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRoleDataScope(ctx context.Context, in *GetRoleDataScopeRequest, opts ...grpc.CallOption) (*GetRoleDataScopeResponse, error) {
	out := new(GetRoleDataScopeResponse)
	err := c.cc.Invoke(ctx, RoleService_GetRoleDataScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) HandleRoleDataScope(ctx context.Context, in *HandleRoleDataScopeRequest, opts ...grpc.CallOption) (*HandleRoleDataScopeResponse, error) {
	out := new(HandleRoleDataScopeResponse)
	err := c.cc.Invoke(ctx, RoleService_HandleRoleDataScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	// 角色模块
	// 列表角色
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	// 创建角色
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// 获取指定ID角色
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	// 修改指定ID角色
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// 更新指定ID角色状态
	UpdateRoleState(context.Context, *UpdateRoleStateRequest) (*UpdateRoleStateResponse, error)
	// 删除指定ID角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// 获取指定ID角色菜单
	ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ListRoleMenuResponse, error)
	// 处理指定ID角色菜单
	HandleRoleMenu(context.Context, *HandleRoleMenuRequest) (*HandleRoleMenuResponse, error)
	// 获取指定ID角色部门
	ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptResponse, error)
	// 获取指定ID角色数据范围
	GetRoleDataScope(context.Context, *GetRoleDataScopeRequest) (*GetRoleDataScopeResponse, error)
	// 处理指定ID角色数据范围
	HandleRoleDataScope(context.Context, *HandleRoleDataScopeRequest) (*HandleRoleDataScopeResponse, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedRoleServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServiceServer) GetRole(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRoleState(context.Context, *UpdateRoleStateRequest) (*UpdateRoleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleState not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceServer) ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ListRoleMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleMenu not implemented")
}
func (UnimplementedRoleServiceServer) HandleRoleMenu(context.Context, *HandleRoleMenuRequest) (*HandleRoleMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleMenu not implemented")
}
func (UnimplementedRoleServiceServer) ListRoleDept(context.Context, *ListRoleDeptRequest) (*ListRoleDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleDept not implemented")
}
func (UnimplementedRoleServiceServer) GetRoleDataScope(context.Context, *GetRoleDataScopeRequest) (*GetRoleDataScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleDataScope not implemented")
}
func (UnimplementedRoleServiceServer) HandleRoleDataScope(context.Context, *HandleRoleDataScopeRequest) (*HandleRoleDataScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRoleDataScope not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_ListRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRoleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRoleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_UpdateRoleState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRoleState(ctx, req.(*UpdateRoleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_ListRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListRoleMenu(ctx, req.(*ListRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_HandleRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).HandleRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_HandleRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).HandleRoleMenu(ctx, req.(*HandleRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_ListRoleDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ListRoleDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_ListRoleDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ListRoleDept(ctx, req.(*ListRoleDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRoleDataScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleDataScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoleDataScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_GetRoleDataScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoleDataScope(ctx, req.(*GetRoleDataScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_HandleRoleDataScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRoleDataScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).HandleRoleDataScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_HandleRoleDataScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).HandleRoleDataScope(ctx, req.(*HandleRoleDataScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRole",
			Handler:    _RoleService_ListRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RoleService_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleService_GetRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateRoleState",
			Handler:    _RoleService_UpdateRoleState_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoleMenu",
			Handler:    _RoleService_ListRoleMenu_Handler,
		},
		{
			MethodName: "HandleRoleMenu",
			Handler:    _RoleService_HandleRoleMenu_Handler,
		},
		{
			MethodName: "ListRoleDept",
			Handler:    _RoleService_ListRoleDept_Handler,
		},
		{
			MethodName: "GetRoleDataScope",
			Handler:    _RoleService_GetRoleDataScope_Handler,
		},
		{
			MethodName: "HandleRoleDataScope",
			Handler:    _RoleService_HandleRoleDataScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/role.proto",
}
