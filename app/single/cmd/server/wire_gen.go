// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/beiduoke/go-scaffold-single/api/common/conf"
	"github.com/beiduoke/go-scaffold-single/internal/biz"
	"github.com/beiduoke/go-scaffold-single/internal/data"
	"github.com/beiduoke/go-scaffold-single/internal/server"
	"github.com/beiduoke/go-scaffold-single/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, registrar registry.Registrar, bootstrap *conf.Bootstrap) (*kratos.App, func(), error) {
	v := data.NewModelMigrate()
	db := data.NewGormClient(bootstrap, logger, v)
	client := data.NewRedisClient(bootstrap, logger)
	meilisearchClient := data.NewMeilisearchClient(bootstrap, logger)
	syncedEnforcer := data.NewAuthzCasbinClient(bootstrap, logger)
	node := data.NewSnowflake(logger)
	dataData, cleanup, err := data.NewData(bootstrap, db, client, meilisearchClient, syncedEnforcer, node, logger)
	if err != nil {
		return nil, nil, err
	}
	transaction := data.NewTransaction(dataData)
	authenticator := data.NewAuthenticator(bootstrap, logger)
	menuRepo := data.NewMenuRepo(dataData, logger)
	domainRepo := data.NewDomainRepo(logger, dataData, menuRepo)
	deptRepo := data.NewDeptRepo(logger, dataData)
	roleRepo := data.NewRoleRepo(logger, dataData, menuRepo, deptRepo)
	authRepo := data.NewAuthRepo(logger, dataData, authenticator, domainRepo, roleRepo, menuRepo)
	postRepo := data.NewPostRepo(logger, dataData)
	userRepo := data.NewUserRepo(logger, dataData, domainRepo, roleRepo, postRepo, menuRepo, deptRepo)
	bizBiz := biz.NewBiz(logger, transaction, authRepo, domainRepo, roleRepo, userRepo)
	authUsecase := biz.NewAuthUsecase(logger, bizBiz)
	userUsecase := biz.NewUserUsecase(logger, bizBiz)
	authService := service.NewAuthService(logger, authUsecase, userUsecase)
	grpcServer := server.NewGRPCServer(bootstrap, authService, logger)
	userService := service.NewUserService(logger, userUsecase)
	roleUsecase := biz.NewRoleUsecase(logger, bizBiz)
	deptUsecase := biz.NewDeptUsecase(logger, bizBiz, deptRepo)
	roleService := service.NewRoleService(logger, roleUsecase, deptUsecase)
	domainUsecase := biz.NewDomainUsecase(logger, bizBiz)
	domainService := service.NewDomainService(logger, domainUsecase)
	deptService := service.NewDeptService(logger, deptUsecase)
	menuUsecase := biz.NewMenuUsecase(logger, bizBiz, menuRepo)
	menuService := service.NewMenuService(logger, menuUsecase)
	postUsecase := biz.NewPostUsecase(logger, bizBiz, postRepo)
	postService := service.NewPostService(logger, postUsecase)
	dictRepo := data.NewDictRepo(logger, dataData)
	dictUsecase := biz.NewDictUsecase(logger, bizBiz, dictRepo)
	dictService := service.NewDictService(logger, dictUsecase)
	authorized := data.NewAuthorized(syncedEnforcer, logger)
	securityUserCreator := data.NewSecurityUser(logger, dataData, authRepo)
	middleware := server.NewAuthMiddleware(authenticator, authorized, securityUserCreator)
	v2 := server.NewHttpMiddleware(logger, middleware)
	httpServer := server.NewHTTPServer(bootstrap, logger, authService, userService, roleService, domainService, deptService, menuService, postService, dictService, v2)
	app := newApp(logger, registrar, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
