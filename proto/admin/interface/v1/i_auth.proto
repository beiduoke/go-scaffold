syntax = "proto3";

package admin.interface.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";

import "core/service/v1/auth.proto";
import "core/service/v1/user.proto";

option go_package = "github.com/beiduoke/go-scaffold/api/admin/interface/v1;v1";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Scaffold SAAS Auth API";
    description: "后台管理脚手架系统-认证服务";
    version: "1.0";
		contact: {
			name: "SAAS架构";
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			email: "none@example.com";
		};
		license: {
			name: "BSD 3-Clause License";
			url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
		};
  }
};

// The greeting service definition.
service AuthService {
  // 后台登陆
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/admin/v1/login"
      body: "*"
    };
  }
  
  // 后台登出
  rpc Logout (LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/admin/v1/logout"
      body: "*"
    };

    option(gnostic.openapi.v3.operation) = {
      security: [{additional_properties: [{name: "OAuth2PasswordBearer"; value: {}}]}]
    };
  }

  // 注册
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/admin/v1/register"
      body: "*"
    };
  }
}

// 授权类型
enum GrandType {
  GRAND_TYPE_UNSPECIFIED = 0; // 未指定
  GRAND_TYPE_PASSWORD = 1; // 密码
  GRAND_TYPE_CODE = 2; // 验证码
}

// 用户后台登陆 - 请求
message LoginRequest {
  string user_name = 1; // 账号
  string password = 2; // 密码
  optional int32 grand_type = 3; // 授权类型，一直为：password
}
// 用户后台登陆 - 回应
message LoginResponse {
  uint32 id = 1; // 用户ID
  string user_name = 2; // 用户名
  string token_type = 3; // 令牌类型
  string access_token = 4; // 访问令牌
  string refresh_token = 5; // 刷新令牌
}

// 用户后台登出 - 请求
message LogoutRequest {}

// 用户后台登出 - 回应
message LogoutResponse {}

// 请求 - 注册
message RegisterRequest {
  message Auth {
    // 用户名
    string user_name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
    // 密码
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 25}];
    // 电话
    string phone = 3 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
    // 授权类型，一直为：password
    optional int32 grand_type = 4; 
  }
  // 请求体
  Auth auth = 1 [(validate.rules).message = {required: true}];
  string domain = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
}

// 回应 - 注册
message RegisterResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

