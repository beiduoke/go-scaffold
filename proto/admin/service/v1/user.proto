syntax = "proto3";

package admin.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";

import "admin/service/v1/menu.proto";
import "admin/service/v1/role.proto";
import "admin/service/v1/dept.proto";
import "admin/service/v1/post.proto";

option go_package = "github.com/beiduoke/go-scaffold/api/admin/service/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.admin.v1";
option java_outer_classname = "adminProtoV1";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Scaffold User API";
    description: "后台管理脚手架系统-用户服务";
    version: "1.0";
		contact: {
			name: "基础架构";
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			email: "none@example.com";
		};
		license: {
			name: "BSD 3-Clause License";
			url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
		};
  }
};

// The greeting service definition.
service UserService {
  // User 用户模块
  // 当前登录用户概述
  rpc GetUserInfo (GetUserInfoRequest) returns (GetUserInfoResponse) {
    option (google.api.http) = {
      get: "/v1/users/info"
    };
  }

  // 当前登录用户概述
  rpc GetUserProfile (GetUserProfileRequest) returns (GetUserProfileResponse) {
    option (google.api.http) = {
      get: "/v1/users/profiles"
    };
  }

  // 当前登录用户拥有角色
  rpc ListUserRole (ListUserRoleRequest) returns (ListUserRoleResponse) {
    option (google.api.http) = {
      get: "/v1/users/roles"
    };
  }

  // 获取角色菜单路由树形列表
  rpc ListUserRoleMenuRouterTree (ListUserRoleMenuRouterTreeRequest) returns (ListUserRoleMenuRouterTreeResponse) {
    option (google.api.http) = {
      get: "/v1/users/routers/trees"
      additional_bindings {
        get: "/v1/users/roles/{role_id}/routers/trees"
      }
    };
  }
  
  // 获取角色菜单路由树形列表
  rpc ListUserRoleMenuTree (ListUserRoleMenuTreeRequest) returns (ListUserRoleMenuTreeResponse) {
    option (google.api.http) = {
      get: "/v1/users/menus/trees"
      additional_bindings {
        get: "/v1/users/roles/{role_id}/menus/trees"
      }
    };
  }

  // 获取角色权限列表
  rpc ListUserRolePermission (ListUserRolePermissionRequest) returns (ListUserRolePermissionResponse) {
    option (google.api.http) = {
      get: "/v1/users/permissions"
      additional_bindings {
        get: "/v1/users/roles/{role_id}/permissions"
      }
    };
  }

  // 列表用户
  rpc ListUser (ListUserRequest) returns (ListUserResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // 创建用户
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  // 获取用户
  rpc GetUser (GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{id}"
    };
  }

  // 修改用户
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/{id}"
      body: "data"
    };
  }

  // 删除用户
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{id}"
    };
  }

  // 验证用户名是否存在
  rpc ExistUserName (ExistUserNameRequest) returns (ExistUserNameResponse) {
    option (google.api.http) = {
      post: "/v1/users/existName"
      body: "*"
    };
  }
}

// 用户模块
message User {
  uint64 id = 1;
  string name = 2;
  optional string nick_name = 4;
  optional string real_name = 5;
  optional string birthday = 6;
  optional int32 gender = 7; 
  optional string phone = 8;
  optional string email = 9;
  optional string avatar = 10;
  optional int32 state = 11 [(gnostic.openapi.v3.property) = {description: "状态"}];
  optional google.protobuf.Timestamp created_at = 12;
  optional google.protobuf.Timestamp updated_at = 13;
  optional uint64 dept_id = 14;
  repeated uint64 post_ids = 15;
  repeated uint64 role_ids = 16;
  optional admin.service.v1.Dept dept = 17;
  repeated admin.service.v1.Role roles = 18;
  repeated admin.service.v1.Post posts = 19;
}

// 请求 - 用户详情
message GetUserInfoRequest {}

// 回应 - 用户详情
message GetUserInfoResponse {
  repeated Role roles = 1;
  string name = 2;
  string nick_name = 4;
  string real_name = 5;
  string birthday = 6;
  int32 gender = 7; 
  string phone = 8;
  string email = 9;
  string avatar = 10;
  int32 state = 11 [(gnostic.openapi.v3.property) = {
    description: "用户状态"
    default: {string: "ON"}
    enum: [
      {yaml: "ON"}, 
      {yaml: "OFF"}
    ]
  }];
}

// 请求 - 用户概况详情
message GetUserProfileRequest {}

// 回应 - 用户概况详情
message GetUserProfileResponse {
  User user = 1;
  repeated Role roles = 2;
}


// 请求 - 用户角色
message ListUserRoleRequest {}

// 回应 - 用户角色
message ListUserRoleResponse {
  repeated Role items = 1;
  optional int64 total = 2;
}

// 请求 - 列表用户
message ListUserRequest {
  // 是否不分页
  optional bool nopaging = 1;
  // 当前页
  optional int32 page = 2;
  // 每一页的行数
  optional int32 page_size = 3;
  optional int32 dept_id = 4;
  optional string name = 5;
  optional string nick_name = 6;
}

// 回应 - 列表用户
message ListUserResponse {
  int64 total = 1;
  repeated User items = 2;
}

// 请求 - 获取用户角色菜单树形
message ListUserRoleMenuRouterTreeRequest {
  uint64 role_id = 1 [(validate.rules).uint64 = {gte: 0}];
  optional uint64 menu_parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取用户角色菜单树形 Deprecated
message ListUserRoleMenuTreeResponseDeprecated {
  message MenuMeta {
    // 路由title  一般必填
    string title = 1;
    // 动态路由可打开Tab页数
    int32 dynamic_level = 2;
    // 动态路由的实际Path, 即去除路由的动态部分;
    string real_path = 3;;
    // 是否忽略KeepAlive缓存
    bool ignore_keep_alive = 4;
    // 是否固定标签
    bool affix = 5;
    // 图标，也是菜单图标
    string icon = 6;
    // 内嵌iframe的地址
    string frame_src = 7;
    // 指定该路由切换的动画名
    string transition_name = 8;
    // 隐藏该路由在面包屑上面的显示
    bool hide_breadcrumb = 9;
    // 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true
    bool carry_param = 10;
    // 隐藏所有子菜单
    bool hide_children_in_menu = 11;
    // 当前激活的菜单。用于配置详情页时左侧激活的菜单路径
    string current_active_menu = 12;
    // 当前路由不再标签页显示
    bool hide_tab = 13;
    // 当前路由不再菜单显示
    bool hide_menu = 14;
    // 菜单排序，只对第一级有效
    int32 order_no = 15;
    // 忽略路由。用于在ROUTE_MAPPING以及BACK权限模式下，生成对应的菜单而忽略路由。2.5.3以上版本有效
    bool ignore_route = 16;
    // 是否在子级菜单的完整path中忽略本级path。2.5.3以上版本有效
    bool hide_pathfor_children = 17;
  }
  message Menu {
    string name = 1;
    string path = 2;
    string component = 3;
    string redirect = 4;
    string full_path = 5;
    string alias = 6;
    bool case_sensitive = 7;
    MenuMeta meta = 8;
    repeated Menu children = 9;
  }
  repeated Menu items = 1;
  optional int64 total = 2;
}

// 路由菜单
message MenuRouter {
  message Meta {
    // 路由title  一般必填
    string title = 1;
    // 是否忽略KeepAlive缓存
    optional bool ignore_keep_alive = 4;
    // 图标，也是菜单图标
    optional string icon = 6;
    // 内嵌iframe的地址
    optional string frame_src = 7;
    // 隐藏该路由在面包屑上面的显示
    optional bool hide_breadcrumb = 9;
    // 当前路由不再菜单显示
    optional bool hide_menu = 14;
    // 菜单排序，只对第一级有效
    optional int32 order_no = 15;
    // 当前激活的菜单。用于配置详情页时左侧激活的菜单路径
    optional string current_active_menu = 12;
    // 固定菜单在tab栏
    optional bool affix = 13;
  }
  // 路由名称
  string name = 1;
  // 路由地址
  string path = 2;
  // 路由组件
  optional string component = 3;
  // 路由重定向
  optional string redirect = 4;
  // 路由头信息
  Meta meta = 5;
  // 路由子集
  repeated MenuRouter children = 6;
  // 路由ID
  optional uint64 id = 7;
  // 路由父级
  optional uint64 parent_id = 8;
}

// 回应 - 获取用户角色菜单路由列表-树形
message ListUserRoleMenuRouterTreeResponse {
  repeated admin.service.v1.MenuRouter items = 1;
  optional int64 total = 2;
}

// 请求 - 获取用户角色菜单列表-树形
message ListUserRoleMenuTreeRequest {
  uint64 role_id = 1 [(validate.rules).uint64 = {gte: 0}];
  optional uint64 menu_parent_id = 2 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取用户角色列表
message ListUserRoleMenuTreeResponse {
  repeated admin.service.v1.Menu items = 1;
  optional int64 total = 2;
}

// 请求 - 获取用户角色列表
message ListUserRolePermissionRequest {
  uint64 role_id = 1 [(validate.rules).uint64 = {gte: 0}];
}

// 回应 - 获取用户角色列表
message ListUserRolePermissionResponse {
  repeated string items = 1;
  optional int64 total = 2;
}

// 请求 - 创建用户
message CreateUserRequest {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional string avatar = 2;
  optional string password = 3 [(validate.rules).string = {min_len: 6, max_len: 28}];
  optional string nick_name = 4 [(validate.rules).string = {min_len: 1, max_len: 10}];
  optional string real_name = 5 [(validate.rules).string = {min_len: 2, max_len: 10}];
  optional string birthday = 6 [(validate.rules).string.pattern = "^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$"];
  optional int32 gender = 7 [(validate.rules).int32.gte = 0];
  string phone = 8 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
  optional string email = 9 [(validate.rules).string.email = true];
  int32 state = 10 [(validate.rules).int32.gte = 0];
  uint64 dept_id = 14 [(validate.rules).uint64 = {gt: 0}];
  repeated uint64 post_ids = 15 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
  repeated uint64 role_ids = 16 [(validate.rules).repeated = {min_items: 1, unique: true, items: {uint64: {gt: 0}}}];
  optional string remarks = 17;
}

// 回应 - 创建用户
message CreateUserResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 绑定用户权限
message HandleUserRoleRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    uint64 domain_id = 2 [(validate.rules).uint64 = {gt: 0}]; 
    repeated uint64 role_ids = 11 [(validate.rules).repeated = {min_items: 1, unique: true, items: {uint64: {gt: 0}}}];
  }
  Data data = 3;
}

// 回应 - 绑定用户权限
message HandleUserRoleResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 获取用户
message GetUserRequest {
  uint64 id = 1  [(validate.rules).uint64 = {gt: 0}];
}

// 请求 - 删除用户
message DeleteUserRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
}

// 回应 - 删除用户
message DeleteUserResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 请求 - 修改用户
message UpdateUserRequest {
  uint64 id = 1 [(validate.rules).uint64 = {gt: 0}];
  message Data {
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string password = 3 [(validate.rules).string = {min_len: 6, max_len: 28}];
    optional string nick_name = 4 [(validate.rules).string = {min_len: 1, max_len: 10}];
    optional string real_name = 5 [(validate.rules).string = {min_len: 2, max_len: 10}];
    // x must be less than the Unix Epoch
    optional string birthday = 6 [(validate.rules).string.pattern = "^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$"];
    optional int32 gender = 7 [(validate.rules).int32.gte = 0];
    string phone = 8 [(validate.rules).string.pattern = "^1[0-9]{10}$"];
    optional string email = 9 [(validate.rules).string.email = true];
    int32 state = 10 [(validate.rules).int32.gte = 0];
    optional string avatar = 11;
    repeated uint64 role_ids = 12 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
    repeated uint64 post_ids = 13 [(validate.rules).repeated = {min_items: 0, unique: true, items: {uint64: {gt: 0}}}];
    uint64 dept_id = 14 [(validate.rules).uint64 = {gt: 0}];
  }
  Data data = 2;
}

// 回应 - 修改用户
message UpdateUserResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}

// 回应 - 获取用户菜单
message UserMenuTreeResponse {
  repeated admin.service.v1.MenuTree items = 1;
  optional int64 total = 2;
}

// 请求 - 验证用户是否存在
message ExistUserNameRequest {
  string name = 1;
}

// 回应 - 验证用户是否存在
message ExistUserNameResponse {
  int32 code = 1;
  string message = 2;
  optional google.protobuf.Any result = 3;
  string type = 4;
}